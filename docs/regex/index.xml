<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regexes on Chris Albon</title>
    <link>/regex/index.xml</link>
    <description>Recent content in Regexes on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="/regex/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Match A Symbol</title>
      <link>/regex/patterns/match_a_symbol/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_a_symbol/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;$100&amp;#39; Apply regex # Find all instances of the exact match &amp;#39;$&amp;#39; re.findall(r&amp;#39;\$&amp;#39;, text) [&#39;$&#39;]  </description>
    </item>
    
    <item>
      <title>Match A Unicode Character</title>
      <link>/regex/patterns/match_a_unicode_character/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_a_unicode_character/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;Microsoft™.&amp;#39; Apply regex # Find any unicode character for a trademark re.findall(r&amp;#39;\u2122&amp;#39;, text) [&#39;™&#39;]  </description>
    </item>
    
    <item>
      <title>Match A Word</title>
      <link>/regex/patterns/match_a_word/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_a_word/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find any word of three letters re.findall(r&amp;#39;\b...\b&amp;#39;, text) [&#39;The&#39;, &#39;fox&#39;, &#39;the&#39;]  </description>
    </item>
    
    <item>
      <title>Match Any Character</title>
      <link>/regex/patterns/match_any_character/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_any_character/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find anything with a &amp;#39;T&amp;#39; and then the next two characters re.findall(r&amp;#39;T..&amp;#39;, text) [&#39;The&#39;]  </description>
    </item>
    
    <item>
      <title>Match Any Of A List Of Characters</title>
      <link>/regex/patterns/match_any_of_a_list_of_symbols/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_any_of_a_list_of_symbols/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find all instances of any vowel re.findall(r&amp;#39;[aeiou]&amp;#39;, text) [&#39;e&#39;, &#39;u&#39;, &#39;i&#39;, &#39;o&#39;, &#39;o&#39;, &#39;u&#39;, &#39;e&#39;, &#39;o&#39;, &#39;e&#39;, &#39;e&#39;, &#39;a&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;]  </description>
    </item>
    
    <item>
      <title>Match Any Of A Series Of Options</title>
      <link>/regex/patterns/match_any_of_series_of_characters/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_any_of_series_of_characters/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find any of fox, snake, or bear re.findall(r&amp;#39;fox|snake|bear&amp;#39;, text) [&#39;fox&#39;, &#39;bear&#39;]  </description>
    </item>
    
    <item>
      <title>Match Any Of A Series Of Words</title>
      <link>/regex/patterns/match_any_of_series_of_words/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_any_of_series_of_words/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find any of fox, snake, or bear re.findall(r&amp;#39;\b(fox|snake|bear)\b&amp;#39;, text) [&#39;fox&#39;, &#39;bear&#39;]  </description>
    </item>
    
    <item>
      <title>Match Dates</title>
      <link>/regex/patterns/match_dates/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_dates/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;My birthday is 09/15/1983. My brother\&amp;#39;s birthday is 01/01/01. My other two brothers have birthdays of 9/3/2001 and 09/1/83.&amp;#39; Apply regex # Find any text that fits the regex re.findall(r&amp;#39;\b[0-3]?[0-9]/[0-3]?[0-9]/(?:[0-9]{2})?[0-9]{2}\b&amp;#39;, text) [&#39;09/15/1983&#39;, &#39;01/01/01&#39;, &#39;9/3/2001&#39;, &#39;09/1/83&#39;]  </description>
    </item>
    
    <item>
      <title>Match Email Addresses</title>
      <link>/regex/patterns/match_email_addresses/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_email_addresses/</guid>
      <description>Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;My email is chris@hotmail.com, thanks! No, I am at bob@data.ninja.&amp;#39; Apply regex # Find all email addresses re.findall(r&amp;#39;[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9]+&amp;#39;, text) # Explanation: # This regex has three parts # [a-zA-Z0-9_.+-]+ Matches a word (the username) of any length # @[a-zA-Z0-9-]+ Matches a word (the domain name) of any length # \.</description>
    </item>
    
    <item>
      <title>Match Exact Text</title>
      <link>/regex/patterns/match_exact_text/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_exact_text/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Apply regex # Find all instances of the exact match &amp;#39;The&amp;#39; re.findall(r&amp;#39;The&amp;#39;, text) [&#39;The&#39;]  </description>
    </item>
    
    <item>
      <title>Match Integers Of Any Length</title>
      <link>/regex/patterns/match_integers_of_any_length/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_integers_of_any_length/</guid>
      <description>Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;21 scouts and 3 tanks fought against 4,003 protestors.&amp;#39; Apply regex # Find any character block that is a integer of any length re.findall(r&amp;#39;[1-9](?:\d{0,2})(?:,\d{3})*(?:\.\d*[1-9])?|0?\.\d*[1-9]|0&amp;#39;, text) [&#39;21&#39;, &#39;3&#39;, &#39;4,003&#39;]  Explanation from Justin Morgan
[1-9](?:\d{0,2}) #A sequence of 1-3 numerals not starting with 0 (?:,\d{3})* #Any number of three-digit groups, each preceded by a comma (?</description>
    </item>
    
    <item>
      <title>Match Text Between HTML Tags</title>
      <link>/regex/patterns/match_text_between_html_tags/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_text_between_html_tags/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;&amp;lt;p&amp;gt;The quick brown fox.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;The lazy brown bear.&amp;lt;/p&amp;gt;&amp;#39; Apply regex # Find any text between &amp;#39;&amp;lt;p&amp;gt;&amp;#39; and &amp;#39;&amp;lt;/p&amp;gt;&amp;#39; re.findall(r&amp;#39;&amp;lt;p&amp;gt;(.*?)&amp;lt;/p&amp;gt;&amp;#39;, text) [&#39;The quick brown fox.&#39;, &#39;The lazy brown bear.&#39;]  </description>
    </item>
    
    <item>
      <title>Match Times</title>
      <link>/regex/patterns/match_times/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_times/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;Chris: 12:34am. Steve: 16:30&amp;#39; Apply regex # Find any text that fits the regex re.findall(r&amp;#39;([0-1]\d:[0-5]\d)\s*(?:AM|PM)?&amp;#39;, text) [&#39;12:34&#39;, &#39;16:30&#39;]  </description>
    </item>
    
    <item>
      <title>Match URLs</title>
      <link>/regex/patterns/match_urls/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_urls/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;My blog is http://www.chrisalbon.com and not http://chrisalbon.com&amp;#39; Apply regex # Find any ISBN-10 or ISBN-13 number re.findall(r&amp;#39;(http|ftp|https):\/\/([\w\-_]+(?:(?:\.[\w\-_]+)+))([\w\-\.,@?^=%&amp;amp;amp;:/~\+#]*[\w\-\@?^=%&amp;amp;amp;/~\+#])?&amp;#39;, text) [(&#39;http&#39;, &#39;www.chrisalbon.com&#39;, &#39;&#39;), (&#39;http&#39;, &#39;chrisalbon.com&#39;, &#39;&#39;)]  </description>
    </item>
    
    <item>
      <title>Match US Phone Numbers</title>
      <link>/regex/patterns/match_us_phone_numbers/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_us_phone_numbers/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;My phone number is 415-333-3922. His phone number is 4239389283&amp;#39; Apply regex # Find any text that fits the regex re.findall(r&amp;#39;\(?([2-9][0-8][0-9])\)?[-.●]?([2-9][0-9]{2})[-.●]?([0-9]{4})&amp;#39;, text) [(&#39;415&#39;, &#39;333&#39;, &#39;3922&#39;), (&#39;423&#39;, &#39;938&#39;, &#39;9283&#39;)]  </description>
    </item>
    
    <item>
      <title>Match US and UK Spellings</title>
      <link>/regex/patterns/match_us_uk_spellings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_us_uk_spellings/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;It\s center and not centre.&amp;#39; Apply regex # Find any ISBN-10 or ISBN-13 number re.findall(r&amp;#39;\bcent(?:er|re)\b&amp;#39;, text) [&#39;center&#39;, &#39;centre&#39;]  </description>
    </item>
    
    <item>
      <title>Match Words With A Certain Ending</title>
      <link>/regex/patterns/match_words_with_certain_ending/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_words_with_certain_ending/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;Capitalism, Communism, Neorealism, Liberalism&amp;#39; Apply regex # Find any word ending in &amp;#39;ism&amp;#39; re.findall(r&amp;#39;\b\w*ism\b&amp;#39;, text) # Specific: # \b - start of the word # \w* - a word of any length # ism\b - with &amp;#39;ism&amp;#39;at the end [&#39;Capitalism&#39;, &#39;Communism&#39;, &#39;Neorealism&#39;, &#39;Liberalism&#39;]  </description>
    </item>
    
    <item>
      <title>Match ZIP Codes</title>
      <link>/regex/patterns/match_zip_codes/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/regex/patterns/match_zip_codes/</guid>
      <description> Preliminaries # Load regex package import re Create some text # Create a variable containing a text string text = &amp;#39;3829 South Ave Street, Pheonix, AZ 34923&amp;#39; Apply regex # Find any ISBN-10 or ISBN-13 number re.findall(r&amp;#39;[0-9]{5}(?:-[0-9]{4})?&amp;#39;, text) [&#39;34923&#39;]  </description>
    </item>
    
  </channel>
</rss>