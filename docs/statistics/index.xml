<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Statistics on Chris Albon</title>
    <link>/statistics/index.xml</link>
    <description>Recent content in Statistics on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="/statistics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bessels Correction</title>
      <link>/statistics/frequentist/bessel_correction/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/statistics/frequentist/bessel_correction/</guid>
      <description>Bessel&amp;rsquo;s correction is the reason we use $n-1$ instead of $n$ in the calculations of sample variance and sample standard deviation.
Sample variance:
$$ s^2 = \frac {1}{n-1} \sum_{i=1}^n \left(x_i - \overline{x} \right)^ 2 $$
When we calculate sample variance, we are attempting to estimate the population variance, an unknown value. To make this estimate, we estimate this unknown population variance from the mean of the squared deviations of samples from the overall sample mean.</description>
    </item>
    
    <item>
      <title>Demonstrate The Central Limit Theorem</title>
      <link>/statistics/frequentist/demonstrate_the_central_limit_theorem/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/statistics/frequentist/demonstrate_the_central_limit_theorem/</guid>
      <description>Preliminaries # Import packages import pandas as pd import numpy as np # Set matplotlib as inline %matplotlib inline  Create Population Data From Non-Normal Distribution # Create an empty dataframe population = pd.DataFrame() # Create an column that is 10000 random numbers drawn from a uniform distribution population[&amp;#39;numbers&amp;#39;] = np.random.uniform(0,10000,size=10000)# Plot a histogram of the score data. # This confirms the data is not a normal distribution. population[&amp;#39;numbers&amp;#39;].hist(bins=100) &amp;lt;matplotlib.</description>
    </item>
    
    <item>
      <title>Pearsons Correlation Coefficient</title>
      <link>/statistics/frequentist/pearsons_correlation_coefficient/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/statistics/frequentist/pearsons_correlation_coefficient/</guid>
      <description>Based on this StackOverflow answer by cbare.
Preliminaries import statistics as stats Create Data x = [1,2,3,4,5,6,7,8,9] y = [2,1,2,4.5,7,6.5,6,9,9.5] Calculate Pearson&amp;rsquo;s Correlation Coefficient There are a number of equivalent expression ways to calculate Pearson&amp;rsquo;s correlation coefficient (also called Pearson&amp;rsquo;s r). Here is one.
$$r={\frac {1}{n-1}}\sum_{i=1}^{n}\left({\frac {x_{i}-{\bar {x}}}{s_{x}}}\right)\left({\frac {y_{i}-{\bar {y}}}{s_{y}}}\right)$$
where $s_{x}$ and $s_{y}$ are the sample standard deviation for $x$ and $y$, and $\left({\frac {x_{i}-{\bar {x}}}{s_{x}}}\right)$ is the standard score for $x$ and $y$.</description>
    </item>
    
    <item>
      <title>Probability Mass Functions</title>
      <link>/statistics/frequentist/probability_mass_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/statistics/frequentist/probability_mass_functions/</guid>
      <description>Preliminaries # Load libraries import matplotlib.pyplot as plt Create Data # Create some random integer data data = [3,2,3,4,2,3,5,2,2,3,3,5,2,2,5,6,2,2,2,3,6,6,2,4,3,2,3] Create A Count Of Values # Create a dictionary to store the counts count = {} # For each value in the data for observation in data: # An a key, value pair, with the observation being the key # and the value being +1 count[observation] = count.get(observation, 0) + 1 Normalize The Count To Between 0 and 1 # Calculate the number of observations n = len(data) # Create a dictionary probability_mass_function = {} # For each unique value, for unique_value, count in count.</description>
    </item>
    
    <item>
      <title>Spearmans Rank Correlation</title>
      <link>/statistics/frequentist/spearmans_rank_correlation/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/statistics/frequentist/spearmans_rank_correlation/</guid>
      <description>Preliminaries import numpy as np import pandas as pd import scipy.stats Create Data # Create two lists of random values x = [1,2,3,4,5,6,7,8,9] y = [2,1,2,4.5,7,6.5,6,9,9.5] Calculate Spearman&amp;rsquo;s Rank Correlation Spearman&amp;rsquo;s rank correlation is the Pearson&amp;rsquo;s correlation coefficient of the ranked version of the variables.
# Create a function that takes in x&amp;#39;s and y&amp;#39;s def spearmans_rank_correlation(xs, ys): # Calculate the rank of x&amp;#39;s xranks = pd.Series(xs).rank() # Caclulate the ranking of the y&amp;#39;s yranks = pd.</description>
    </item>
    
    <item>
      <title>T-Tests</title>
      <link>/statistics/frequentist/t-tests/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/statistics/frequentist/t-tests/</guid>
      <description>Preliminaries from scipy import stats import numpy as np Create Data # Create a list of 20 observations drawn from a random distribution  # with mean 1 and a standard deviation of 1.5 x = np.random.normal(1, 1.5, 20) # Create a list of 20 observations drawn from a random distribution  # with mean 0 and a standard deviation of 1.5 y = np.random.normal(0, 1.5, 20) One Sample Two-Sided T-Test Imagine the one sample T-test and drawing a (normally shaped) hill centered at 1 and &amp;ldquo;spread&amp;rdquo; out with a standard deviation of 1.</description>
    </item>
    
    <item>
      <title>Variance And Standard Deviation</title>
      <link>/statistics/frequentist/variance_and_standard_deviation/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/statistics/frequentist/variance_and_standard_deviation/</guid>
      <description>Preliminary # Import data import math Create Data # Create list of values data = [3,2,3,4,2,3,5,2,2,33,3,5,2,2,5,6,62,2,2,3,6,6,2,23,3,2,3] Calculate Population Variance Variance is a measurement of the spread of a data&amp;rsquo;s distribution. The higher the variance, the more &amp;ldquo;spread out&amp;rdquo; the data points are. Variance, commonly denoted as $S^{2}$, is calculated like this:
$$ \text{Population Variance} = S_n^{2} = \frac{1}{n}\sum_{i=1}^{n}(x_i-\bar{x})^{2}$$
$$ \text{Sample Variance} = S_{n-1}^{2} = \frac{1}{n-1}\sum_{i=1}^{n}(x_i-\bar{x})^{2}$$
Where $n$ is the number of observations, $\bar{x}$ is the mean of the observations, and $x_i-\bar{x}$ is an individual observation&amp;rsquo;s from the mean of the data.</description>
    </item>
    
  </channel>
</rss>