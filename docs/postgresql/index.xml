<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgresqls on Chris Albon</title>
    <link>/postgresql/index.xml</link>
    <description>Recent content in Postgresqls on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jun 2018 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create PostgreSQL Database With Python</title>
      <link>/postgresql/basics/create_postgresql_database_with_python/</link>
      <pubDate>Mon, 18 Jun 2018 11:53:49 -0700</pubDate>
      
      <guid>/postgresql/basics/create_postgresql_database_with_python/</guid>
      <description>Preliminaries # Load libraries from sqlalchemy import create_engine from sqlalchemy_utils import create_database, database_exists, drop_database # Create PostgreSQL connection engine = create_engine(&amp;#34;postgres://localhost/notes_db&amp;#34;) # Load sql_magic so we can write SQL in Jupyter Notebooks %load_ext sql_magic # Setup SQL connection to the postgreSQL engine we created %config SQL.conn_name = &amp;#39;engine&amp;#39; Create Database # If a PostgreSQL database with this name exists if database_exists(engine.url): # Delete PostgreSQL database  drop_database(engine.url) # Create empty PostgreSQL database create_database(engine.</description>
    </item>
    
    <item>
      <title>Add Column</title>
      <link>/postgresql/add_delete_change/add_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/add_column/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Add Column -- Alter the table called adventurers ALTER TABLE adventurers -- Add a column called armor that is a 255 -- character string field with the default value of null ADD COLUMN armor varchar(255) NULL View Table -- Retrieve all rows SELECT * FROM adventurers nameageraceweaponarmor Fjoak Doom-Wife28HumanAxeNULL Alooneric Cortte29ElfBowNULL Piperel Ramsay35ElfSwordNULL Casimir Yardley14ElfMagicNULL</description>
    </item>
    
    <item>
      <title>Adding Or Substracting Time</title>
      <link>/postgresql/dates/adding_or_substracting_time/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/dates/adding_or_substracting_time/</guid>
      <description>Create Table -- Create table called dead_adventurers CREATE TABLE dead_adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255), -- date variable  died date ) Insert Rows -- Insert into the table dead_adventurers INSERT INTO dead_adventurers (name, age, race, weapon, died) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;, &amp;#39;09-Nov-2017&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;, &amp;#39;10-JAN-2017&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;, &amp;#39;12-APR-2016&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;, &amp;#39;06-MAY-2017&amp;#39;) Create New Column Three Days Later -- Create a column called three_days_laters that takes the value -- of died and adds three days to it SELECT died + INTERVAL &amp;#39;3 day&amp;#39; AS three_days_later -- From adventurers table FROM dead_adventurers three_days_later 2017-11-12 00:00:00.</description>
    </item>
    
    <item>
      <title>All Unique Values In Two Tables</title>
      <link>/postgresql/merging_and_joining/all_unique_values_in_two_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/all_unique_values_in_two_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Find The Combined Unique Values In Two Tables -- Retrieve all weapons from elves SELECT weapon FROM elves -- Combine unique values with.</description>
    </item>
    
    <item>
      <title>Apply Operation To Column</title>
      <link>/postgresql/basics/apply_operation_to_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/apply_operation_to_column/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Apply Operation To Column -- Update the age column, multiplying all age values by 10 UPDATE adventurers SET age = age * 10 Apply Operation To Column With Conditions -- Update the name column where the race column is &amp;#39;Elf&amp;#39; UPDATE adventurers SET name = &amp;#39;Some Elf&amp;#39; WHERE race = &amp;#39;Elf&amp;#39; View Table -- Retrieve data SELECT * FROM adventurers nameagerace Fjoak Doom-Wife280Human Some Elf290Elf Some Elf350Elf Some Elf140Elf</description>
    </item>
    
    <item>
      <title>Calculate Max, Min, Or Average Of Column</title>
      <link>/postgresql/numeric/max_min_and_average_of_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/numeric/max_min_and_average_of_column/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Calculate Max -- Return maximum value of of age in adventurers SELECT MAX(age) FROM adventurers max 35</description>
    </item>
    
    <item>
      <title>Calculate Running Total</title>
      <link>/postgresql/numeric/calculate_running_total/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/numeric/calculate_running_total/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- integer variable  id int, -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (id, name, age, race, weapon) VALUES (1, &amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (2, &amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (3, &amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (4, &amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create Running Total -- Get name, age, and.</description>
    </item>
    
    <item>
      <title>Calculate Sum Of Column</title>
      <link>/postgresql/numeric/calculate_sum_of_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/numeric/calculate_sum_of_column/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Calculate Sum -- Return total value of of age in adventurers SELECT SUM(age) FROM adventurers sum 106</description>
    </item>
    
    <item>
      <title>Calculate Time Duration</title>
      <link>/postgresql/dates/calculate_time_duration/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/dates/calculate_time_duration/</guid>
      <description>Create Table -- Create table called dead_adventurers CREATE TABLE dead_adventurers ( -- string variable  name varchar(255), -- string variable  race varchar(255), -- string variable  weapon varchar(255), -- date variable  started_adventure date, -- date variable  died date ) Insert Rows -- Insert into the table dead_adventurers INSERT INTO dead_adventurers (name, race, weapon, started_adventure, died) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;, &amp;#39;09-JAN-2017&amp;#39;, &amp;#39;10-Nov-2017&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;, &amp;#39;10-JAN-2017&amp;#39;, &amp;#39;11-JAN-2017&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;, &amp;#39;11-JAN-2017&amp;#39;, &amp;#39;12-APR-2017&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;, &amp;#39;23-JAN-2017&amp;#39;, &amp;#39;06-MAY-2017&amp;#39;) Calculate Duration Between Two Date Values -- Get all the columns, and add a new column called days_on_adventure -- that is the number of days between the start of the adventurer and when they died SELECT *, died - started_adventure AS days_on_adventure FROM dead_adventurers nameraceweaponstarted_adventuredieddays_on_adventure Fjoak Doom-WifeHumanAxe2017-01-092017-11-10305 Alooneric CortteElfBow2017-01-102017-01-111 Piperel RamsayElfSword2017-01-112017-04-1291 Casimir YardleyElfMagic2017-01-232017-05-06103</description>
    </item>
    
    <item>
      <title>Cartesian Product Of Tables</title>
      <link>/postgresql/merging_and_joining/cartesian_product/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/cartesian_product/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Tasar Keynelis&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Cartestian Product Of Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>Change Values</title>
      <link>/postgresql/add_delete_change/change_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/change_values/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Update Row Values -- Update the elves table UPDATE elves -- To set age to the current age plus 1 SET age = age + 1 View Elves Table -- Retrieve all rows from the view Elf SELECT * FROM elves nameageracealive Dallar Woodfoot26ElfYes Cordin Garner30ElfYes Keat Knigh25ElfYes Colbat Nalor125ElfYes</description>
    </item>
    
    <item>
      <title>Compare Values To Subquery</title>
      <link>/postgresql/basics/compare_values_to_subquery/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/compare_values_to_subquery/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Check If Each Elf Is Older Than Any Of The Dwarves -- Retrieve All The Elves SELECT * FROM elves -- Where their age is greater than at least one WHERE age &amp;gt; ANY ( -- Of all the Dwarves  SELECT age FROM dwarves ) nameageraceweapon Dallar Woodfoot25ElfBow Cordin Garner29ElfBow Keat Knigh24ElfSword Colbat Nalor124ElfMagic</description>
    </item>
    
    <item>
      <title>Concatenate Multiple Table</title>
      <link>/postgresql/merging_and_joining/concatenate_multiple_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/concatenate_multiple_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Orcs -- Create table called orcs CREATE TABLE orcs ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Insert Rows Into Orc Table INSERT INTO orcs (name, age, race, weapon) VALUES (&amp;#39;Wokganit&amp;#39;, 23, &amp;#39;Orc&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Wudugog&amp;#39;, 145, &amp;#39;Orc&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Wegigoth&amp;#39;, 12, &amp;#39;Orc&amp;#39;, &amp;#39;Magic&amp;#39;), (&amp;#39;Wulgha&amp;#39;, 23, &amp;#39;Orc&amp;#39;, &amp;#39;Axe&amp;#39;) Concatenate All Tables -- All rows from elf table SELECT * FROM elves -- Concatenate with.</description>
    </item>
    
    <item>
      <title>Concatenate Values</title>
      <link>/postgresql/text/concatenate_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/text/concatenate_values/</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and age values and concatenate together as a sentence SELECT name||&amp;#39; is &amp;#39;||age||&amp;#39; years old.</description>
    </item>
    
    <item>
      <title>Convert Floats To Integers</title>
      <link>/postgresql/numeric/convert_floats_to_integers/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/numeric/convert_floats_to_integers/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Calculate Average -- Return average value of of age in adventurers SELECT AVG(age) FROM adventurers avg 26.</description>
    </item>
    
    <item>
      <title>Copy Rows From One Table To Another</title>
      <link>/postgresql/basics/copy_rows_from_one_table_to_another/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/copy_rows_from_one_table_to_another/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Villains -- Create table called equipment CREATE TABLE villains ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Row Into Adventurers -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;) View Adventurers Table -- Retrieve all rows SELECT * FROM adventurers nameagerace Fjoak Doom-Wife28Human</description>
    </item>
    
    <item>
      <title>Copy Table Structure</title>
      <link>/postgresql/tables/copy_table_structure/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/copy_table_structure/</guid>
      <description> Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create New Table Using Existing Table&amp;rsquo;s Structure -- Create table called adventurers_copy using the same columns as... CREATE TABLE adventurers_copy AS ( -- The adventurers table  SELECT * FROM adventurers ) </description>
    </item>
    
    <item>
      <title>Count Rows</title>
      <link>/postgresql/basics/count_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/count_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Count Rows -- Count rows in adventurers SELECT COUNT(*) FROM adventurers count 4</description>
    </item>
    
    <item>
      <title>Count Unique Values</title>
      <link>/postgresql/basics/count_unique_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/count_unique_values/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Count Unique Values In Race -- Count the number of unique values in the race column SELECT COUNT (DISTINCT race) FROM adventurers count 2</description>
    </item>
    
    <item>
      <title>Create Column Aliases</title>
      <link>/postgresql/add_delete_change/create_column_aliases/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/create_column_aliases/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and weapon column, renamed full_name and primary_weapon SELECT name as full_name, weapon as primary_weapon FROM adventurers full_nameprimary_weapon Fjoak Doom-WifeAxe Alooneric CortteBow Piperel RamsaySword Casimir YardleyMagic</description>
    </item>
    
    <item>
      <title>Create Column Conditional On Another Column</title>
      <link>/postgresql/add_delete_change/create_column_condition_on_another_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/create_column_condition_on_another_column/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create An If Else Statement There are a number of ways to do if-else in SQL, my prefered way is the CASE statement.</description>
    </item>
    
    <item>
      <title>Create Column Index</title>
      <link>/postgresql/basics/create_column_index/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/create_column_index/</guid>
      <description> Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Create Index -- Index the names column in the elves table CREATE INDEX ON elves (name) </description>
    </item>
    
    <item>
      <title>Create Column Of Values</title>
      <link>/postgresql/add_delete_change/create_column_of_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/create_column_of_values/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create Column Of Values -- Get all rows and add a column called training where all values are &amp;#39;elite&amp;#39; SELECT *, &amp;#39;elite&amp;#39; as training FROM adventurers nameageraceweapontraining Fjoak Doom-Wife28HumanAxeelite Alooneric Cortte29ElfBowelite Piperel Ramsay35ElfSwordelite Casimir Yardley14ElfMagicelite</description>
    </item>
    
    <item>
      <title>Create Primary Key</title>
      <link>/postgresql/add_delete_change/create_primary_key/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/create_primary_key/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- integer variable  adventurer_id INT, -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255), PRIMARY KEY (adventurer_id) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (adventurer_id, name, age, race, weapon) VALUES (1, &amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (2, &amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (3, &amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (4, &amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT * FROM adventurers adventurer_idnameageraceweapon 1Fjoak Doom-Wife28HumanAxe 2Alooneric Cortte29HumanBow 3Piperel Ramsay35ElfBow 4Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Create Subquery</title>
      <link>/postgresql/basics/create_subquery/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/create_subquery/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create Subquery -- Retrieve all the rows in adventurers SELECT * FROM adventurers -- Where the name of the adventurer is in WHERE name IN -- A subquery that will ( -- Select all the names in adventurers  SELECT name FROM adventurers -- Where race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) nameagerace Alooneric Cortte29Elf Piperel Ramsay35Elf Casimir Yardley14Elf</description>
    </item>
    
    <item>
      <title>Create Table</title>
      <link>/postgresql/tables/create_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/create_table/</guid>
      <description> Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) </description>
    </item>
    
    <item>
      <title>Create Table With Default Values</title>
      <link>/postgresql/tables/create_table_with_default_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/create_table_with_default_values/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable with default value of &amp;#39;no weapon&amp;#39;  weapon varchar(255) DEFAULT &amp;#39;no weapon&amp;#39; ) Insert Row -- Insert rows into the table adventurers -- Notice we don&amp;#39;t provide value for weapon column INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers nameageraceweapon Piperel Ramsay35Elfno weapon Casimir Yardley14Elfno weapon</description>
    </item>
    
    <item>
      <title>Create Table With UUIDs</title>
      <link>/postgresql/tables/create_table_with_uuids/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/create_table_with_uuids/</guid>
      <description>Install UUID Extension -- Install uuid extension CREATE EXTENSION IF NOT EXISTS &amp;#34;uuid-ossp&amp;#34; Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- uuid variable  adventurer_id uuid DEFAULT uuid_generate_v4(), -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255), -- Assign adventurer_id as primary key  PRIMARY KEY (adventurer_id) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows in table SELECT * FROM adventurers adventurer_idnameageraceweapon 61bf9084-2fcc-40dd-bbec-08de205e7877Fjoak Doom-Wife28HumanAxe 495c81ca-a49d-4848-84bc-01bfa27916ccAlooneric Cortte29HumanBow 1533f42e-e64b-4aa2-8432-926defe3d248Piperel Ramsay35ElfBow 090420af-372c-43b8-9eda-763a76eb692fCasimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Create Temporary Table</title>
      <link>/postgresql/tables/create_temporary_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/create_temporary_table/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create Temporary Table From Original Table -- Create a temporary table called adventurers_temp that.</description>
    </item>
    
    <item>
      <title>Create View</title>
      <link>/postgresql/basics/create_view/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/create_view/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATE VIEW elves AS ( -- Select all rows from adventurers table  SELECT * FROM adventurers -- Where the race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Retrieve View -- Retrieve all rows from the view Elf SELECT * FROM elves nameageraceweapon Piperel Ramsay35ElfBow Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Delete All Rows</title>
      <link>/postgresql/add_delete_change/delete_all_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/delete_all_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT * FROM adventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29HumanBow Piperel Ramsay35ElfBow Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Delete Duplicates</title>
      <link>/postgresql/add_delete_change/delete_duplicates/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/delete_duplicates/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) View Elves Table -- Retrieve all rows from the view Elf SELECT * FROM elves nameageracealive Dallar Woodfoot25ElfYes Cordin Garner29ElfYes Keat Knigh24ElfYes Keat Knigh24ElfYes Keat Knigh24ElfYes Keat Knigh24ElfYes Colbat Nalor124ElfYes</description>
    </item>
    
    <item>
      <title>Delete Primary Key</title>
      <link>/postgresql/add_delete_change/delete_primary_key/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/delete_primary_key/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- integer variable  adventurer_id INT, -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255), PRIMARY KEY (adventurer_id) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (adventurer_id, name, age, race, weapon) VALUES (1, &amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (2, &amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (3, &amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (4, &amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT * FROM adventurers adventurer_idnameageraceweapon 1Fjoak Doom-Wife28HumanAxe 2Alooneric Cortte29HumanBow 3Piperel Ramsay35ElfBow 4Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Delete Rows</title>
      <link>/postgresql/add_delete_change/delete_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/delete_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) View Table -- Retrieve all rows SELECT * FROM adventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29HumanBow Piperel Ramsay35ElfBow Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Delete Rows That Don&#39;t Exist In Another Table</title>
      <link>/postgresql/add_delete_change/delete_rows_that_dont_exist_in_another_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/delete_rows_that_dont_exist_in_another_table/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Create Table Of Alive -- Create table called alive CREATE TABLE alive ( -- string variable  name varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Insert Rows Into Alive Table INSERT INTO alive (name) VALUES (&amp;#39;Keat Knigh&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;) Delete Rows In Elf Table That Don&amp;rsquo;t Exist In Alive Table -- Delete in elf table DELETE FROM elves -- Where the name in elves is not in the list of names in alive.</description>
    </item>
    
    <item>
      <title>Delete Table</title>
      <link>/postgresql/tables/delete_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/delete_table/</guid>
      <description> Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Delete Table -- Delete table DROP TABLE adventurers </description>
    </item>
    
    <item>
      <title>Delete Table With Views</title>
      <link>/postgresql/tables/delete_table_with_views/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/delete_table_with_views/</guid>
      <description> Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATE VIEW elves AS ( -- Select all rows from adventurers table  SELECT * FROM adventurers -- Where the race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Delete Table -- Delete table and dependent views DROP TABLE adventurers CASCADE </description>
    </item>
    
    <item>
      <title>Delete View</title>
      <link>/postgresql/basics/delete_view/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/delete_view/</guid>
      <description> Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing CREATE VIEW elves AS ( -- Select all rows from adventurers table  SELECT * FROM adventurers -- Where the race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Delete View -- Delete View DROP VIEW elves </description>
    </item>
    
    <item>
      <title>Duplicate Table</title>
      <link>/postgresql/tables/duplicate_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/duplicate_table/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Row -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) View Table -- Retrieve rows from table SELECT * FROM warriors nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic</description>
    </item>
    
    <item>
      <title>Examine A Query</title>
      <link>/postgresql/basics/examine_a_query/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/examine_a_query/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Row -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) View Table -- Retrieve rows from table SELECT * FROM adventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic</description>
    </item>
    
    <item>
      <title>Export To CSV</title>
      <link>/postgresql/add_delete_change/export_to_csv/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/export_to_csv/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Export To CSV Note: Relative file paths are not allowed.</description>
    </item>
    
    <item>
      <title>Extract Characters From Strings</title>
      <link>/postgresql/text/extract_characters_from_strings/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/text/extract_characters_from_strings/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Extract Characters From Strings -- Extract the first two characters from the race column values SELECT name, age, SUBSTR(race, 1, 2) FROM adventurers nameagesubstr Fjoak Doom-Wife28Hu Alooneric Cortte29Hu Piperel Ramsay35El Casimir Yardley14El</description>
    </item>
    
    <item>
      <title>Find Values In Both Tables</title>
      <link>/postgresql/merging_and_joining/find_values_in_both_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/find_values_in_both_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Find All Unique Values In Both Tables -- Retrieve all weapons from elves SELECT weapon FROM elves -- Find the unique values that overlap with.</description>
    </item>
    
    <item>
      <title>Find Values In One Table And Not Another</title>
      <link>/postgresql/merging_and_joining/find_values_in_one_table_and_not_another/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/find_values_in_one_table_and_not_another/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Find Unique Values In Elves That Aren&amp;rsquo;t In Dwarves -- Retrieve all weapons from elves SELECT weapon FROM elves -- Find the unique values that are not in.</description>
    </item>
    
    <item>
      <title>Group Rows</title>
      <link>/postgresql/basics/group_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/group_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Group Rows -- Retrieve the race and average age from the table SELECT race, AVG(age) FROM adventurers -- Grouped by race GROUP BY race, weapon -- Where the weapon of the adventurer is a bow HAVING weapon = &amp;#39;Bow&amp;#39; raceavg Elf14 Human29</description>
    </item>
    
    <item>
      <title>Group Rows With Conditions</title>
      <link>/postgresql/basics/group_rows_with_conditions/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/group_rows_with_conditions/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Group Rows -- Retrieve the race and average age from the table SELECT race, age, AVG(age) FROM adventurers -- Grouped by race GROUP BY race age -- That are older than 20 HAVING age &amp;gt; 20 raceavg Elf24.</description>
    </item>
    
    <item>
      <title>If Else</title>
      <link>/postgresql/basics/if_else/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/if_else/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create An If Else Statement There are a number of ways to do if-else in SQL, my prefered way is the CASE statement.</description>
    </item>
    
    <item>
      <title>Import CSV</title>
      <link>/postgresql/add_delete_change/import_csv/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/import_csv/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Export To CSV -- Export the adventurers table to that file path and -- name using the comma delimiter and with column headings COPY adventurers TO &amp;#39;/Users/chrisalbon/example_file.</description>
    </item>
    
    <item>
      <title>Inner Join Tables</title>
      <link>/postgresql/merging_and_joining/inner_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/inner_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Inner Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>Insert Rows</title>
      <link>/postgresql/add_delete_change/insert_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/insert_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Row -- Insert row into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe</description>
    </item>
    
    <item>
      <title>Join Multiple Table</title>
      <link>/postgresql/merging_and_joining/join_multiple_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/join_multiple_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Weapons -- Create table called weapons CREATE TABLE weapons ( -- string variable  name varchar(255), -- string variable  weapon varchar(255), -- integer variable  weight int ) Create Table Of Armor -- Create table called armor CREATE TABLE armor ( -- string variable  name varchar(255), -- string variable  body varchar(255), -- string variable  helm varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;) Insert Rows Into Weapon Table INSERT INTO weapons (name, weapon, weight) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;,&amp;#39;Axe&amp;#39;, 2), (&amp;#39;Cordin Garner&amp;#39;, &amp;#39;Halberd&amp;#39;, 3), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Dagger&amp;#39;, 4), (&amp;#39;Colbat Nalor&amp;#39;, &amp;#39;Dagger&amp;#39;, 5) Insert Rows Into Armor Table INSERT INTO armor (name, body, helm) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather&amp;#39;, &amp;#39;Leather&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, &amp;#39;Leather&amp;#39;, NULL), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Plate&amp;#39;, &amp;#39;Plate&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, &amp;#39;Plate&amp;#39;, &amp;#39;Plate&amp;#39;) Join All Tables -- All rows from table SELECT elves.</description>
    </item>
    
    <item>
      <title>Left Join Tables</title>
      <link>/postgresql/merging_and_joining/left_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/left_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Tasar Keynelis&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Left Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>List Columns In Table</title>
      <link>/postgresql/tables/list_columns_in_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/list_columns_in_table/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) View Columns Rows In Elf Table -- Get name, data ype and column position SELECT column_name, data_type, ordinal_position -- From the column&amp;#39;s metadata FROM information_schema.</description>
    </item>
    
    <item>
      <title>List Index Columns</title>
      <link>/postgresql/basics/list_indexed_columns/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/list_indexed_columns/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Create Index -- Index the names column in the elves table CREATE INDEX ON elves (name) View All Indexes In Database SELECT indexes.</description>
    </item>
    
    <item>
      <title>List Tables In Database</title>
      <link>/postgresql/basics/list_tables_in_database/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/list_tables_in_database/</guid>
      <description>Create Table -- Create table called villains CREATE TABLE villains ( -- string variable  name varchar(255) ) Create Table -- Create table called heroes CREATE TABLE heroes ( -- string variable  name varchar(255) ) Create Table -- Create table called battles CREATE TABLE battles ( -- string variable  name varchar(255) ) List Tables In Database SELECT table_name FROM information_schema.tables WHERE table_schema = &amp;#39;public&amp;#39; AND table_type = &amp;#39;BASE TABLE&amp;#39; table_name battles heroes villians</description>
    </item>
    
    <item>
      <title>Lower And Upper Case</title>
      <link>/postgresql/text/lower_case_and_upper_case/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/text/lower_case_and_upper_case/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Upper Case String Values -- Upper case the values in the race column SELECT UPPER(race) FROM adventurers upper HUMAN HUMAN ELF ELF</description>
    </item>
    
    <item>
      <title>Mathematical Operations On Columns</title>
      <link>/postgresql/numeric/mathematical_operations_on_column/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/numeric/mathematical_operations_on_column/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Apply Addition To Column -- Apply operation UPDATE adventurers SET age = age + 10 View Table -- Retrieve data SELECT * FROM adventurers nameagerace Fjoak Doom-Wife38Human Alooneric Cortte39Elf Piperel Ramsay45Elf Casimir Yardley24Elf</description>
    </item>
    
    <item>
      <title>Outer Join Tables</title>
      <link>/postgresql/merging_and_joining/outer_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/outer_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Tasar Keynelis&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Outer Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>Partial String Match</title>
      <link>/postgresql/text/partial_string_match/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/text/partial_string_match/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows %o% indicates we are matching any string that contains an o.</description>
    </item>
    
    <item>
      <title>Rename Columns In Views</title>
      <link>/postgresql/basics/rename_columns_in_views/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/rename_columns_in_views/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;) Create View -- Create view called elves containing with the column&amp;#39;s renamed: -- elven_name, elven_age, race, and elven_weapon CREATE VIEW elves (elven_name, elven_age, race, elven_weapon) AS ( -- Select all rows from adventurers table  SELECT * FROM adventurers -- Where the race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) Retrieve View -- Retrieve all rows from the view Elf SELECT * FROM elves elven_nameelven_ageraceelven_weapon Piperel Ramsay35ElfBow Casimir Yardley14ElfBow</description>
    </item>
    
    <item>
      <title>Replace Missing Values</title>
      <link>/postgresql/basics/replace_missing_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/replace_missing_values/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows With Missing Values -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, NULL), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, NULL) Retrieve Missing Values In SQL, missing values are denoted as NULL.</description>
    </item>
    
    <item>
      <title>Retrieve Only A Few Rows</title>
      <link>/postgresql/basics/retrieve_only_a_few_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/retrieve_only_a_few_rows/</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Only Two Rows -- Retrieve rows from table SELECT * FROM adventurers -- Limited to two rows  LIMIT 2 nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow</description>
    </item>
    
    <item>
      <title>Retrieve Random Subset Of Rows</title>
      <link>/postgresql/basics/retrieve_random_subset_of_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/retrieve_random_subset_of_rows/</guid>
      <description>Note: This code works in PostgreSQL databases, but might not work in other SQL database systems (e.g. MySQL).
Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Only Two Rows -- Retrieve rows from table SELECT * FROM adventurers -- Shuffle randomly  ORDER BY RANDOM() -- Retrieve two rows  LIMIT 2 &amp;lt;!</description>
    </item>
    
    <item>
      <title>Retrieve Row</title>
      <link>/postgresql/basics/retrieve_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/retrieve_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers nameageraceweapon Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic</description>
    </item>
    
    <item>
      <title>Retrieve Rows Based On Condition</title>
      <link>/postgresql/basics/retrieve_rows_based_on_condition/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/retrieve_rows_based_on_condition/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows Of Elves -- Retrieve all rows from table SELECT * FROM adventurers -- Where the race is Elf  WHERE race = &amp;#39;Elf&amp;#39; nameageraceweapon Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword Casimir Yardley14ElfMagic</description>
    </item>
    
    <item>
      <title>Retrieve Rows Based On Multiple Condition</title>
      <link>/postgresql/basics/retrieve_rows_based_on_multiple_conditions/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/retrieve_rows_based_on_multiple_conditions/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows Of Elven Swords Wielders -- Retrieve all rows from table SELECT * FROM adventurers -- Where the race is Elf  WHERE race = &amp;#39;Elf&amp;#39; -- weapon is sword  AND weapon = &amp;#39;Sword&amp;#39; nameageraceweapon Piperel Ramsay35ElfSword</description>
    </item>
    
    <item>
      <title>Retrieve Subset Of Columns</title>
      <link>/postgresql/basics/retrieve_subset_columns/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/retrieve_subset_columns/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Two Columns -- Retrieve name and age columns SELECT name, age FROM adventurers nameage Fjoak Doom-Wife28 Alooneric Cortte29 Piperel Ramsay35 Casimir Yardley14</description>
    </item>
    
    <item>
      <title>Retrieving Missing Values</title>
      <link>/postgresql/basics/retrieving_missing_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/retrieving_missing_values/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows With Missing Values -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, NULL), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, NULL) Retrieve Missing Values In SQL, missing values are denoted as NULL.</description>
    </item>
    
    <item>
      <title>Right Join Tables</title>
      <link>/postgresql/merging_and_joining/right_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/right_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Create Table Of Adventurer&amp;rsquo;s Equipment -- Create table called equipment CREATE TABLE equipment ( -- string variable  name varchar(255), -- string variable  clothes varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Dwarf&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Dwarf&amp;#39;) Insert Rows Into Equipment Table INSERT INTO equipment (name, clothes, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, &amp;#39;Leather Armor&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, &amp;#39;Robe&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Tasar Keynelis&amp;#39;, &amp;#39;Tunic&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Sataleeti Iarroris&amp;#39;,&amp;#39;Chainmail&amp;#39;, &amp;#39;Axe&amp;#39;) Right Join Tables -- Return the name of people from the adventurers table, age, race, clothes, and weapon SELECT adventurers.</description>
    </item>
    
    <item>
      <title>Save Queries As Variables</title>
      <link>/postgresql/basics/save_queries_as_variables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/save_queries_as_variables/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Create Two Subqueries, Save As Variables, Use In Another Query Note that there are better ways to run this particular query.</description>
    </item>
    
    <item>
      <title>Select Highest Value In Each Group</title>
      <link>/postgresql/basics/select_highest_value_in_each_group/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/select_highest_value_in_each_group/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Select The Oldest Adventurer In Each Race -- Get the name, race, age of the first row in each group, -- when grouped by race SELECT DISTINCT ON (race) name, race, age FROM adventurers -- Order by race, then age, in descending order -- (so the oldest person is the top of each group) ORDER BY race, age DESC nameraceage Piperel RamsayElf35 Alooneric CortteHuman29</description>
    </item>
    
    <item>
      <title>Select Values Between Two Values</title>
      <link>/postgresql/basics/select_values_between_two_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/select_values_between_two_values/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Human&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;) Get Values Between Two Values, Method 1 -- Get all rows from adventurers SELECT * FROM adventurers -- Where age is between 20 and 30 WHERE age BETWEEN 20 AND 30 nameagerace Fjoak Doom-Wife28Human Alooneric Cortte29Human</description>
    </item>
    
    <item>
      <title>Self Join Table</title>
      <link>/postgresql/merging_and_joining/self_join/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/self_join/</guid>
      <description>Create Table Of Adventurers -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  child_of varchar(255) ) Insert Rows Into Adventurers Table INSERT INTO adventurers (name, age, child_of) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, NULL), (&amp;#39;Cordin Garner&amp;#39;, 29, NULL), (&amp;#39;Keat Garner&amp;#39;, 24, &amp;#39;Cordin Garner&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, NULL) Inner Join Tables -- Select name of copy1 and name of copy2 (renamed &amp;#34;parent&amp;#34;) SELECT copy1.</description>
    </item>
    
    <item>
      <title>Show Column Information</title>
      <link>/postgresql/tables/show_column_information/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/show_column_information/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Show Column Information -- Select column name, data type, and max character limit SELECT column_name, data_type, character_maximum_length -- From the database&amp;#39;s schema FROM INFORMATION_SCHEMA.</description>
    </item>
    
    <item>
      <title>Sort Rows</title>
      <link>/postgresql/basics/sort_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/sort_rows/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Sort Rows By One Column -- Retrieve rows SELECT * FROM adventurers -- Order rows by age in ascending order ORDER BY age ASC nameageraceweapon Casimir Yardley14ElfMagic Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword</description>
    </item>
    
    <item>
      <title>Sort Rows In Groups</title>
      <link>/postgresql/basics/sort_rows_in_groups/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/sort_rows_in_groups/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Sort Rows By One Column -- Retrieve rows SELECT * FROM adventurers -- Order rows by age in ascending order ORDER BY age ASC nameageraceweapon Casimir Yardley14ElfMagic Fjoak Doom-Wife28HumanAxe Alooneric Cortte29ElfBow Piperel Ramsay35ElfSword</description>
    </item>
    
    <item>
      <title>Stack Tables</title>
      <link>/postgresql/merging_and_joining/stack_tables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/merging_and_joining/stack_tables/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Create Table Of Dwarves -- Create table called dwarves CREATE TABLE dwarves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, weapon) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Insert Rows Into Dwarf Table INSERT INTO dwarves (name, age, race, weapon) VALUES (&amp;#39;Kalog&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dranar&amp;#39;, 145, &amp;#39;Dwarf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Bratar&amp;#39;, 12, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Dragga&amp;#39;, 23, &amp;#39;Dwarf&amp;#39;, &amp;#39;Axe&amp;#39;) Stack Tables On Top Of Eachother -- All rows from elf table SELECT * FROM elves -- Stack on top of.</description>
    </item>
    
    <item>
      <title>Test If Rows Exist In Subquery</title>
      <link>/postgresql/basics/test_if_rows_exist_in_subquery/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/test_if_rows_exist_in_subquery/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Test If Rows Exist In Subquery -- Retrieve all the rows in adventurers SELECT * FROM adventurers -- Where rows exist in WHERE EXISTS -- A subquery that will ( -- Select all the names in adventurers  SELECT name FROM adventurers -- Where race is elf  WHERE race = &amp;#39;Elf&amp;#39; ) nameagerace Fjoak Doom-Wife28Human Alooneric Cortte29Elf Piperel Ramsay35Elf Casimir Yardley14Elf</description>
    </item>
    
    <item>
      <title>Update Rows Based On Another Table</title>
      <link>/postgresql/add_delete_change/update_rows_based_on_another_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/add_delete_change/update_rows_based_on_another_table/</guid>
      <description>Create Table Of Elves -- Create table called elves CREATE TABLE elves ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  alive varchar(255) ) Create Table Of Deaths -- Create table called deaths CREATE TABLE deaths ( -- string variable  name varchar(255) ) Insert Rows Into Elf Table INSERT INTO elves (name, age, race, alive) VALUES (&amp;#39;Dallar Woodfoot&amp;#39;, 25, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Cordin Garner&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Keat Knigh&amp;#39;, 24, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;, 124, &amp;#39;Elf&amp;#39;, &amp;#39;Yes&amp;#39;) Insert Rows Into Deaths Table INSERT INTO deaths (name) VALUES (&amp;#39;Keat Knigh&amp;#39;), (&amp;#39;Colbat Nalor&amp;#39;) View Elves Table -- Retrieve all rows from the view Elf SELECT * FROM elves nameageracealive Dallar Woodfoot25ElfYes Cordin Garner29ElfYes Keat Knigh24ElfYes Colbat Nalor124ElfYes</description>
    </item>
    
    <item>
      <title>Use Column Aliases With Where Clause</title>
      <link>/postgresql/basics/use_column_aliases_with_where_clause/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/use_column_aliases_with_where_clause/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Two Columns The trick is to wrap the column aliasing in paratheses.</description>
    </item>
    
    <item>
      <title>Value Matches Element Of A List</title>
      <link>/postgresql/basics/retrieve_rows_where_value_matches_element_of_list/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/retrieve_rows_where_value_matches_element_of_list/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) Retrieve Rows -- Retrieve all rows from table SELECT * FROM adventurers -- Where the value of weapon is in a list of weapons WHERE weapon IN (&amp;#39;Polearm&amp;#39;, &amp;#39;Whip&amp;#39;, &amp;#39;Staff&amp;#39;, &amp;#39;Dagger&amp;#39;, &amp;#39;Bow&amp;#39;) nameageraceweapon Alooneric Cortte29ElfBow</description>
    </item>
    
    <item>
      <title>View Size Of Table</title>
      <link>/postgresql/tables/view_size_of_table/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/tables/view_size_of_table/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Row -- Insert row into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) View Size Of Table Note: This is method only with in PostgreSQL databases</description>
    </item>
    
    <item>
      <title>View Unique Values</title>
      <link>/postgresql/basics/view_unique_values/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/postgresql/basics/view_unique_values/</guid>
      <description>Create Table -- Create table called adventurers CREATE TABLE adventurers ( -- string variable  name varchar(255), -- integer variable  age int, -- string variable  race varchar(255), -- string variable  weapon varchar(255) ) Insert Rows -- Insert into the table adventurers INSERT INTO adventurers (name, age, race, weapon) VALUES (&amp;#39;Fjoak Doom-Wife&amp;#39;, 28, &amp;#39;Human&amp;#39;, &amp;#39;Axe&amp;#39;), (&amp;#39;Alooneric Cortte&amp;#39;, 29, &amp;#39;Elf&amp;#39;, &amp;#39;Bow&amp;#39;), (&amp;#39;Piperel Ramsay&amp;#39;, 35, &amp;#39;Elf&amp;#39;, &amp;#39;Sword&amp;#39;), (&amp;#39;Casimir Yardley&amp;#39;, 14, &amp;#39;Elf&amp;#39;, &amp;#39;Magic&amp;#39;) View Unique Values In Race -- View unique values in the race column SELECT DISTINCT race FROM adventurers race Elf Human</description>
    </item>
    
  </channel>
</rss>