<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linuxes on Chris Albon</title>
    <link>/linux/index.xml</link>
    <description>Recent content in Linuxes on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Jul 2018 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add Columns To Text</title>
      <link>/linux/text/add_columns_to_text/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/add_columns_to_text/</guid>
      <description>Create A File With Comma Separated Text echo &amp;#34;chris, 34, male&amp;#34; &amp;gt;&amp;gt; staff.txt echo &amp;#34;sarah, 22, female&amp;#34; &amp;gt;&amp;gt; staff.txt echo &amp;#34;Bob, 59, male&amp;#34; &amp;gt;&amp;gt; staff.txt View File cat staff.txt chris, 34, male sarah, 22, female Bob, 59, male  Extract Text By Breaking Into Columns And Save To File cut the text in staff.txt that is separated by commas (-d &#39;,&#39;) into columns, then take the second (-f 2) column, and finally save to ages.</description>
    </item>
    
    <item>
      <title>Copy Files And Directories</title>
      <link>/linux/basics/copy_files_and_directories/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/copy_files_and_directories/</guid>
      <description>The cp command copy-pastes the file to a destination directory. The mv command moves a file (deleting it from the original directory).
Make File touch file.txt Make Directory mkdir example View Directory Contents Directory ls -l total 4 drwxrwxr-x 2 chris chris 4096 Jul 24 08:49 example -rw-rw-r-- 1 chris chris 0 Jul 24 08:49 file.txt  Copy File To Directory cp file.txt example Change To Directory cd example View Directory Contents Directory ls -l total 0 -rw-rw-r-- 1 chris chris 0 Jul 24 08:49 file.</description>
    </item>
    
    <item>
      <title>Count Unique Rows</title>
      <link>/linux/text/count_unique_rows/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/count_unique_rows/</guid>
      <description>Create Example File With List Of Names Notice that we have duplicated rows
echo &amp;#39;Luca Gartside&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Reule Smyth&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Spencer Smit&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Spencer Smit&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Spencer Smit&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Uli Pinetotem&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Uli Pinetotem&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Uli Pinetotem&amp;#39; &amp;gt;&amp;gt; adventurers.txt View File cat adventurers.txt Luca Gartside Reule Smyth Spencer Smit Spencer Smit Spencer Smit Uli Pinetotem Uli Pinetotem Uli Pinetotem  Get Unique Rows cat adventurers.</description>
    </item>
    
    <item>
      <title>Delete Files And Directories</title>
      <link>/linux/basics/delete_files_and_directories/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/delete_files_and_directories/</guid>
      <description>The rm (remove) command is used to delete files and folders in Linux.
Create Files touch sales.csv touch config.json touch README.md touch documentation.html touch sales.html Create Subdirectory mkdir sales_reports Create File In Subdirectory touch sales_reports/report.html View Current Directory ls -l total 4 -rw-rw-r-- 1 chris chris 0 Jul 24 17:01 config.json -rw-rw-r-- 1 chris chris 0 Jul 24 17:01 documentation.html -rw-rw-r-- 1 chris chris 0 Jul 24 17:01 README.md -rw-rw-r-- 1 chris chris 0 Jul 24 17:01 sales.</description>
    </item>
    
    <item>
      <title>Delete Files And Directories In Current Directory</title>
      <link>/linux/basics/delete_files_and_subdirectories_in_current_directory/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/delete_files_and_subdirectories_in_current_directory/</guid>
      <description>The rm (remove) command is used to delete files and folders in Linux.
Create Example Files touch devops.txt hr.txt marketing.txt operations.txt procurement.txt sales.txt Create Example Subdirectories mkdir devops sales marketing Show Directory Contents ls -l total 12 drwxrwxr-x 2 chris chris 4096 Jul 28 09:05 devops -rw-rw-r-- 1 chris chris 0 Jul 28 09:05 devops.txt -rw-rw-r-- 1 chris chris 0 Jul 28 09:05 hr.txt drwxrwxr-x 2 chris chris 4096 Jul 28 09:05 marketing -rw-rw-r-- 1 chris chris 0 Jul 28 09:05 marketing.</description>
    </item>
    
    <item>
      <title>Extract Text</title>
      <link>/linux/text/extract_text/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/extract_text/</guid>
      <description>cut is a good cool to extract text that follows some schema such as tab or comma delimited.
Create A File With Comma Separated Text echo &amp;#34;chris, 34, male&amp;#34; &amp;gt;&amp;gt; staff.txt echo &amp;#34;sarah, 22, female&amp;#34; &amp;gt;&amp;gt; staff.txt echo &amp;#34;Bob, 59, male&amp;#34; &amp;gt;&amp;gt; staff.txt View File cat staff.txt chris, 34, male sarah, 22, female Bob, 59, male  Extract Text By Breaking Into Columns cut the text in staff.txt that is separated by commas (-d &#39;,&#39;) into columns, then take the second (-f 2) column.</description>
    </item>
    
    <item>
      <title>Find And Replace</title>
      <link>/linux/text/find_and_replace/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/find_and_replace/</guid>
      <description> Create Example File With List Of Adventurers echo &amp;#39;Luca Gartside&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Reule Smyth&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Spencer Smit&amp;#39; &amp;gt;&amp;gt; adventurers.txt View Original File $ cat adventurers.txt Luca Gartside Reule Smyth Spencer Smit  Search And Replace Here we use the streaming edit (sed) command to replace Spencer Smit with Matthew Aldworth in the file adventurers.txt
$ sed &amp;#34;s/Spencer Smit/Matthew Aldworth/&amp;#34; adventurers.txt Luca Gartside Reule Smyth Matthew Aldworth  </description>
    </item>
    
    <item>
      <title>Move Files And Directories</title>
      <link>/linux/basics/move_files_and_directories/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/move_files_and_directories/</guid>
      <description>The mv command moves a file (deleting it from the original directory). The cp command copy-pastes the file to a destination directory.
Make File touch file.txt Make Directory mkdir example_folder View Directory Contents Directory ls -l total 8 drwxrwxr-x 2 chris chris 4096 Jul 24 13:23 example_folder -rw-rw-r-- 1 chris chris 0 Jul 24 13:22 file.txt  Move File To Directory mv file.txt example_folder View Directory Contents Directory ls -l total 8 drwxrwxr-x 2 chris chris 4096 Jul 24 13:23 example_folder  Change To Directory cd example_folder View Directory Contents Directory ls -l total 0 -rw-rw-r-- 1 chris chris 0 Jul 24 13:22 file.</description>
    </item>
    
    <item>
      <title>Rename File</title>
      <link>/linux/basics/rename_file/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/rename_file/</guid>
      <description> The mv (move) command is used to rename files To rename a file, &amp;ldquo;move&amp;rdquo; it from one filename to another.
Make File touch untitled.txt View Directory Contents Directory ls -l total 0 -rw-rw-r-- 1 chris chris 0 Jul 24 13:22 untitled.txt  Make File mv untitled.txt august_records.txt View Directory Contents Directory ls -l total 0 -rw-rw-r-- 1 chris chris 0 Jul 24 13:22 august_records.txt  mv Options:  -u Copy only files that don&amp;rsquo;t exist or are newer than files with the same names in the destination directory -v Show verbose description of copy -i Prompt if copy would override file  </description>
    </item>
    
    <item>
      <title>See Disk Drive Space</title>
      <link>/linux/basics/see_disk_drive_space/</link>
      <pubDate>Mon, 16 Jul 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/see_disk_drive_space/</guid>
      <description> To view the amount of used and free memory on a system, we can use the df command.
View Disk Drive Space df Filesystem 512-blocks Used Available Capacity iused ifree %iused Mounted on /dev/disk1s1 975221040 415404896 554253656 43% 2387799 9223372036852388008 0% / devfs 382 382 0 100% 662 0 100% /dev /dev/disk1s4 975221040 4194384 554253656 1% 2 9223372036854775805 0% /private/var/vm map -hosts 0 0 0 100% 0 0 100% /net map auto_home 0 0 0 100% 0 0 100% /home  </description>
    </item>
    
    <item>
      <title>Adding Line Numbers</title>
      <link>/linux/text/adding_line_numbers/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/adding_line_numbers/</guid>
      <description> Make File With Some Content echo &amp;#34;Jan&amp;#34; &amp;gt;&amp;gt; sales.txt; echo &amp;#34;Feb&amp;#34; &amp;gt;&amp;gt; sales.txt; echo &amp;#34;Mar&amp;#34; &amp;gt;&amp;gt; sales.txt Make File Contents cat sales.txt Jan Feb Mar  Make File Contents With Line Numbers cat -n sales.txt  1	Jan 2	Feb 3	Mar  </description>
    </item>
    
    <item>
      <title>Append Error To File</title>
      <link>/linux/inputs_and_outputs/append_error_to_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/append_error_to_file/</guid>
      <description>We can append the errors of a program to a file by using the 2&amp;gt;&amp;gt; operator.
Run Error Producing Code To See Error pwd -thiswillproduceerror -bash: pwd: -t: invalid option pwd: usage: pwd [-LP]  Create File touch errors.txt Append The Standard Error To File Note that we run pwd -thiswillproduceerror three times, each time appending the results to errors.txt.
pwd -thiswillproduceerror 2&amp;gt;&amp;gt; errors.txt; pwd -thiswillproduceerror 2&amp;gt;&amp;gt; errors.txt; pwd -thiswillproduceerror 2&amp;gt;&amp;gt; errors.</description>
    </item>
    
    <item>
      <title>Append File Contents To Another File</title>
      <link>/linux/inputs_and_outputs/append_file_contents_to_another_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/append_file_contents_to_another_file/</guid>
      <description> Create A File With A Record Of A Sale echo &amp;#39;Bob Jones bought an apple for $2&amp;#39; &amp;gt; sales_monday.txt Create A File With A Record Of A Sale echo &amp;#39;Sarah Miller bought an orange for $2&amp;#39; &amp;gt; sales_tuesday.txt Create An Empty File For All Sales touch sales.txt Append Contents Of Both Files To All Sales File cat sales_monday.txt sales_tuesday.txt &amp;gt;&amp;gt; sales.txt View Contents Of All Sales File cat sales.txt Bob Jones bought an apple for $2 Sarah Miller bought an orange for $2  </description>
    </item>
    
    <item>
      <title>Append Output To File</title>
      <link>/linux/inputs_and_outputs/append_outputs_to_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/append_outputs_to_file/</guid>
      <description>We can append the outputs of a program to a file by using the &amp;gt;&amp;gt; operator.
Run date To See Standard Output Note +&amp;quot;%T.%N&amp;quot; gives the current time with nanseconds
date +&amp;#34;%T.%N&amp;#34; 21:19:26.291589981  Create File touch records.txt Append The Standard Output To File Note that we run date +%s%N four times, each time appending the results to records.txt.
date +&amp;#34;%T.%N&amp;#34; &amp;gt;&amp;gt; records.txt; date +&amp;#34;%T.%N&amp;#34; &amp;gt;&amp;gt; records.txt; date +&amp;#34;%T.%N&amp;#34; &amp;gt;&amp;gt; records.</description>
    </item>
    
    <item>
      <title>Append Outputs And Errors To File</title>
      <link>/linux/inputs_and_outputs/append_output_and_errors_to_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/append_output_and_errors_to_file/</guid>
      <description>To write both the output and the errors of a program to a file, we can use the &amp;amp;&amp;gt;&amp;gt; on newer versions of bash to append (not write over) either standard outputs or standard errors to a file.
Create Code That Will Produce An Output pwd /home/chris/example_directory  Create Code That Will Produce An Error pwd -thisisafakeargumenttoproduceerror -bash: pwd: -t: invalid option pwd: usage: pwd [-LP]  Create File To Hold Output And Errors touch log.</description>
    </item>
    
    <item>
      <title>Archive And Unarchive Files</title>
      <link>/linux/basics/archive_and_unarchive_files/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/archive_and_unarchive_files/</guid>
      <description>Make Directory mkdir regiment_data Make Files In Directory touch regiment_data/battles.txt regiment_data/regiment.txt Compress Directory Here we create (c) an archive file from the directory regiment_data called file (f) called regiment.tar.
tar cf regiment.tar regiment_data View Contents Of Directory ls -l total 24 drwxrwxr-x 2 chris chris 4096 Jul 31 13:23 regiment_data -rw-rw-r-- 1 chris chris 10240 Jul 31 13:25 regiment.tar  Uncompress Directory Here we unarchive (x) the archived file (f) called regiment.</description>
    </item>
    
    <item>
      <title>Chain Multiple Commands</title>
      <link>/linux/inputs_and_outputs/chain_multiple_commands/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/chain_multiple_commands/</guid>
      <description>Most commands take in some input and return some output. In Linux, we can use this feature to chain together multiple commands, each one taking the standard output of the previous command as its standard input. We can do this using the pipeline operator, |.
Create Example Files touch sales.txt marketing.txt operations.txt hr.txt procurement.txt devops.txt Create A Pipeline ls and sort are two commands. In this example we pipe the standard output of ls into the standard input of sort and then see sort&amp;rsquo;s standard output.</description>
    </item>
    
    <item>
      <title>Change Permissions</title>
      <link>/linux/basics/change_permissions/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/change_permissions/</guid>
      <description>To change the permissions of a file or directory we use the chmod command. chmod takes three digits, each one representing the permissions for the user, group, and everyone. Thus, 741 would mean:
 The user can read, write, and execute (7) The group can read only (4) Everyone can execute (1)  Here is a handy list translating the octal numbering system to permissions:
 0 - no permission 1 - execute 2 - write 3 - write and execute 4 - read 5 - read and execute 6 - read and write 7 - read, write, and execute  Create File touch company_data.</description>
    </item>
    
    <item>
      <title>Changing Directories</title>
      <link>/linux/basics/changing_directories/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/changing_directories/</guid>
      <description>We can navigate Linux systems in the command line using the cd command.
View Current Working Directory pwd /home/chris  List Subdirectories Note -d */ is a hacky means to list only directories (not files) in a directory.
ls -d */ anaconda3/ automatic_backups/ Desktop/ Documents/ Downloads/ Music/ nvvp_workspace/ Pictures/ Public/ Templates/ tensorflow/ Videos/  Change To A Directory Using An Absolute Path cd /home/chris/anaconda3 View Current Working Directory pwd /home/chris/anaconda3  Go Up One Directory cd .</description>
    </item>
    
    <item>
      <title>Check Current Date And Time</title>
      <link>/linux/basics/check_current_date_and_time/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/check_current_date_and_time/</guid>
      <description> If we want to see the system&amp;rsquo;s current date and time, we can use the date command.
Check System&amp;rsquo;s Current Time date Tue Jul 17 10:07:27 PDT 2018  Check System&amp;rsquo;s Current Time In UTC Time date -u Tue Jul 17 17:26:25 UTC 2018  </description>
    </item>
    
    <item>
      <title>Comparing Text Files</title>
      <link>/linux/text/comparing_text_files/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/comparing_text_files/</guid>
      <description>The diff command in Linux will show us the where the lines in text files differ and ignore lines that are the same.
Create Text File 1 echo &amp;#34;Khaydarbi Melikov is a foot soldier.&amp;#34; &amp;gt;&amp;gt; regiment_version1.txt echo &amp;#34;Khaydarbi Melikov is a member of the the Maroon Martyrs regiment&amp;#34; &amp;gt;&amp;gt; regiment_version1.txt Create Text File 2 echo &amp;#34;Khaydarbi Melikov is a foot soldier.&amp;#34; &amp;gt;&amp;gt; regiment_version2.txt echo &amp;#34;Khaydarbi Melikov is a member of the Reserve regiment&amp;#34; &amp;gt;&amp;gt; regiment_version2.</description>
    </item>
    
    <item>
      <title>Concatenate Multiple Files</title>
      <link>/linux/inputs_and_outputs/concatenate_multiple_files/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/concatenate_multiple_files/</guid>
      <description>Often large collections of data will be broken into multiple smaller files. The command line makes it easy to concatenate the contents of these files into a single file for analysis.
Create Multiple Files In this example each file contains a single record of a sale, however in the real world each file can contain hundreds or even millions of records.
echo &amp;#39;Alan Jones&amp;#39;, &amp;#39;$50&amp;#39; &amp;gt; sales_records_1.csv echo &amp;#39;Stephanie Lawson&amp;#39;, &amp;#39;$20&amp;#39; &amp;gt; sales_records_2.</description>
    </item>
    
    <item>
      <title>Create Command</title>
      <link>/linux/basics/create_command/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/create_command/</guid>
      <description>Check If Command&amp;rsquo;s Name Is Taken type make_example_directory -bash: type: make_example_directory: not found  Okay good!
Create Custom Command Let us create a custom command that creates a bunch of files and subdirectories in a directory. I&amp;rsquo;ve used this command a few times for tutorial to simulate a real project. We will separate each command using ; so they can all be on one line. Specifically, the commands we will run are:</description>
    </item>
    
    <item>
      <title>Create Directory</title>
      <link>/linux/basics/create_directory/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/create_directory/</guid>
      <description>When we want to create a directory in the Linux command line, we can use the mkdir (make directory) command.
View Directory Contents ls -l total 60 drwxrwxr-x 20 chris chris 4096 Oct 11 2017 anaconda3 drwxrwxr-x 2 chris chris 4096 Oct 13 2017 automatic_backups drwxr-xr-x 3 chris chris 4096 Oct 21 2017 Desktop drwxr-xr-x 2 chris chris 4096 Oct 10 2017 Documents drwxr-xr-x 2 chris chris 4096 Jul 19 10:47 Downloads -rw-r--r-- 1 chris chris 8980 Oct 10 2017 examples.</description>
    </item>
    
    <item>
      <title>Create Environment Variable</title>
      <link>/linux/environment/create_environment_variables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/environment/create_environment_variables/</guid>
      <description>The best way to store login credentials and API tokens/secrets is by creating environment variables for them. This means they are variables in the Linux system and thus not present in any code that is shared on GitHub.
There are many ways to create environment variables, but my personal preference is to add them to the .bashrc file in our home directory. .bashrc does a lot of things, but it is a standard place to put customizations to our system &amp;ndash; for example, custom variables.</description>
    </item>
    
    <item>
      <title>Create File</title>
      <link>/linux/basics/create_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/create_file/</guid>
      <description>There are a number of ways to create files in the Linux command line.
View Directory Contents ls -l total 0  Create An Empty File touch empty_file.txt Create Another Empty File &amp;gt; another_empty_file.txt Create File With Some Content echo &amp;#39;This is the contents to the file&amp;#39; &amp;gt; hello_world.txt Quickly Create A File With Some Contents cat &amp;gt; hello_world.txt Then type the contents of the file and press ctrl-d</description>
    </item>
    
    <item>
      <title>Create Sequential List Of Files And Directories</title>
      <link>/linux/basics/create_sequential_list_of_files_or_directories/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/create_sequential_list_of_files_or_directories/</guid>
      <description>Create Sequential List Of Files touch script_version_{1..5}.py Create Sequential List Of Directories mkdir data_{2015..2018} View Files And Directories ls -l total 16 drwxrwxr-x 2 chris chris 4096 Jul 29 11:17 data_2015 drwxrwxr-x 2 chris chris 4096 Jul 29 11:17 data_2016 drwxrwxr-x 2 chris chris 4096 Jul 29 11:17 data_2017 drwxrwxr-x 2 chris chris 4096 Jul 29 11:17 data_2018 -rw-rw-r-- 1 chris chris 0 Jul 29 11:18 script_version_1.py -rw-rw-r-- 1 chris chris 0 Jul 29 11:18 script_version_2.</description>
    </item>
    
    <item>
      <title>Create Symbolic Links</title>
      <link>/linux/basics/create_symbolic_links/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/create_symbolic_links/</guid>
      <description>In Linux, we can use ln to create a link between files. A common use case is shown below, where we have a symbolic link from the current configuration file config_settings_v293.txt and a link config_setting.txt. In our code, we can refer config_settings.txt as if we were refering to config_settings_v293.txt. However, when a new version of the configuration settings is released, config_settings_v294.txt, we can swap the symbolic link from config_settings_v293.txt to config_settings_v294.</description>
    </item>
    
    <item>
      <title>Exit Terminal Session</title>
      <link>/linux/basics/exit_terminal_session/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/exit_terminal_session/</guid>
      <description> To close a terminal session we can use the exit command.
Exit Terminal exit logout Connection to 10.0.1.24 closed.  </description>
    </item>
    
    <item>
      <title>Find Directories</title>
      <link>/linux/search/find_directories/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/find_directories/</guid>
      <description>Make Files And Directories touch sales.txt, marketing.txt, data_science.csv, product.html; mkdir sales marketing View Files And Directories ls -l total 8 -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 data_science.csv, drwxrwxr-x 2 chris chris 4096 Jul 29 21:21 marketing -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 marketing.txt, -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 product.html drwxrwxr-x 2 chris chris 4096 Jul 29 21:21 sales -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 sales.</description>
    </item>
    
    <item>
      <title>Find Files</title>
      <link>/linux/search/find_files/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/find_files/</guid>
      <description>Make Files And Directories touch sales.txt, marketing.txt, data_science.csv, product.html; mkdir sales marketing View Files And Directories ls -l total 8 -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 data_science.csv, drwxrwxr-x 2 chris chris 4096 Jul 29 21:21 marketing -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 marketing.txt, -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 product.html drwxrwxr-x 2 chris chris 4096 Jul 29 21:21 sales -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 sales.</description>
    </item>
    
    <item>
      <title>Find Files Based On Multiple Conditions</title>
      <link>/linux/search/find_files_based_on_multiple_conditions/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/find_files_based_on_multiple_conditions/</guid>
      <description>Make Files And Directories touch sales.txt, marketing.txt, data_science.csv, product.html; mkdir sales marketing View Files And Directories ls -l total 8 -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 data_science.csv, drwxrwxr-x 2 chris chris 4096 Jul 31 09:02 marketing -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 marketing.txt, -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 product.html drwxrwxr-x 2 chris chris 4096 Jul 31 09:02 sales -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 sales.</description>
    </item>
    
    <item>
      <title>Find Files By Filename</title>
      <link>/linux/search/find_files_by_filename/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/find_files_by_filename/</guid>
      <description>Make Files And Directories touch sales.txt, marketing.txt, data_science.csv, product.html; mkdir sales marketing View Files And Directories ls -l total 8 -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 data_science.csv, drwxrwxr-x 2 chris chris 4096 Jul 31 09:02 marketing -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 marketing.txt, -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 product.html drwxrwxr-x 2 chris chris 4096 Jul 31 09:02 sales -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 sales.</description>
    </item>
    
    <item>
      <title>Find Files By Size</title>
      <link>/linux/search/find_files_by_size/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/find_files_by_size/</guid>
      <description>Make Files And Directories touch sales.txt, marketing.txt, data_science.csv, product.html; mkdir sales marketing View Files And Directories ls -l total 8 -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 data_science.csv, drwxrwxr-x 2 chris chris 4096 Jul 31 09:02 marketing -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 marketing.txt, -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 product.html drwxrwxr-x 2 chris chris 4096 Jul 31 09:02 sales -rw-rw-r-- 1 chris chris 0 Jul 31 09:02 sales.</description>
    </item>
    
    <item>
      <title>Find Program&#39;s Location</title>
      <link>/linux/search/find_programs_location/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/find_programs_location/</guid>
      <description>Use the which command to find the location of a program on the system. This is particularly useful when you are trying to figure out which version of Python is currently set in the environment.
Find Program&amp;rsquo;s Location which python3 /home/chris/anaconda3/bin/python3  Just to prove that this is true, we can change directory, cd, to that location and find the file itself.
Go To Program&amp;rsquo;s Location cd /home/chris/anaconda3/bin/ List Contents Of Directory The python* selection means we are only listing files starting with python.</description>
    </item>
    
    <item>
      <title>Find Symbolic Links</title>
      <link>/linux/search/find_symbolic_links/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/find_symbolic_links/</guid>
      <description>Make Files, Directories, And A Symbolic Link touch sales.txt, marketing.txt, data_science.csv, product.html; mkdir sales marketing ln -nsf sales.txt marketing.txt View Files And Directories, And Symbolic Link ls -l total 8 -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 data_science.csv, drwxrwxr-x 2 chris chris 4096 Jul 29 21:21 marketing lrwxrwxrwx 1 chris chris 9 Jul 29 21:58 marketing.txt -&amp;gt; sales.txt -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 marketing.txt, -rw-rw-r-- 1 chris chris 0 Jul 29 21:21 product.</description>
    </item>
    
    <item>
      <title>For Loops</title>
      <link>/linux/flow_control/for_loops/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/flow_control/for_loops/</guid>
      <description>Create For Loop In plain English: For each name in Lucien, Maurice, Renald, Johnson, and Alfred, print the name.
for name in Lucien Maurice Renald Johnson Alfred; do echo $name done Lucien Maurice Renald Johnson Alfred  Create C Style For Loop Alternatively, we can use a style of for loop seen in the programming language C.
In plain English: Starting with i being 0, (i=0), as long as i is less than 10 (i&amp;lt;10), keep returning i, adding one to i (i=i+1) at the end of each loop.</description>
    </item>
    
    <item>
      <title>Get Help With A Command</title>
      <link>/linux/basics/get_help_with_a_command/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/get_help_with_a_command/</guid>
      <description>The --help argument is a common choice for quickly learning about a command. Particularly useful, --help shows the arguments for that particular command so we don&amp;rsquo;t have to look them up online.
Another option is the whatis command, which prints a one-line description of the command.
Quickly Describe A Command whatis mkdir mkdir (1) - make directories mkdir (2) - create a directory  Note that in this case there are two mkdir commands with slightly different descriptions, but you can ignore that.</description>
    </item>
    
    <item>
      <title>Get Information On A File</title>
      <link>/linux/basics/get_information_on_a_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/get_information_on_a_file/</guid>
      <description> Make File touch sales.txt Get Information On File stat sales.txt  File: sales.txt Size: 0 Blocks: 0 IO Block: 4096 regular empty file Device: 10302h/66306d	Inode: 9437404 Links: 1 Access: (0664/-rw-rw-r--) Uid: ( 1000/ chris) Gid: ( 1000/ chris) Access: 2018-07-31 13:07:05.244384050 -0700 Modify: 2018-07-31 13:07:05.244384050 -0700 Change: 2018-07-31 13:07:05.244384050 -0700 Birth: -  </description>
    </item>
    
    <item>
      <title>If Else For Integers</title>
      <link>/linux/flow_control/if_else_for_integers/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/flow_control/if_else_for_integers/</guid>
      <description> Create Variable age=23 Create If Else Statement The code below in plain English: If the variable age is greater than 17, then return &amp;ldquo;Adult&amp;rdquo; otherwise return &amp;ldquo;Child&amp;rdquo;.
if (( &amp;#34;$age&amp;#34; &amp;gt; 17 )); then echo &amp;#34;Adult&amp;#34; else echo &amp;#34;Child&amp;#34; fi Adult  </description>
    </item>
    
    <item>
      <title>If Else For Strings</title>
      <link>/linux/flow_control/if_else_for_strings/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/flow_control/if_else_for_strings/</guid>
      <description> While you can often use [[ ]] for integers, (( )) is specifically designed to work with integers and provides a lot more functionality.
Create Variable name=&amp;#34;Ralph Holmes&amp;#34; Create If Else Statement if [[ &amp;#34;$name&amp;#34; == &amp;#34;Ralph Holmes&amp;#34; ]]; then echo &amp;#34;It is Ralph.&amp;#34; else echo &amp;#34;It is not Ralph&amp;#34; fi It is Ralph.  </description>
    </item>
    
    <item>
      <title>If Else With Multiple Conditions</title>
      <link>/linux/flow_control/if_else_with_multiple_conditions/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/flow_control/if_else_with_multiple_conditions/</guid>
      <description>Create Variable age=23 Check Greater Than 17 And Less Than 30 To combine conditional tests with &amp;ldquo;and&amp;rdquo; use &amp;amp;&amp;amp;.
if (( &amp;#34;$age&amp;#34; &amp;gt; 17 &amp;amp;&amp;amp; &amp;#34;$age&amp;#34; &amp;lt; 30 )); then echo &amp;#34;Greater than 17 and less than 30&amp;#34; else echo &amp;#34;Not greater than 17 and less than 30&amp;#34; fi Greater than 17 and less than 30  Check Greater Than 17 Or Less Than 20 To combine conditional tests with &amp;ldquo;or&amp;rdquo; use ||.</description>
    </item>
    
    <item>
      <title>Join And Sort Text</title>
      <link>/linux/text/join_and_sort_text/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/join_and_sort_text/</guid>
      <description> Make Three Files, Each With List Of Fruit echo &amp;#34;Apple&amp;#34; &amp;gt;&amp;gt; fruit_1.txt; echo &amp;#34;Banana&amp;#34; &amp;gt;&amp;gt; fruit_1.txt; echo &amp;#34;Orange&amp;#34; &amp;gt;&amp;gt; fruit_1.txt echo &amp;#34;Tangerine&amp;#34; &amp;gt;&amp;gt; fruit_2.txt; echo &amp;#34;Grape&amp;#34; &amp;gt;&amp;gt; fruit_2.txt; echo &amp;#34;Nectarine&amp;#34; &amp;gt;&amp;gt; fruit_2.txt echo &amp;#34;Strawberry&amp;#34; &amp;gt;&amp;gt; fruit_3.txt; echo &amp;#34;Blueberry&amp;#34; &amp;gt;&amp;gt; fruit_3.txt; echo &amp;#34;Mango&amp;#34; &amp;gt;&amp;gt; fruit_3.txt Merge And Sort Into New File sort fruit_1.txt fruit_2.txt fruit_3.txt &amp;gt; fruit.txt View Contents Of New File cat fruit.txt Apple Banana Blueberry Grape Mango Nectarine Orange Strawberry Tangerine  </description>
    </item>
    
    <item>
      <title>Join Columns</title>
      <link>/linux/text/join_columns/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/join_columns/</guid>
      <description>The Linux command join operates similar to the join command in SQL, merging two sets of data along a common key.
Make File With Soldier Names And Soldier Age Data echo &amp;#34;Steve Case, 23&amp;#34; &amp;gt;&amp;gt; soldiers.txt echo &amp;#34;Mary Mills, 35&amp;#34; &amp;gt;&amp;gt; soldiers.txt echo &amp;#34;Bob Dosjki, 22&amp;#34; &amp;gt;&amp;gt; soldiers.txt echo &amp;#34;Jack Doi, 45&amp;#34; &amp;gt;&amp;gt; soldiers.txt echo &amp;#34;Poe Domi, 23&amp;#34; &amp;gt;&amp;gt; soldiers.txt Make File With Soldier Names And Regiment Names echo &amp;#34;Steve Case, The Hell Hosts&amp;#34; &amp;gt;&amp;gt; regiments.</description>
    </item>
    
    <item>
      <title>List Avaliable Commands</title>
      <link>/linux/basics/list_avaliable_commands/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/list_avaliable_commands/</guid>
      <description>We can see all avaliable commands for a system by listing the contents of the bin directory using ls /bin
Show All Avaliable Commands ls /bin bash cp fgrep loadkeys netcat open setupcon unicode_start bunzip2 cpio findmnt login netstat openvt sh vdir busybox dash fuser loginctl nisdomainname pidof sh.distrib which bzcat date fusermount lowntfs-3g ntfs-3g ping sleep whiptail bzcmp dbus-cleanup-sockets grep ls ntfs-3g.probe ping6 ss ypdomainname bzdiff dbus-daemon gunzip lsblk ntfs-3g.</description>
    </item>
    
    <item>
      <title>List Processes</title>
      <link>/linux/processes/list_processes/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/processes/list_processes/</guid>
      <description>List Processes We are often interested in the STAT column: - R - process is running - S - process is sleeping - D - process is in uninterruptible sleep - T - process is terminated - D - process is dead - &amp;lt; - process is high priority - N - process is low priority
Note that normally the list of processes is very long, so for the sake of this tutorial we included | head which will show only the first few processes.</description>
    </item>
    
    <item>
      <title>List The Contents Of A Directory</title>
      <link>/linux/basics/list_contents_of_a_directory/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/list_contents_of_a_directory/</guid>
      <description>ls is one of the most useful commands when using the Linux command line. ls lists the contents of the directory.
List Contents Of Directory ls bin compiler_compat conda-meta doc etc include lib libexec LICENSE.txt mkspecs phrasebooks pkgs plugins qml share ssl translations var x86_64-conda_cos6-linux-gnu  List Contents Of Directory In Detail Note that the first column contains the file&amp;rsquo;s permission setting, which are structured as:
 Character 1: Type Of File (d means directory) Characters 2-4: Access Rights For File&amp;rsquo;s Owner Characters 5-7: Access Rights For File&amp;rsquo;s Group Characters 7-9: Access Rights For Everyone  ls -l total 188 drwxrwxr-x 2 chris chris 12288 Oct 11 2017 bin drwxrwxr-x 2 chris chris 4096 Oct 11 2017 compiler_compat drwxrwxr-x 2 chris chris 20480 Oct 11 2017 conda-meta drwxrwxr-x 3 chris chris 4096 Oct 11 2017 doc drwxrwxr-x 7 chris chris 4096 Oct 11 2017 etc drwxrwxr-x 31 chris chris 12288 Oct 11 2017 include drwxrwxr-x 22 chris chris 36864 Oct 11 2017 lib drwxrwxr-x 4 chris chris 4096 Oct 11 2017 libexec -rw-r--r-- 1 chris chris 5350 Sep 24 2017 LICENSE.</description>
    </item>
    
    <item>
      <title>Monitor Processes</title>
      <link>/linux/processes/monitor_processes/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/processes/monitor_processes/</guid>
      <description>Monitor Processes top shows a live list of all processes with information about them. One piece of information that is often useful is us, which shows what percentage of the CPU is being used by user processes (e.g. a script training a neural network). Similarly, id tells us the percentage of the CPI that is idle.
top top - 13:34:55 up 5:51, 2 users, load average: 0.13, 0.10, 0.02 Tasks: 332 total, 1 running, 230 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.</description>
    </item>
    
    <item>
      <title>Multiple Commands On One Line</title>
      <link>/linux/basics/multiple_commands_on_one_line/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/multiple_commands_on_one_line/</guid>
      <description> You can have multiple commands in one line as long as they are separated with the ; symbol.
Note that this is not a very widely used feature &amp;ndash; but it is seen.
Make A Subdirectory, Make A File, View Directory Contents mkdir example_directory; touch example_file.txt; ls -l total 4 drwxrwxr-x 2 chris chris 4096 Jul 25 16:31 example_directory -rw-rw-r-- 1 chris chris 0 Jul 25 16:31 example_file.txt  </description>
    </item>
    
    <item>
      <title>Ping Website</title>
      <link>/linux/basics/ping_website/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/ping_website/</guid>
      <description>Linux makes it easy to ping a website to test connectivity and/or whether the website is live. Once executed, ping will ping the website until it is stopped by pressing ctrl-C.
Ping Google.com ping google.com PING google.com (172.217.4.174) 56(84) bytes of data. 64 bytes from lax28s01-in-f174.1e100.net (172.217.4.174): icmp_seq=1 ttl=56 time=41.8 ms 64 bytes from lax28s01-in-f174.1e100.net (172.217.4.174): icmp_seq=2 ttl=56 time=35.7 ms 64 bytes from lax28s01-in-f174.1e100.net (172.217.4.174): icmp_seq=3 ttl=56 time=43.6 ms 64 bytes from lax28s01-in-f174.</description>
    </item>
    
    <item>
      <title>Quickly View File Contents</title>
      <link>/linux/text/quickly_view_file_contents/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/text/quickly_view_file_contents/</guid>
      <description>Often we want to quickly take a peek at a file&amp;rsquo;s contents without opening the file in an editor program. The cat command makes this easy.
Create A Text File With Some Contents echo &amp;#39;Here is some text content inside of the file.&amp;#39; &amp;gt; example_file.txt View Contents Of Text File cat example_file.txt Here is some text content inside of the file.  View Contents Of Text File With Line Numbers cat -n example_file.</description>
    </item>
    
    <item>
      <title>Save Output To File In Middle Of Command Chain</title>
      <link>/linux/inputs_and_outputs/save_output_to_file_in_middle_of_command_chain/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/save_output_to_file_in_middle_of_command_chain/</guid>
      <description>The tee command creates a T-junction in a command pipeline, both saving the standard output of the previous command to a file and passing the standard output onward down the pipeline. It is often useful when we want to see the data at intermediate steps in a command pipeline without interrupting it.
Create Example File With List Of File Names echo &amp;#39;data_science.txt&amp;#39; &amp;gt;&amp;gt; files.txt echo &amp;#39;data_science.html&amp;#39; &amp;gt;&amp;gt; files.txt echo &amp;#39;data_science.</description>
    </item>
    
    <item>
      <title>Search Contents Of All Files Of Certain Type</title>
      <link>/linux/search/search_contents_of_all_files_of_certain_type/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/search_contents_of_all_files_of_certain_type/</guid>
      <description>Note: In this tutorial we do not generate the files we will search but rather search the contents of this site&amp;rsquo;s directory structure.
Recursively Search All Markdown For The Word &amp;ldquo;berry&amp;rdquo;  grep search command -n to display line number of matched pattern -i to make search case insensitive -r to search recursively --color to color the matches so they stand out --include=&#39;*.md&#39; to search only in files ending in .</description>
    </item>
    
    <item>
      <title>Search Filenames</title>
      <link>/linux/search/search_file_names/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/search_file_names/</guid>
      <description>Often we want to find a file on our system. The locate command offers a quick method for searching for all files in the system containing a string. In our example, we look for all files with bashrc in the name.
Search Filenames In System locate bashrc /etc/bash.bashrc /etc/skel/.bashrc /home/chris/.bashrc /home/chris/.bashrc-anaconda3.bak /home/chris/anaconda3/lib/python3.6/site-packages/pexpect/bashrc.sh /home/chris/anaconda3/pkgs/pexpect-4.2.1-py36h3b9d41b_0/lib/python3.6/site-packages/pexpect/bashrc.sh /usr/share/base-files/dot.bashrc /usr/share/doc/adduser/examples/adduser.local.conf.examples/bash.bashrc /usr/share/doc/adduser/examples/adduser.local.conf.examples/skel/dot.bashrc  Note that locate might not find recently created files. This is because the database of filenames locate uses is only generated periodically.</description>
    </item>
    
    <item>
      <title>Search The Contents Of A File</title>
      <link>/linux/search/search_contents_of_a_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/search/search_contents_of_a_file/</guid>
      <description> Make File With Some Content echo &amp;#34;There were 24 sales in March.&amp;#34; &amp;gt;&amp;gt; sales.txt echo &amp;#34;We have 90 employees.&amp;#34; &amp;gt;&amp;gt; employees.txt Search The File For Some String grep March sales.txt There were 24 sales in March.  Search The File For Some String, Return With Line Numbers grep -n March sales.txt 1:There were 24 sales in March.  Get Filenames That Match Search grep -l March sales.txt sales.txt  </description>
    </item>
    
    <item>
      <title>See Free Memory</title>
      <link>/linux/basics/see_free_memory/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/see_free_memory/</guid>
      <description>The best way to check the amount of free memory in a Linux system is to use the free command. This command lists the amount of free memory.
Check System&amp;rsquo;s Free Memory free  total used free shared buff/cache available Mem: 65908812 244948 64239140 206180 1424724 64672848 Swap: 50226172 0 50226172  Check System&amp;rsquo;s Free Memory In A More Human Readable Format free -h  total used free shared buff/cache available Mem: 62G 239M 61G 209M 1.</description>
    </item>
    
    <item>
      <title>See Who Is Logged Into A System</title>
      <link>/linux/basics/see_who_is_logged_in/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/see_who_is_logged_in/</guid>
      <description>We can check who is logged into the system using the who command.
Check Logged In Users who ubuntu pts/0 2018-07-17 09:55 (ip68-3-23-73.ph.ph.box.net)  This shows one user is logged into the system with the username ubuntu.</description>
    </item>
    
    <item>
      <title>Select Files Based On Filename</title>
      <link>/linux/basics/select_files_based_on_filename/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/select_files_based_on_filename/</guid>
      <description>Often we want to select files based on their file name or file extension. In Linux, we can use wildcard characters to accomplish this.
Create Some Files touch hello_world.txt touch HELLO_world.txt touch HELLO_world.md touch hello_america.txt touch goodbye_america.txt touch goodbye_america_2.txt View Directory Contents ls goodbye_america_2.txt goodbye_america.txt hello_america.txt hello_world.txt HELLO_world.txt  Select Files Containing &amp;ldquo;Hello&amp;rdquo; ls hello* hello_america.txt hello_world.txt  Select Files Starting With &amp;ldquo;g&amp;rdquo; or &amp;ldquo;i&amp;rdquo; ls [gi]* goodbye_america_2.txt goodbye_america.txt  Select All Markdown Files ls *.</description>
    </item>
    
    <item>
      <title>Silence Errors</title>
      <link>/linux/inputs_and_outputs/silence_errors/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/silence_errors/</guid>
      <description>The most common method of silencing an error in Linux is to redirect than error to /dev/null which is like the trash bucket of the system. We can do that by including 2&amp;gt; /dev/null to the end of a command.
Create Code That Will Produce Error ls a_fake_directory/ ls: a_fake_directory/: No such file or directory  Silence Error Notice that we aren&amp;rsquo;t silencing so much as redirecting into /dev/null. This is like sending the error into a black hole.</description>
    </item>
    
    <item>
      <title>Sort Rows</title>
      <link>/linux/inputs_and_outputs/sort_rows/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/sort_rows/</guid>
      <description>The sort command reorganizes lines in a text file or standard output (technically the same thing) so they are arranged numerically and alphabetically.
Create Example File With List Of Names echo &amp;#39;Luca Gartside&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Reule Smyth&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Spencer Smit&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Crurnirk Steelflow&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Uli Pinetotem&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Lai Zhi Lightdream&amp;#39; &amp;gt;&amp;gt; adventurers.txt View File cat adventurers.txt Luca Gartside Reule Smyth Spencer Smit Crurnirk Steelflow Uli Pinetotem Lai Zhi Lightdream  Sort List Of Names And Write To New File sort adventurers.</description>
    </item>
    
    <item>
      <title>Synchronize Files And Directories</title>
      <link>/linux/basics/synchronize_files_and_directories/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/synchronize_files_and_directories/</guid>
      <description>rsync is a very handy tool for syncing the files and folders in two directories. rsync only copies files that have changed since the time they were sync&amp;rsquo;d.
Make Two Directories mkdir origin destination Add Files In Origin Directory touch origin/file.txt View Origin Directory Contents ls -l origin total 0 -rw-rw-r-- 1 chris chris 0 Jul 31 20:04 file.txt  View Destination Directory Contents ls -l destination total 0  Sync Origin Directory To Destination Directory In this code we sync (rsync) all the files and subdirectories (-a) in origin to destination while printing out details of the process (v), deleting (--delete) any files in destination that no longer exist in origin.</description>
    </item>
    
    <item>
      <title>Track Route Of Network Traffic</title>
      <link>/linux/basics/track_route_of_network_traffic/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/track_route_of_network_traffic/</guid>
      <description>Trace Route From Local Computer To Website traceroute shows the path of our network traffic across the internet. Press ctrl-C to cancel.
traceroute google.com traceroute to google.com (216.58.219.14), 30 hops max, 60 byte packets 1 10.0.1.1 (10.0.1.1) 0.920 ms 1.742 ms 2.294 ms 2 10.33.236.1 (10.33.236.1) 10.222 ms 14.140 ms 14.381 ms 3 72.215.229.12 (72.215.229.12) 18.079 ms 18.182 ms 18.423 ms 4 bellcorc02-te-0-0-0-5.ph.ph.cox.net (70.169.72.188) 20.697 ms 20.938 ms 24.585 ms 5 68.</description>
    </item>
    
    <item>
      <title>View A File&#39;s Type</title>
      <link>/linux/basics/view_file_type/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/view_file_type/</guid>
      <description> The file command allows us to view a file&amp;rsquo;s type.
Make File echo &amp;#34;This is some text.&amp;#34; &amp;gt; sales.txt View A File&amp;rsquo;s Type file LICENSE.txt sales.txt: ASCII text  </description>
    </item>
    
    <item>
      <title>View A Text File&#39;s Contents</title>
      <link>/linux/basics/view_file_contents/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/view_file_contents/</guid>
      <description>Often we want to look at the contents of some code or configuration file. In Linux, we can do this using the less command.
Create A Text File With Some Contents echo &amp;#34;Hello World&amp;#34; &amp;gt; hello_world.txt View Contents Of File To view the contents of a file we can open it in the nano, a common text editor in Linux systems.
nano hello_world.txt If we want to leave a file we can press ctrl-x.</description>
    </item>
    
    <item>
      <title>View Aliases</title>
      <link>/linux/environment/view_aliases/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/environment/view_aliases/</guid>
      <description>We can see all the aliases in the environment using the alias command. This can be useful if we have setup some aliases operations we do frequently (like cd into a particular project&amp;rsquo;s folder) and we want to remember what they are.
aliases alias alert=&#39;notify-send --urgency=low -i &amp;quot;$([ $? = 0 ] &amp;amp;&amp;amp; echo terminal || echo error)&amp;quot; &amp;quot;$(history|tail -n1|sed -e &#39;\&#39;&#39;s/^\s*[0-9]\+\s*//;s/[;&amp;amp;|]\s*alert$//&#39;\&#39;&#39;)&amp;quot;&#39; alias egrep=&#39;egrep --color=auto&#39; alias fgrep=&#39;fgrep --color=auto&#39; alias grep=&#39;grep --color=auto&#39; alias l=&#39;ls -CF&#39; alias la=&#39;ls -A&#39; alias lcl=&#39;ls -l&#39; alias ll=&#39;ls -alF&#39; alias ls=&#39;ls --color=auto&#39;  </description>
    </item>
    
    <item>
      <title>View Current Working Directory</title>
      <link>/linux/basics/view_current_working_directory/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/view_current_working_directory/</guid>
      <description> Often we want to view the current working directory. To do this we can use the pwd command.
View Current Working Directory pwd /home/chris  </description>
    </item>
    
    <item>
      <title>View Environment Variable</title>
      <link>/linux/environment/view_environment_variables/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/environment/view_environment_variables/</guid>
      <description>The printenv command shows us the environment variables.
printenv SHELL=/bin/bash TERM=xterm-256color USER=chris LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36: MAIL=/var/mail/chris PATH=/home/chris/bin:/home/chris/.local/bin:/home/chris/anaconda3/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/snap/bin QT_QPA_PLATFORMTHEME=appmenu-qt5 PWD=/home/chris/example_directory LANG=en_US.UTF-8 SHLVL=1 HOME=/home/chris LOGNAME=chris LESSOPEN=| /usr/bin/lesspipe %s LESSCLOSE=/usr/bin/lesspipe %s %s _=/usr/bin/printenv OLDPWD=/home/chris  </description>
    </item>
    
    <item>
      <title>View First And Last Parts Of Files</title>
      <link>/linux/basics/view_first_and_last_parts_of_files/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/view_first_and_last_parts_of_files/</guid>
      <description>The sort command reorganizes lines in a text file or standard output (technically the same thing) so they are arranged numerically and alphabetically.
Create Example File With List Of Names echo &amp;#39;Luca Gartside&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Reule Smyth&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Spencer Smit&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Crurnirk Steelflow&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Uli Pinetotem&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Ognem Dustsplitter&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Ebil Frugroll&amp;#39; &amp;gt;&amp;gt; adventurers.txt echo &amp;#39;Gordon Humphrey&amp;#39; &amp;gt;&amp;gt; adventurers.</description>
    </item>
    
    <item>
      <title>Write Errors To File</title>
      <link>/linux/inputs_and_outputs/write_errors_to_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/write_errors_to_file/</guid>
      <description>Standard errors are by default printed on the screen. However, it is often useful to write errors to a file for logging purposes. We can do that using 2&amp;gt;.
Create Code That Will Produce Error ls /a/ ls: cannot access &#39;/a/&#39;: No such file or directory  Create File To Store Error touch errors.log Write Error To File In this line we run the command that produces the error and then add 2&amp;gt; errors.</description>
    </item>
    
    <item>
      <title>Write Output To File</title>
      <link>/linux/inputs_and_outputs/write_output_to_file/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/inputs_and_outputs/write_output_to_file/</guid>
      <description>By default standard output of a program goes to the screen. For example, the standard output of ls is a list of files and directories in a directory, which is by default shown on the terminal screen. However, it does not need to be. We can redirect the standard output of a program to a file using the &amp;gt; operator.
Make Some Files And Folders touch config.txt; touch data.csv; touch readme.</description>
    </item>
    
    <item>
      <title>Zip And Unzip Directories</title>
      <link>/linux/basics/zip_and_unzip_directories/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/zip_and_unzip_directories/</guid>
      <description>Make Directory mkdir regiment_data Make Files In Directory touch regiment_data/battles.txt regiment_data/regiment.txt Zip Directory In the code below, we compress (zip) the regiment_data directory into the file regiment.zip. Note that -r means that we want to not only zip the directory but also its contents (which is almost always the case) . zip -r regiment.zip regiment_data
 adding: regiment_data/ (stored 0%) adding: regiment_data/battles.txt (stored 0%) adding: regiment_data/regiment.txt (stored 0%)  View Directory Contents ls -l total 8 drwxrwxr-x 2 chris chris 4096 Jul 31 13:39 regiment_data -rw-rw-r-- 1 chris chris 536 Jul 31 13:39 regiment.</description>
    </item>
    
    <item>
      <title>Zip And Unzip Files</title>
      <link>/linux/basics/zip_and_unzip_files/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 -0700</pubDate>
      
      <guid>/linux/basics/zip_and_unzip_files/</guid>
      <description>Make Files echo &amp;#34;The number of soldiers in the regiment is 24.&amp;#34; &amp;gt; regiment.txt echo &amp;#34;The regiment has seen five battles.&amp;#34; &amp;gt; battles.txt Zip Files The -v argument is optional, prints an output with the details of the operation.
gzip regiment.txt battles.txt -v regiment.txt:	-2.2% -- replaced with regiment.txt.gz battles.txt:	-5.6% -- replaced with battles.txt.gz  View Contents Of Directory ls -l total 8 -rw-rw-r-- 1 chris chris 68 Jul 31 13:15 battles.</description>
    </item>
    
  </channel>
</rss>