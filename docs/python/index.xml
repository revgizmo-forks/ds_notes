<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pythons on Chris Albon</title>
    <link>/python/index.xml</link>
    <description>Recent content in Pythons on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Dec 2018 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create A Class</title>
      <link>/python/object_oriented/create_a_class/</link>
      <pubDate>Sun, 16 Dec 2018 11:53:49 -0700</pubDate>
      
      <guid>/python/object_oriented/create_a_class/</guid>
      <description> Create Simple Class class Soldier: pass Create Instance Of Class jason = Soldier()</description>
    </item>
    
    <item>
      <title>Create Attributes</title>
      <link>/python/object_oriented/create_attributes/</link>
      <pubDate>Sun, 16 Dec 2018 11:53:49 -0700</pubDate>
      
      <guid>/python/object_oriented/create_attributes/</guid>
      <description> Create Simple Class class Soldier: pass Create Instance Of Class jason = Soldier() Create Attribute jason.age = 36 jason.height = 124 View Attributes # Display a dictionary of attributes jason.__dict__ {&#39;age&#39;: 36, &#39;height&#39;: 124}  </description>
    </item>
    
    <item>
      <title>Create Methods</title>
      <link>/python/object_oriented/create_methods/</link>
      <pubDate>Sun, 16 Dec 2018 11:53:49 -0700</pubDate>
      
      <guid>/python/object_oriented/create_methods/</guid>
      <description>Create Simple Class # Create a class called Soldier class Soldier: &amp;#34;&amp;#34;&amp;#34;Creates a class representing a soldier.&amp;#34;&amp;#34;&amp;#34; # Whenever an object is created from this class, # assign the name and initial rank. def __init__(self, name, rank): self.name = name self.rank = 1 # Promote soldier to a higher rank def promote(self): # Set rank to current rank plus one self.rank = self.rank + 1 Create Soldier Named Jason # Create an instance of Soldier class called &amp;#39;jason&amp;#39; jason = Soldier(&amp;#39;Jason Miller&amp;#39;, 1) View Jason&amp;rsquo;s Attributes # Display a dictionary of attributes jason.</description>
    </item>
    
    <item>
      <title>List All Files Of Certain Type In A Directory</title>
      <link>/python/basics/list_all_files_of_particular_type_in_directory/</link>
      <pubDate>Tue, 20 Nov 2018 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/list_all_files_of_particular_type_in_directory/</guid>
      <description>Preliminaries import os List All .ipynb Files In Directory [x for x in os.listdir() if x.endswith(&amp;#34;.ipynb&amp;#34;)] [&#39;create_a_new_file_and_the_write_to_it.ipynb&#39;, &#39;unpacking_a_tuple.ipynb&#39;, &#39;unpacking_function_arguments.ipynb&#39;, &#39;convert_html_symbols_to_strings.ipynb&#39;, &#39;arithmetic_basics.ipynb&#39;, &#39;cleaning_text.ipynb&#39;, &#39;applying_functions_to_list_items.ipynb&#39;, &#39;while_statements.ipynb&#39;, &#39;continue_and_break_loops.ipynb&#39;, &#39;queues_and_stacks.ipynb&#39;, &#39;numpy_array_basics.ipynb&#39;, &#39;schedule_run_in_the_future.ipynb&#39;, &#39;Untitled.ipynb&#39;, &#39;repr_vs_str.ipynb&#39;, &#39;using_named_tuples_to_store_data.ipynb&#39;, &#39;hard_wrapping_text.ipynb&#39;, &#39;string_formatting.ipynb&#39;, &#39;functions_vs_generators.ipynb&#39;, &#39;nesting_lists.ipynb&#39;, &#39;sort_a_list_of_strings_by_length.ipynb&#39;, &#39;filter_items_in_list_with_filter.ipynb&#39;, &#39;swapping_variable_values.ipynb&#39;, &#39;iterating_over_dictionary_keys.ipynb&#39;, &#39;iterate_ifelse_over_list.ipynb&#39;, &#39;recursive_functions.ipynb&#39;, &#39;for_loops.ipynb&#39;, &#39;use_command_line_arguments_in_a_function.ipynb&#39;, &#39;logical_operations.ipynb&#39;, &#39;strings_to_datetime.ipynb&#39;, &#39;flatten_list_of_lists.ipynb&#39;, &#39;nested_for_loops_using_list_comprehension.ipynb&#39;, &#39;Untitled1.ipynb&#39;, &#39;function_basics.ipynb&#39;, &#39;find_the_max_value_in_a_dictionary.ipynb&#39;, &#39;any_all_max_min_sum.ipynb&#39;, &#39;display_json.ipynb&#39;, &#39;exiting_a_loop.ipynb&#39;, &#39;date_and_time_basics.ipynb&#39;, &#39;add_padding_around_string.ipynb&#39;, &#39;iterate_over_multiple_lists_simultaneously.ipynb&#39;, &#39;breaking_up_string_variables.ipynb&#39;, &#39;mocking_functions.ipynb&#39;, &#39;compare_two_dictionaries.ipynb&#39;, &#39;chain_together_lists.ipynb&#39;, &#39;function_annotation_examples.ipynb&#39;, &#39;brute_force_d20_simulator.ipynb&#39;, &#39;string_operations.ipynb&#39;, &#39;data_structure_basics.ipynb&#39;, &#39;string_indexing.ipynb&#39;, &#39;math_operations.ipynb&#39;, &#39;numpy_array_basic_operations.ipynb&#39;, &#39;ifelse_on_any_or_all_elements.ipynb&#39;, &#39;sort_a_list_by_last_name.ipynb&#39;, &#39;apply_operations_over_items_in_lists.</description>
    </item>
    
    <item>
      <title>Columns Shared By Two Data Frames</title>
      <link>/python/data_wrangling/columns_shared_by_two_data_frames/</link>
      <pubDate>Mon, 12 Mar 2018 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/columns_shared_by_two_data_frames/</guid>
      <description>Preliminaries # Import library import pandas as pd Create Data Frames # Create a data frame dataframe_one = pd.DataFrame() dataframe_one[&amp;#39;1&amp;#39;] = [&amp;#39;1&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;1&amp;#39;] dataframe_one[&amp;#39;B&amp;#39;] = [&amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;] # Create a second data frame dataframe_two = pd.DataFrame() dataframe_two[&amp;#39;2&amp;#39;] = [&amp;#39;2&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;2&amp;#39;] dataframe_two[&amp;#39;B&amp;#39;] = [&amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;b&amp;#39;] Find Shared Columns # Convert each data frame&amp;#39;s columns into sets, then find # the intersection of those two sets. This will be the # set of columns shared by both data frames.</description>
    </item>
    
    <item>
      <title>Add Padding Around String</title>
      <link>/python/basics/add_padding_around_string/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/add_padding_around_string/</guid>
      <description> Create Some Text text = &amp;#39;Chapter 1&amp;#39; Add Padding Around Text # Add Spaces Of Padding To The Left format(text, &amp;#39;&amp;gt;20&amp;#39;) &#39; Chapter 1&#39;  # Add Spaces Of Padding To The Right format(text, &amp;#39;&amp;lt;20&amp;#39;) &#39;Chapter 1 &#39;  # Add Spaces Of Padding On Each Side format(text, &amp;#39;^20&amp;#39;) &#39; Chapter 1 &#39;  # Add * Of Padding On Each Side format(text, &amp;#39;*^20&amp;#39;) &#39;*****Chapter 1******&#39;  </description>
    </item>
    
    <item>
      <title>All Combinations For A List Of Objects</title>
      <link>/python/basics/all_combinations_of_a_list_of_objects/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/all_combinations_of_a_list_of_objects/</guid>
      <description>Preliminary # Import combinations with replacements from itertools from itertools import combinations_with_replacement Create a list of objects # Create a list of objects to combine list_of_objects = [&amp;#39;warplanes&amp;#39;, &amp;#39;armor&amp;#39;, &amp;#39;infantry&amp;#39;] Find all combinations (with replacement) for the list # Create an empty list object to hold the results of the loop combinations = [] # Create a loop for every item in the length of list_of_objects, that, for i in list(range(len(list_of_objects))): # Finds every combination (with replacement) for each object in the list combinations.</description>
    </item>
    
    <item>
      <title>Apply Functions By Group In Pandas</title>
      <link>/python/data_wrangling/pandas_apply_function_by_group/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_apply_function_by_group/</guid>
      <description>Preliminaries # import pandas as pd import pandas as pd Create a simulated dataset # Create an example dataframe data = {&amp;#39;Platoon&amp;#39;: [&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C&amp;#39;,&amp;#39;C&amp;#39;], &amp;#39;Casualties&amp;#39;: [1,4,5,7,5,5,6,1,4,5,6,7,4,6,4,6]} df = pd.DataFrame(data) df    Casualties Platoon     0 1 A   1 4 A   2 5 A   3 7 A   4 5 A   5 5 A   6 6 B   7 1 B   8 4 B   9 5 B   10 6 B   11 7 C   12 4 C   13 6 C   14 4 C   15 6 C     Apply A Function (Rolling Mean) To The DataFrame, By Group # Group df by df.</description>
    </item>
    
    <item>
      <title>Apply Operations Over Items In A List</title>
      <link>/python/basics/apply_operations_over_items_in_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/apply_operations_over_items_in_lists/</guid>
      <description>Method 1: map() # Create a list of casualties from battles battleDeaths = [482, 93, 392, 920, 813, 199, 374, 237, 244]# Create a function that updates all battle deaths by adding 100 def updated(x): return x + 100# Create a list that applies updated() to all elements of battleDeaths list(map(updated, battleDeaths)) [582, 193, 492, 1020, 913, 299, 474, 337, 344]  Method 2: for x in y # Create a list of deaths casualties = [482, 93, 392, 920, 813, 199, 374, 237, 244]# Create a variable where we will put the updated casualty numbers casualtiesUpdated = []# Create a function that for each item in casualties, adds 10 for x in casualties: casualtiesUpdated.</description>
    </item>
    
    <item>
      <title>Apply Operations To Groups In Pandas</title>
      <link>/python/data_wrangling/pandas_apply_operations_to_groups/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_apply_operations_to_groups/</guid>
      <description>Preliminaries # import modules import pandas as pd# Create dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Applying Functions To List Items</title>
      <link>/python/basics/applying_functions_to_list_items/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/applying_functions_to_list_items/</guid>
      <description>Create a list of regiment names regimentNames = [&amp;#39;Night Riflemen&amp;#39;, &amp;#39;Jungle Scouts&amp;#39;, &amp;#39;The Dragoons&amp;#39;, &amp;#39;Midnight Revengence&amp;#39;, &amp;#39;Wily Warriors&amp;#39;] Using A For Loop Create a for loop goes through the list and capitalizes each # create a variable for the for loop results regimentNamesCapitalized_f = [] # for every item in regimentNames for i in regimentNames: # capitalize the item and add it to regimentNamesCapitalized_f regimentNamesCapitalized_f.append(i.upper()) # View the outcome regimentNamesCapitalized_f [&#39;NIGHT RIFLEMEN&#39;, &#39;JUNGLE SCOUTS&#39;, &#39;THE DRAGOONS&#39;, &#39;MIDNIGHT REVENGENCE&#39;, &#39;WILY WARRIORS&#39;]  Using Map() Create a lambda function that capitalizes x capitalizer = lambda x: x.</description>
    </item>
    
    <item>
      <title>Applying Operations Over pandas Dataframes</title>
      <link>/python/data_wrangling/pandas_apply_operations_to_dataframes/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_apply_operations_to_dataframes/</guid>
      <description>Import Modules import pandas as pd import numpy as np Create a dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;coverage&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    coverage name reports year     Cochice 25 Jason 4 2012   Pima 94 Molly 24 2012   Santa Cruz 57 Tina 31 2013   Maricopa 62 Jake 2 2014   Yuma 70 Amy 3 2014     Create a capitalization lambda function capitalizer = lambda x: x.</description>
    </item>
    
    <item>
      <title>Arithmetic Basics</title>
      <link>/python/basics/arithmetic_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/arithmetic_basics/</guid>
      <description>Create some simulated variables x = 6 y = 9 x plus y x + y 15  x minus y x - y -3  x times y x * y 54  the remainder of x divided by y x % y 6  x divided by y x / y 0.6666666666666666  x divided by y (floor) (i.e. the quotient) x // y 0  x raised to the y power x ** y 10077696  x plus y, then divide by x (x + y) / x 2.</description>
    </item>
    
    <item>
      <title>Assign A New Column To A Pandas DataFrame</title>
      <link>/python/data_wrangling/pandas_assign_new_column_dataframe/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_assign_new_column_dataframe/</guid>
      <description> Preliminaries import pandas as pd Create Dataframe # Create empty dataframe df = pd.DataFrame() # Create a column df[&amp;#39;name&amp;#39;] = [&amp;#39;John&amp;#39;, &amp;#39;Steve&amp;#39;, &amp;#39;Sarah&amp;#39;] # View dataframe df    name     0 John   1 Steve   2 Sarah     Assign New Column To Dataframe # Assign a new column to df called &amp;#39;age&amp;#39; with a list of ages df.assign(age = [31, 32, 19])    name age     0 John 31   1 Steve 32   2 Sarah 19     </description>
    </item>
    
    <item>
      <title>Assignment Operators</title>
      <link>/python/basics/assignment_operators/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/assignment_operators/</guid>
      <description>Create some variables a = 2 b = 1 c = 0 d = 3 Assigns values from right side to left side c = a + b c 3  Add right to the left and assign the result to left (c = a + c) c += a c 5  Subtract right from the left and assign the result to left (c = a - c) c -= a c 3  Multiply right with the left and assign the result to left (c = a * c) c *= a c 6  Divide left with the right and assign the result to left (c = c / a) c /= a c 3.</description>
    </item>
    
    <item>
      <title>Back To Back Bar Plot In MatPlotLib</title>
      <link>/python/data_visualization/matplotlib_back_to_back_bar_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_back_to_back_bar_plot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;pre_score&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;mid_score&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;post_score&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;pre_score&amp;#39;, &amp;#39;mid_score&amp;#39;, &amp;#39;post_score&amp;#39;]) df    first_name pre_score mid_score post_score     0 Jason 4 25 5   1 Molly 24 94 43   2 Tina 31 57 23   3 Jake 2 62 23   4 Amy 3 70 51     Make plot # input data, specifically the second and  # third rows, skipping the first column x1 = df.</description>
    </item>
    
    <item>
      <title>Bar Plot In MatPlotLib</title>
      <link>/python/data_visualization/matplotlib_bar_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_bar_plot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;pre_score&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;mid_score&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;post_score&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;pre_score&amp;#39;, &amp;#39;mid_score&amp;#39;, &amp;#39;post_score&amp;#39;]) df    first_name pre_score mid_score post_score     0 Jason 4 25 5   1 Molly 24 94 43   2 Tina 31 57 23   3 Jake 2 62 23   4 Amy 3 70 51     Make plot # Create a list of the mean scores for each variable mean_values = [df[&amp;#39;pre_score&amp;#39;].</description>
    </item>
    
    <item>
      <title>Basic Logging</title>
      <link>/python/logging/basic_logging/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/logging/basic_logging/</guid>
      <description>Preliminaries # Import standard library&amp;#39;s logging import logging Configure Logging # Configure logging to ignore messages below info (i.e. debug level is ignored) logging.basicConfig(level=logging.INFO) Create Function # Create function that converts dollars to cents def convert_dollars_to_cents(dollars): # Try... try: # Multiply dollars by 100 cents = dollars * 100 # Convert to integer cents = int(cents) # Send info message that function was run successful logging.info(&amp;#34;convert_dollars_to_cents run successfully&amp;#34;) # Return cents return cents # If a ValueError is raised except ValueError: # Create data type of input dollars_type = type(dollars) # Create error message detailing the error error_message = f&amp;#34;Function input is {dollars_type}, should be &amp;lt;class \&amp;#39;int\&amp;#39;&amp;gt;&amp;#34; # Send error message logging.</description>
    </item>
    
    <item>
      <title>Basic Operations With NumPy Array</title>
      <link>/python/basics/numpy_array_basic_operations/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/numpy_array_basic_operations/</guid>
      <description># Import modules import numpy as np# Create an array civilian_deaths = np.array([4352, 233, 3245, 256, 2394]) civilian_deaths array([4352, 233, 3245, 256, 2394])  # Mean value of the array civilian_deaths.mean() 2096.0  # Total amount of deaths civilian_deaths.sum() 10480  # Smallest value in the array civilian_deaths.min() 233  # Largest value in the array civilian_deaths.max() 4352  </description>
    </item>
    
    <item>
      <title>Beautiful Soup Basic HTML Scraping</title>
      <link>/python/web_scraping/beautiful_soup_html_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/web_scraping/beautiful_soup_html_basics/</guid>
      <description>Import the modules # Import required modules import requests from bs4 import BeautifulSoup Scrap the html and turn into a beautiful soup object # Create a variable with the url url = &amp;#39;http://chrisralbon.com&amp;#39; # Use requests to get the contents r = requests.get(url) # Get the text of the contents html_content = r.text # Convert the html content into a beautiful soup object soup = BeautifulSoup(html_content, &amp;#39;lxml&amp;#39;) Select the website&amp;rsquo;s title # View the title tag of the soup object soup.</description>
    </item>
    
    <item>
      <title>Break A List Into N-Sized Chunks</title>
      <link>/python/data_wrangling/break_list_into_chunks_of_equal_size/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/break_list_into_chunks_of_equal_size/</guid>
      <description>In this snippet we take a list and break it up into n-size chunks. This is a very common practice when dealing with APIs that have a maximum request size.
Credit for this nifty function goes to Ned Batchelder who posted it on StackOverflow.
# Create a list of first names first_names = [&amp;#39;Steve&amp;#39;, &amp;#39;Jane&amp;#39;, &amp;#39;Sara&amp;#39;, &amp;#39;Mary&amp;#39;,&amp;#39;Jack&amp;#39;,&amp;#39;Bob&amp;#39;, &amp;#39;Bily&amp;#39;, &amp;#39;Boni&amp;#39;, &amp;#39;Chris&amp;#39;,&amp;#39;Sori&amp;#39;, &amp;#39;Will&amp;#39;, &amp;#39;Won&amp;#39;,&amp;#39;Li&amp;#39;]# Create a function called &amp;#34;chunks&amp;#34; with two arguments, l and n: def chunks(l, n): # For item i in a range that is a length of l, for i in range(0, len(l), n): # Create an index range for l of n items: yield l[i:i+n]# Create a list that from the results of the function chunks: list(chunks(first_names, 5)) [[&#39;Steve&#39;, &#39;Jane&#39;, &#39;Sara&#39;, &#39;Mary&#39;, &#39;Jack&#39;], [&#39;Bob&#39;, &#39;Bily&#39;, &#39;Boni&#39;, &#39;Chris&#39;, &#39;Sori&#39;], [&#39;Will&#39;, &#39;Won&#39;, &#39;Li&#39;]]  </description>
    </item>
    
    <item>
      <title>Breaking Up A String Into Columns Using Regex In pandas</title>
      <link>/python/data_wrangling/pandas_regex_to_create_columns/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_regex_to_create_columns/</guid>
      <description>Import modules import re import pandas as pd Create a dataframe of raw strings # Create a dataframe with a single column of strings data = {&amp;#39;raw&amp;#39;: [&amp;#39;Arizona 1 2014-12-23 3242.0&amp;#39;, &amp;#39;Iowa 1 2010-02-23 3453.7&amp;#39;, &amp;#39;Oregon 0 2014-06-20 2123.0&amp;#39;, &amp;#39;Maryland 0 2014-03-14 1123.6&amp;#39;, &amp;#39;Florida 1 2013-01-15 2134.0&amp;#39;, &amp;#39;Georgia 0 2012-07-14 2345.6&amp;#39;]} df = pd.DataFrame(data, columns = [&amp;#39;raw&amp;#39;]) df    raw     0 Arizona 1 2014-12-23 3242.</description>
    </item>
    
    <item>
      <title>Breaking Up String Variables</title>
      <link>/python/basics/breaking_up_string_variables/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/breaking_up_string_variables/</guid>
      <description> Basic name assignment variableName = &amp;#39;This is a string.&amp;#39; List assignment One, Two, Three = [1, 2, 3] Break up a string into variables firstLetter, secondLetter, thirdLetter, fourthLetter = &amp;#39;Bark&amp;#39;firstLetter &#39;B&#39;  secondLetter &#39;a&#39;  thirdLetter &#39;r&#39;  fourthLetter &#39;k&#39;  Breaking up a number into separate variables firstNumber, secondNumber, thirdNumber, fourthNumber = &amp;#39;9485&amp;#39;firstNumber &#39;9&#39;  secondNumber &#39;4&#39;  thirdNumber &#39;8&#39;  fourthNumber &#39;5&#39;  Assign the first letter of &amp;lsquo;spam&amp;rsquo; into varible a, assign all the remaining letters to variable b a, *b = &amp;#39;spam&amp;#39; a &#39;s&#39;  b [&#39;p&#39;, &#39;a&#39;, &#39;m&#39;]  </description>
    </item>
    
    <item>
      <title>Brute Force D20 Roll Simulator</title>
      <link>/python/basics/brute_force_d20_simulator/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/brute_force_d20_simulator/</guid>
      <description>This snippet is a completely inefficient simulator of a 20 sided dice. To create a &amp;ldquo;successful roll&amp;rdquo; the snippet has to generate dozens of random numbers.
Import random module import random Create a variable with a TRUE value rolling = True Create a while loop that rolls until the first digit is 2 or less and the second digit is 10 or less # while rolling is true while rolling: # create x, a random number between 0 and 99 x = random.</description>
    </item>
    
    <item>
      <title>Cartesian Product</title>
      <link>/python/basics/cartesian_product/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/cartesian_product/</guid>
      <description>Preliminaries # import pandas as pd import pandas as pd Create Data # Create two lists i = [1,2,3,4,5] j = [1,2,3,4,5] Calculate Cartesian Product (Method 1) # List every single x in i with every single y (i.e. Cartesian product) [(x, y) for x in i for y in j] [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]  Calculate Cartesian Product (Method 2) # An alternative way to do the cartesian product # import itertools import itertools # for two sets, find the the cartisan product for i in itertools.</description>
    </item>
    
    <item>
      <title>Chain Together Lists</title>
      <link>/python/basics/chain_together_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/chain_together_lists/</guid>
      <description> Preliminaries from itertools import chain Create Two Lists # Create a list of allies allies = [&amp;#39;Spain&amp;#39;, &amp;#39;Germany&amp;#39;, &amp;#39;Namibia&amp;#39;, &amp;#39;Austria&amp;#39;] # Create a list of enemies enemies = [&amp;#39;Mexico&amp;#39;, &amp;#39;United Kingdom&amp;#39;, &amp;#39;France&amp;#39;] Iterate Over Both Lists As A Single Sequence # For each country in allies and enemies for country in chain(allies, enemies): # print the country print(country) Spain Germany Namibia Austria Mexico United Kingdom France  </description>
    </item>
    
    <item>
      <title>Cleaning Text</title>
      <link>/python/basics/cleaning_text/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/cleaning_text/</guid>
      <description>Create some raw text # Create a list of three strings. incoming_reports = [&amp;#34;We are attacking on their left flank but are losing many men.&amp;#34;, &amp;#34;We cannot see the enemy army. Nothing else to report.&amp;#34;, &amp;#34;We are ready to attack but are waiting for your orders.&amp;#34;] Seperate by word # import word tokenizer from nltk.tokenize import word_tokenize # Apply word_tokenize to each element of the list called incoming_reports tokenized_reports = [word_tokenize(report) for report in incoming_reports] # View tokenized_reports tokenized_reports [[&#39;We&#39;, &#39;are&#39;, &#39;attacking&#39;, &#39;on&#39;, &#39;their&#39;, &#39;left&#39;, &#39;flank&#39;, &#39;but&#39;, &#39;are&#39;, &#39;losing&#39;, &#39;many&#39;, &#39;men&#39;, &#39;.</description>
    </item>
    
    <item>
      <title>Color Palettes in Seaborn</title>
      <link>/python/data_visualization/seaborn_color_palettes/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/seaborn_color_palettes/</guid>
      <description>Preliminaries import pandas as pd %matplotlib inline import matplotlib.pyplot as plt import seaborn as snsdata = {&amp;#39;date&amp;#39;: [&amp;#39;2014-05-01 18:47:05.069722&amp;#39;, &amp;#39;2014-05-01 18:47:05.119994&amp;#39;, &amp;#39;2014-05-02 18:47:05.178768&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.280592&amp;#39;, &amp;#39;2014-05-03 18:47:05.332662&amp;#39;, &amp;#39;2014-05-03 18:47:05.385109&amp;#39;, &amp;#39;2014-05-04 18:47:05.436523&amp;#39;, &amp;#39;2014-05-04 18:47:05.486877&amp;#39;], &amp;#39;deaths_regiment_1&amp;#39;: [34, 43, 14, 15, 15, 14, 31, 25, 62, 41], &amp;#39;deaths_regiment_2&amp;#39;: [52, 66, 78, 15, 15, 5, 25, 25, 86, 1], &amp;#39;deaths_regiment_3&amp;#39;: [13, 73, 82, 58, 52, 87, 26, 5, 56, 75], &amp;#39;deaths_regiment_4&amp;#39;: [44, 75, 26, 15, 15, 14, 54, 25, 24, 72], &amp;#39;deaths_regiment_5&amp;#39;: [25, 24, 25, 15, 57, 68, 21, 27, 62, 5], &amp;#39;deaths_regiment_6&amp;#39;: [84, 84, 26, 15, 15, 14, 26, 25, 62, 24], &amp;#39;deaths_regiment_7&amp;#39;: [46, 57, 26, 15, 15, 14, 26, 25, 62, 41]} df = pd.</description>
    </item>
    
    <item>
      <title>Compare Two Dictionaries</title>
      <link>/python/basics/compare_two_dictionaries/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/compare_two_dictionaries/</guid>
      <description>Make Two Dictionaries importers = {&amp;#39;El Salvador&amp;#39; : 1234, &amp;#39;Nicaragua&amp;#39; : 152, &amp;#39;Spain&amp;#39; : 252 } exporters = {&amp;#39;Spain&amp;#39; : 252, &amp;#39;Germany&amp;#39; : 251, &amp;#39;Italy&amp;#39; : 1563 } Find Duplicate Keys # Find the intersection of importers and exporters importers.keys() &amp;amp; exporters.keys() {&#39;Spain&#39;}  Find Difference In Keys # Find the difference between importers and exporters importers.keys() - exporters.keys() {&#39;El Salvador&#39;, &#39;Nicaragua&#39;}  Find Key, Values Pairs In Common # Find countries where the amount of exports matches the amount of imports importers.</description>
    </item>
    
    <item>
      <title>Concurrent Processing</title>
      <link>/python/basics/concurrent_processing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/concurrent_processing/</guid>
      <description> Preliminaries from concurrent import futures Create Data data = range(100) Create Function # Create some function that takes a value def some_function(value): # And outputs it raised to its own power return value**value Run The Function On The Data Concurrently # With a pool of workers with futures.ProcessPoolExecutor() as executor: # Map the function to the data result = executor.map(some_function, data) View Results # List the first 5 outputs list(result)[0:5] [1, 1, 4, 27, 256]  </description>
    </item>
    
    <item>
      <title>Construct A Dictionary From Multiple Lists</title>
      <link>/python/data_wrangling/construct_a_dictionary_from_multiple_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/construct_a_dictionary_from_multiple_lists/</guid>
      <description> Create Two Lists # Create a list of theofficer&amp;#39;s name officer_names = [&amp;#39;Sodoni Dogla&amp;#39;, &amp;#39;Chris Jefferson&amp;#39;, &amp;#39;Jessica Billars&amp;#39;, &amp;#39;Michael Mulligan&amp;#39;, &amp;#39;Steven Johnson&amp;#39;] # Create a list of the officer&amp;#39;s army officer_armies = [&amp;#39;Purple Army&amp;#39;, &amp;#39;Orange Army&amp;#39;, &amp;#39;Green Army&amp;#39;, &amp;#39;Red Army&amp;#39;, &amp;#39;Blue Army&amp;#39;] Construct A Dictionary From The Two Lists # Create a dictionary that is the zip of the two lists dict(zip(officer_names, officer_armies)) {&#39;Chris Jefferson&#39;: &#39;Orange Army&#39;, &#39;Jessica Billars&#39;: &#39;Green Army&#39;, &#39;Michael Mulligan&#39;: &#39;Red Army&#39;, &#39;Sodoni Dogla&#39;: &#39;Purple Army&#39;, &#39;Steven Johnson&#39;: &#39;Blue Army&#39;}  </description>
    </item>
    
    <item>
      <title>Continue And Break Loops</title>
      <link>/python/basics/continue_and_break_loops/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/continue_and_break_loops/</guid>
      <description>Import the random module import random Create a while loop # set running to true running = True# while running is true while running: # Create a random integer between 0 and 5 s = random.randint(0,5) # If the integer is less than 3 if s &amp;lt; 3: # Print this print(&amp;#39;It is too small, starting over.&amp;#39;) # Reset the next interation of the loop # (i.e skip everything below and restart from the top) continue # If the integer is 4 if s == 4: running = False # Print this print(&amp;#39;It is 4!</description>
    </item>
    
    <item>
      <title>Convert A CSV Into Python Code To Recreate It</title>
      <link>/python/data_wrangling/csv_to_python_code/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/csv_to_python_code/</guid>
      <description>Preliminaries # Import the pandas package import pandas as pd Load the external dataset # Load the csv file as a pandas dataframe df_original = pd.read_csv(&amp;#39;http://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv&amp;#39;) df = pd.read_csv(&amp;#39;http://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv&amp;#39;) Print the code required to create that dataset # Print the code to create the dataframe print(&amp;#39;==============================&amp;#39;) print(&amp;#39;RUN THE CODE BELOW THIS LINE&amp;#39;) print(&amp;#39;==============================&amp;#39;) print(&amp;#39;raw_data =&amp;#39;, df.to_dict(orient=&amp;#39;list&amp;#39;)) print(&amp;#39;df = pd.DataFrame(raw_data, columns = &amp;#39; + str(list(df_original)) + &amp;#39;)&amp;#39;) ============================== RUN THE CODE BELOW THIS LINE ============================== raw_data = {&#39;Sepal.</description>
    </item>
    
    <item>
      <title>Convert A Categorical Variable Into Dummy Variables</title>
      <link>/python/data_wrangling/pandas_convert_categorical_to_dummies/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_convert_categorical_to_dummies/</guid>
      <description># import modules import pandas as pd# Create a dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;sex&amp;#39;: [&amp;#39;male&amp;#39;, &amp;#39;female&amp;#39;, &amp;#39;male&amp;#39;, &amp;#39;female&amp;#39;, &amp;#39;female&amp;#39;]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;sex&amp;#39;]) df    first_name last_name sex     0 Jason Miller male   1 Molly Jacobson female   2 Tina Ali male   3 Jake Milner female   4 Amy Cooze female     # Create a set of dummy variables from the sex variable df_sex = pd.</description>
    </item>
    
    <item>
      <title>Convert A Categorical Variable Into Dummy Variables</title>
      <link>/python/data_wrangling/pandas_convert_numeric_categorical_to_numeric_with_patsy/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_convert_numeric_categorical_to_numeric_with_patsy/</guid>
      <description># import modules import pandas as pd import patsy# Create dataframe raw_data = {&amp;#39;countrycode&amp;#39;: [1, 2, 3, 2, 1]} df = pd.DataFrame(raw_data, columns = [&amp;#39;countrycode&amp;#39;]) df    countrycode     0 1   1 2   2 3   3 2   4 1     # Convert the countrycode variable into three binary variables patsy.dmatrix(&amp;#39;C(countrycode)-1&amp;#39;, df, return_type=&amp;#39;dataframe&amp;#39;)    C(countrycode)[1] C(countrycode)[2] C(countrycode)[3]     0 1.</description>
    </item>
    
    <item>
      <title>Convert A String Categorical Variable To A Numeric Variable</title>
      <link>/python/data_wrangling/convert_categorical_to_numeric/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/convert_categorical_to_numeric/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;patient&amp;#39;: [1, 1, 1, 2, 2], &amp;#39;obs&amp;#39;: [1, 2, 3, 1, 2], &amp;#39;treatment&amp;#39;: [0, 1, 0, 1, 0], &amp;#39;score&amp;#39;: [&amp;#39;strong&amp;#39;, &amp;#39;weak&amp;#39;, &amp;#39;normal&amp;#39;, &amp;#39;weak&amp;#39;, &amp;#39;strong&amp;#39;]} df = pd.DataFrame(raw_data, columns = [&amp;#39;patient&amp;#39;, &amp;#39;obs&amp;#39;, &amp;#39;treatment&amp;#39;, &amp;#39;score&amp;#39;]) df    patient obs treatment score     0 1 1 0 strong   1 1 2 1 weak   2 1 3 0 normal   3 2 1 1 weak   4 2 2 0 strong     Create a function that converts all values of df[&#39;score&#39;] into numbers def score_to_numeric(x): if x==&amp;#39;strong&amp;#39;: return 3 if x==&amp;#39;normal&amp;#39;: return 2 if x==&amp;#39;weak&amp;#39;: return 1 Apply the function to the score variable df[&amp;#39;score_num&amp;#39;] = df[&amp;#39;score&amp;#39;].</description>
    </item>
    
    <item>
      <title>Convert A Variable To A Time Variable In pandas</title>
      <link>/python/data_wrangling/pandas_convert_to_datetime/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_convert_to_datetime/</guid>
      <description># Import Preliminaries import pandas as pd# Create a dataset with the index being a set of names raw_data = {&amp;#39;date&amp;#39;: [&amp;#39;2014-06-01T01:21:38.004053&amp;#39;, &amp;#39;2014-06-02T01:21:38.004053&amp;#39;, &amp;#39;2014-06-03T01:21:38.004053&amp;#39;], &amp;#39;score&amp;#39;: [25, 94, 57]} df = pd.DataFrame(raw_data, columns = [&amp;#39;date&amp;#39;, &amp;#39;score&amp;#39;]) df    date score     0 2014-06-01T01:21:38.004053 25   1 2014-06-02T01:21:38.004053 94   2 2014-06-03T01:21:38.004053 57     # Transpose the dataset, so that the index (in this case the names) are columns df[&amp;#34;date&amp;#34;] = pd.</description>
    </item>
    
    <item>
      <title>Convert HTML Characters To Strings</title>
      <link>/python/basics/convert_html_symbols_to_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/convert_html_symbols_to_strings/</guid>
      <description>## Preliminariesimport html## Create Texttext = &amp;#39;This item costs &amp;amp;#165;400 or &amp;amp;#163;4.&amp;#39;## Convert To Stringhtml.unescape(text) &#39;This item costs ¥400 or £4.&#39;  ## Convert To HTML Entitieshtml.escape(text) &#39;This item costs &amp;amp;amp;#165;400 or &amp;amp;amp;#163;4.&#39;  </description>
    </item>
    
    <item>
      <title>Converting Strings To Datetime</title>
      <link>/python/basics/strings_to_datetime/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/strings_to_datetime/</guid>
      <description>Import modules from datetime import datetime from dateutil.parser import parse import pandas as pd Create a string variable with the war start time war_start = &amp;#39;2011-01-03&amp;#39; Convert the string to datetime format datetime.strptime(war_start, &amp;#39;%Y-%m-%d&amp;#39;) datetime.datetime(2011, 1, 3, 0, 0)  Create a list of strings as dates attack_dates = [&amp;#39;7/2/2011&amp;#39;, &amp;#39;8/6/2012&amp;#39;, &amp;#39;11/13/2013&amp;#39;, &amp;#39;5/26/2011&amp;#39;, &amp;#39;5/2/2001&amp;#39;] Convert attack_dates strings into datetime format [datetime.strptime(x, &amp;#39;%m/%d/%Y&amp;#39;) for x in attack_dates] [datetime.datetime(2011, 7, 2, 0, 0), datetime.</description>
    </item>
    
    <item>
      <title>Count Values In Pandas Dataframe</title>
      <link>/python/data_wrangling/pandas_dataframe_count_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_dataframe_count_values/</guid>
      <description>Import the pandas module import pandas as pd Create all the columns of the dataframe as series year = pd.Series([1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894]) guardCorps = pd.Series([0,2,2,1,0,0,1,1,0,3,0,2,1,0,0,1,0,1,0,1]) corps1 = pd.Series([0,0,0,2,0,3,0,2,0,0,0,1,1,1,0,2,0,3,1,0]) corps2 = pd.Series([0,0,0,2,0,2,0,0,1,1,0,0,2,1,1,0,0,2,0,0]) corps3 = pd.Series([0,0,0,1,1,1,2,0,2,0,0,0,1,0,1,2,1,0,0,0]) corps4 = pd.Series([0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0]) corps5 = pd.Series([0,0,0,0,2,1,0,0,1,0,0,1,0,1,1,1,1,1,1,0]) corps6 = pd.Series([0,0,1,0,2,0,0,1,2,0,1,1,3,1,1,1,0,3,0,0]) corps7 = pd.Series([1,0,1,0,0,0,1,0,1,1,0,0,2,0,0,2,1,0,2,0]) corps8 = pd.Series([1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1]) corps9 = pd.Series([0,0,0,0,0,2,1,1,1,0,2,1,1,0,1,2,0,1,0,0]) corps10 = pd.</description>
    </item>
    
    <item>
      <title>Create A New File Then Write To It</title>
      <link>/python/basics/create_a_new_file_and_the_write_to_it/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/create_a_new_file_and_the_write_to_it/</guid>
      <description>Create A New File And Write To It # Create a file if it doesn&amp;#39;t already exist with open(&amp;#39;file.txt&amp;#39;, &amp;#39;xt&amp;#39;) as f: # Write to the file f.write(&amp;#39;This file now exsits!&amp;#39;) # Close the connection to the file f.close() Open The File And Read It # Open the file with open(&amp;#39;file.txt&amp;#39;, &amp;#39;rt&amp;#39;) as f: # Read the data in the file data = f.read() # Close the connection to the file f.</description>
    </item>
    
    <item>
      <title>Create A Pipeline In Pandas</title>
      <link>/python/data_wrangling/pandas_create_pipeline/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_create_pipeline/</guid>
      <description>Pandas&amp;rsquo; pipeline feature allows you to string together Python functions in order to build a pipeline of data processing.
Preliminaries import pandas as pd Create Dataframe # Create empty dataframe df = pd.DataFrame() # Create a column df[&amp;#39;name&amp;#39;] = [&amp;#39;John&amp;#39;, &amp;#39;Steve&amp;#39;, &amp;#39;Sarah&amp;#39;] df[&amp;#39;gender&amp;#39;] = [&amp;#39;Male&amp;#39;, &amp;#39;Male&amp;#39;, &amp;#39;Female&amp;#39;] df[&amp;#39;age&amp;#39;] = [31, 32, 19] # View dataframe df    name gender age     0 John Male 31   1 Steve Male 32   2 Sarah Female 19     Create Functions To Process Data # Create a function that def mean_age_by_group(dataframe, col): # groups the data by a column and returns the mean age per group return dataframe.</description>
    </item>
    
    <item>
      <title>Create A Temporary File</title>
      <link>/python/basics/create_a_temporary_file/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/create_a_temporary_file/</guid>
      <description>Preliminaries from tempfile import NamedTemporaryFile Create A Temporary File f = NamedTemporaryFile(&amp;#39;w+t&amp;#39;) Write To The Temp File # Write to the file, the output is the number of characters f.write(&amp;#39;Nobody lived on Deadweather but us and the pirates. It wasn’t hard to understand why.&amp;#39;) 85  View The Tmp File&amp;rsquo;s Name f.name &#39;/var/folders/0b/pj3wsd750fjf8xzfb0n127w80000gn/T/tmphv1dkovx&#39;  Read The File # Go to the top of the file f.seek(0) # Read the file f.</description>
    </item>
    
    <item>
      <title>Create A pandas Column With A For Loop</title>
      <link>/python/data_wrangling/pandas_create_column_with_loop/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_create_column_with_loop/</guid>
      <description>Preliminaries import pandas as pd import numpy as np Create an example dataframe raw_data = {&amp;#39;student_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;test_score&amp;#39;: [76, 88, 84, 67, 53, 96, 64, 91, 77, 73, 52, np.NaN]} df = pd.DataFrame(raw_data, columns = [&amp;#39;student_name&amp;#39;, &amp;#39;test_score&amp;#39;]) Create a function to assign letter grades # Create a list to store the data grades = [] # For each row in the column, for row in df[&amp;#39;test_score&amp;#39;]: # if more than a value, if row &amp;gt; 95: # Append a letter grade grades.</description>
    </item>
    
    <item>
      <title>Create Counts Of Items</title>
      <link>/python/data_wrangling/creating_counts_of_items/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/creating_counts_of_items/</guid>
      <description>Preliminaries from collections import Counter Create A Counter # Create a counter of the fruits eaten today fruit_eaten = Counter([&amp;#39;Apple&amp;#39;, &amp;#39;Apple&amp;#39;, &amp;#39;Apple&amp;#39;, &amp;#39;Banana&amp;#39;, &amp;#39;Pear&amp;#39;, &amp;#39;Pineapple&amp;#39;]) # View counter fruit_eaten Counter({&#39;Apple&#39;: 3, &#39;Banana&#39;: 1, &#39;Pear&#39;: 1, &#39;Pineapple&#39;: 1})  Update The Count For An Element # Update the count for &amp;#39;Pineapple&amp;#39; (because you just ate an pineapple) fruit_eaten.update([&amp;#39;Pineapple&amp;#39;]) # View the counter fruit_eaten Counter({&#39;Apple&#39;: 3, &#39;Banana&#39;: 1, &#39;Pear&#39;: 1, &#39;Pineapple&#39;: 2})  View The Items With The Highest Counts # View the items with the top 3 counts fruit_eaten.</description>
    </item>
    
    <item>
      <title>Create a Column Based on a Conditional in pandas</title>
      <link>/python/data_wrangling/pandas_create_column_using_conditional/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_create_column_using_conditional/</guid>
      <description>Preliminaries # Import required modules import pandas as pd import numpy as np Make a dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, columns = [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    name age preTestScore postTestScore     0 Jason 42 4 25   1 Molly 52 24 94   2 Tina 36 31 57   3 Jake 24 2 62   4 Amy 73 3 70     Add a new column for elderly # Create a new column called df.</description>
    </item>
    
    <item>
      <title>Creating A Time Series Plot With Seaborn And pandas</title>
      <link>/python/data_visualization/seaborn_pandas_timeseries_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/seaborn_pandas_timeseries_plot/</guid>
      <description>Preliminaries import pandas as pd %matplotlib inline import matplotlib.pyplot as plt import seaborn as snsdata = {&amp;#39;date&amp;#39;: [&amp;#39;2014-05-01 18:47:05.069722&amp;#39;, &amp;#39;2014-05-01 18:47:05.119994&amp;#39;, &amp;#39;2014-05-02 18:47:05.178768&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.280592&amp;#39;, &amp;#39;2014-05-03 18:47:05.332662&amp;#39;, &amp;#39;2014-05-03 18:47:05.385109&amp;#39;, &amp;#39;2014-05-04 18:47:05.436523&amp;#39;, &amp;#39;2014-05-04 18:47:05.486877&amp;#39;], &amp;#39;deaths_regiment_1&amp;#39;: [34, 43, 14, 15, 15, 14, 31, 25, 62, 41], &amp;#39;deaths_regiment_2&amp;#39;: [52, 66, 78, 15, 15, 5, 25, 25, 86, 1], &amp;#39;deaths_regiment_3&amp;#39;: [13, 73, 82, 58, 52, 87, 26, 5, 56, 75], &amp;#39;deaths_regiment_4&amp;#39;: [44, 75, 26, 15, 15, 14, 54, 25, 24, 72], &amp;#39;deaths_regiment_5&amp;#39;: [25, 24, 25, 15, 57, 68, 21, 27, 62, 5], &amp;#39;deaths_regiment_6&amp;#39;: [84, 84, 26, 15, 15, 14, 26, 25, 62, 24], &amp;#39;deaths_regiment_7&amp;#39;: [46, 57, 26, 15, 15, 14, 26, 25, 62, 41]} df = pd.</description>
    </item>
    
    <item>
      <title>Creating Lists From Dictionary Keys And Values</title>
      <link>/python/data_wrangling/create_list_from_dictionary_keys_and_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/create_list_from_dictionary_keys_and_values/</guid>
      <description> Create a dictionary dict = {&amp;#39;county&amp;#39;: [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;fireReports&amp;#39;: [4, 24, 31, 2, 3]} Create a list from the dictionary keys # Create a list of keys list(dict.keys()) [&#39;fireReports&#39;, &#39;year&#39;, &#39;county&#39;]  Create a list from the dictionary values # Create a list of values list(dict.values()) [[4, 24, 31, 2, 3], [2012, 2012, 2013, 2014, 2014], [&#39;Cochice&#39;, &#39;Pima&#39;, &#39;Santa Cruz&#39;, &#39;Maricopa&#39;, &#39;Yuma&#39;]]  </description>
    </item>
    
    <item>
      <title>Creating Scatterplots With Seaborn</title>
      <link>/python/data_visualization/seaborn_scatterplot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/seaborn_scatterplot/</guid>
      <description>Preliminaries import pandas as pd %matplotlib inline import random import matplotlib.pyplot as plt import seaborn as sns Create data # Create empty dataframe df = pd.DataFrame() # Add columns df[&amp;#39;x&amp;#39;] = random.sample(range(1, 1000), 5) df[&amp;#39;y&amp;#39;] = random.sample(range(1, 1000), 5) df[&amp;#39;z&amp;#39;] = [1,0,0,1,0] df[&amp;#39;k&amp;#39;] = [&amp;#39;male&amp;#39;,&amp;#39;male&amp;#39;,&amp;#39;male&amp;#39;,&amp;#39;female&amp;#39;,&amp;#39;female&amp;#39;]# View first few rows of data df.head()   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .</description>
    </item>
    
    <item>
      <title>Crosstabs In pandas</title>
      <link>/python/data_wrangling/pandas_crosstabs/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_crosstabs/</guid>
      <description>Import pandas import pandas as pdraw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;infantry&amp;#39;, &amp;#39;infantry&amp;#39;, &amp;#39;cavalry&amp;#39;, &amp;#39;cavalry&amp;#39;, &amp;#39;infantry&amp;#39;, &amp;#39;infantry&amp;#39;, &amp;#39;cavalry&amp;#39;, &amp;#39;cavalry&amp;#39;,&amp;#39;infantry&amp;#39;, &amp;#39;infantry&amp;#39;, &amp;#39;cavalry&amp;#39;, &amp;#39;cavalry&amp;#39;], &amp;#39;experience&amp;#39;: [&amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;, &amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;, &amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;, &amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;,&amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;, &amp;#39;veteran&amp;#39;, &amp;#39;rookie&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Data Structure Basics</title>
      <link>/python/basics/data_structure_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/data_structure_basics/</guid>
      <description>Lists &amp;ldquo;A list is a data structure that holds an ordered collection of items i.e. you can store a sequence of items in a list.&amp;rdquo; - A Byte Of Python
Lists are mutable.
# Create a list of countries, then print the results allies = [&amp;#39;USA&amp;#39;,&amp;#39;UK&amp;#39;,&amp;#39;France&amp;#39;,&amp;#39;New Zealand&amp;#39;, &amp;#39;Australia&amp;#39;,&amp;#39;Canada&amp;#39;,&amp;#39;Poland&amp;#39;]; allies [&#39;USA&#39;, &#39;UK&#39;, &#39;France&#39;, &#39;New Zealand&#39;, &#39;Australia&#39;, &#39;Canada&#39;, &#39;Poland&#39;]  # Print the length of the list len(allies) 7  # Add an item to the list, then print the results allies.</description>
    </item>
    
    <item>
      <title>Date And Time Basics</title>
      <link>/python/basics/date_and_time_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/date_and_time_basics/</guid>
      <description># Import modules from datetime import datetime from datetime import timedelta# Create a variable with the current time now = datetime.now() now datetime.datetime(2014, 5, 11, 20, 5, 11, 688051)  # The current year now.year 2014  # The current month now.month 5  # The current day now.day 11  # The current hour now.hour 20  # The current minute now.minute 5  # The difference between two dates delta = datetime(2011, 1, 7) - datetime(2011, 1, 6) delta datetime.</description>
    </item>
    
    <item>
      <title>Delete Duplicates In pandas</title>
      <link>/python/data_wrangling/pandas_delete_duplicates/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_delete_duplicates/</guid>
      <description>import modules import pandas as pd Create dataframe with duplicates raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Jason&amp;#39;, &amp;#39;Jason&amp;#39;,&amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Miller&amp;#39;, &amp;#39;Miller&amp;#39;,&amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 42, 1111111, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 4, 4, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 25, 25, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .</description>
    </item>
    
    <item>
      <title>Descriptive Statistics For pandas Dataframe</title>
      <link>/python/data_wrangling/pandas_dataframe_descriptive_stats/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_dataframe_descriptive_stats/</guid>
      <description>Import modules import pandas as pd Create dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, columns = [&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   name age preTestScore postTestScore     0  Jason  42  4  25   1  Molly  52  24  94   2  Tina  36  31  57   3  Jake  24  2  62   4  Amy  73  3  70    5 rows × 4 columns</description>
    </item>
    
    <item>
      <title>Dictionary Basics</title>
      <link>/python/basics/dictionary_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/dictionary_basics/</guid>
      <description>Basics  Not sequences, but mappings. That is, stored by key, not relative position. Dictionaries are mutable.  Build a dictionary via brackets unef_org = {&amp;#39;name&amp;#39; : &amp;#39;UNEF&amp;#39;, &amp;#39;staff&amp;#39; : 32, &amp;#39;url&amp;#39; : &amp;#39;http://unef.org&amp;#39;} View the variable unef_org {&#39;name&#39;: &#39;UNEF&#39;, &#39;staff&#39;: 32, &#39;url&#39;: &#39;http://unef.org&#39;}  Build a dict via keys who_org = {} who_org[&amp;#39;name&amp;#39;] = &amp;#39;WHO&amp;#39; who_org[&amp;#39;staff&amp;#39;] = &amp;#39;10&amp;#39; who_org[&amp;#39;url&amp;#39;] = &amp;#39;http://who.org&amp;#39; View the variable who_org {&#39;name&#39;: &#39;WHO&#39;, &#39;staff&#39;: &#39;10&#39;, &#39;url&#39;: &#39;http://who.</description>
    </item>
    
    <item>
      <title>Display JSON</title>
      <link>/python/basics/display_json/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/display_json/</guid>
      <description>Preliminary # Import library import json Create String With JSON Data _string = &amp;#39;{&amp;#34;data&amp;#34;: {&amp;#34;title&amp;#34;: &amp;#34;Machine Learning With Python Cookbook&amp;#34;,&amp;#34;author&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;Chris Albon&amp;#34;,&amp;#34;biography&amp;#34;: {&amp;#34;eduation&amp;#34;: {&amp;#34;phd&amp;#34;: &amp;#34;UC Davis&amp;#34;,&amp;#34;masters&amp;#34;: &amp;#34;UC Davis&amp;#34;,&amp;#34;undergraduate&amp;#34;: &amp;#34;Univ. Of Miami&amp;#34;,&amp;#34;acronym&amp;#34;: &amp;#34;CRA&amp;#34;,&amp;#34;full name&amp;#34;: &amp;#34;Christopher Albon&amp;#34;,&amp;#34;favorites&amp;#34;: {&amp;#34;food&amp;#34;: &amp;#34;Steak&amp;#34;,&amp;#34;sport&amp;#34;: [&amp;#34;baseball&amp;#34;, &amp;#34;basketball&amp;#34;]},&amp;#34;dissertation&amp;#34;: &amp;#34;Health Systems During And After Civil WarS&amp;#34;}}}}}&amp;#39; Convert String To JSON json_data = json.loads(_string) Display JSON print(json.dumps(json_data, indent=2)) { &amp;quot;data&amp;quot;: { &amp;quot;title&amp;quot;: &amp;quot;Machine Learning With Python Cookbook&amp;quot;, &amp;quot;author&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;Chris Albon&amp;quot;, &amp;quot;biography&amp;quot;: { &amp;quot;eduation&amp;quot;: { &amp;quot;phd&amp;quot;: &amp;quot;UC Davis&amp;quot;, &amp;quot;masters&amp;quot;: &amp;quot;UC Davis&amp;quot;, &amp;quot;undergraduate&amp;quot;: &amp;quot;Univ.</description>
    </item>
    
    <item>
      <title>Display Scientific Notation As Floats</title>
      <link>/python/basics/display_scientific_notation_as_floats/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/display_scientific_notation_as_floats/</guid>
      <description>Create Values # Create a numbers in scientific notation value_scientific_notation = 6.32000000e-03 # Create a vector of numbers in scientific notation vector_scientific_notation = [6.32000000e-03, 1.80000000e+01, 2.31000000e+00, 0.00000000e+00, 5.38000000e-01, 6.57500000e+00, 6.52000000e+01, 4.09000000e+00, 1.00000000e+00, 2.96000000e+02, 1.53000000e+01, 3.96900000e+02, 4.98000000e+00] Display Values As Floats # Display value as a float &amp;#39;{:f}&amp;#39;.format(value_scientific_notation) &#39;0.006320&#39;  # Display vector values as floats [&amp;#39;{:f}&amp;#39;.format(x) for x in vector_scientific_notation] [&#39;0.006320&#39;, &#39;18.000000&#39;, &#39;2.310000&#39;, &#39;0.000000&#39;, &#39;0.538000&#39;, &#39;6.575000&#39;, &#39;65.200000&#39;, &#39;4.090000&#39;, &#39;1.000000&#39;, &#39;296.</description>
    </item>
    
    <item>
      <title>Drilling Down With Beautiful Soup</title>
      <link>/python/web_scraping/beautiful_soup_drill_down/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/web_scraping/beautiful_soup_drill_down/</guid>
      <description>Preliminaries # Import required modules import requests from bs4 import BeautifulSoup import pandas as pd Download the HTML and create a Beautiful Soup object # Create a variable with the URL to this tutorial url = &amp;#39;http://en.wikipedia.org/wiki/List_of_A_Song_of_Ice_and_Fire_characters&amp;#39; # Scrape the HTML at the url r = requests.get(url) # Turn the HTML into a Beautiful Soup object soup = BeautifulSoup(r.text, &amp;#34;lxml&amp;#34;) If we looked at the soup object, we&amp;rsquo;d see that the names we want are in a heirarchical list.</description>
    </item>
    
    <item>
      <title>Dropping Rows And Columns In pandas Dataframe</title>
      <link>/python/data_wrangling/pandas_dropping_column_and_rows/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_dropping_column_and_rows/</guid>
      <description>Import modules import pandas as pd Create a dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    name reports year     Cochice Jason 4 2012   Pima Molly 24 2012   Santa Cruz Tina 31 2013   Maricopa Jake 2 2014   Yuma Amy 3 2014     Drop an observation (row) df.</description>
    </item>
    
    <item>
      <title>Enumerate A List</title>
      <link>/python/data_wrangling/enumerate_a_list/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/enumerate_a_list/</guid>
      <description># Create a list of strings data = [&amp;#39;One&amp;#39;,&amp;#39;Two&amp;#39;,&amp;#39;Three&amp;#39;,&amp;#39;Four&amp;#39;,&amp;#39;Five&amp;#39;]# For each item in the enumerated variable, data for item in enumerate(data): # Print the whole enumerated element print(item) # Print only the value (not the index number) print(item[1]) (0, &#39;One&#39;) One (1, &#39;Two&#39;) Two (2, &#39;Three&#39;) Three (3, &#39;Four&#39;) Four (4, &#39;Five&#39;) Five  </description>
    </item>
    
    <item>
      <title>Exiting A Loop</title>
      <link>/python/basics/exiting_a_loop/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/exiting_a_loop/</guid>
      <description>Create A List # Create a list: armies = [&amp;#39;Red Army&amp;#39;, &amp;#39;Blue Army&amp;#39;, &amp;#39;Green Army&amp;#39;] Breaking Out Of A For Loop for army in armies: print(army) if army == &amp;#39;Blue Army&amp;#39;: print(&amp;#39;Blue Army Found! Stopping.&amp;#39;) break Red Army Blue Army Blue Army Found! Stopping.  Notice that the loop stopped after the conditional if statement was satisfied.
Exiting If Loop Completed A loop will exit when completed, but using an else statement we can add an action at the conclusion of the loop if it hasn&amp;rsquo;t been exited earlier.</description>
    </item>
    
    <item>
      <title>Expand Cells Containing Lists Into Their Own Variables In Pandas</title>
      <link>/python/data_wrangling/pandas_expand_cells_containing_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_expand_cells_containing_lists/</guid>
      <description># import pandas import pandas as pd# create a dataset raw_data = {&amp;#39;score&amp;#39;: [1,2,3], &amp;#39;tags&amp;#39;: [[&amp;#39;apple&amp;#39;,&amp;#39;pear&amp;#39;,&amp;#39;guava&amp;#39;],[&amp;#39;truck&amp;#39;,&amp;#39;car&amp;#39;,&amp;#39;plane&amp;#39;],[&amp;#39;cat&amp;#39;,&amp;#39;dog&amp;#39;,&amp;#39;mouse&amp;#39;]]} df = pd.DataFrame(raw_data, columns = [&amp;#39;score&amp;#39;, &amp;#39;tags&amp;#39;]) # view the dataset df    score tags     0 1 [apple, pear, guava]   1 2 [truck, car, plane]   2 3 [cat, dog, mouse]     # expand df.tags into its own dataframe tags = df[&amp;#39;tags&amp;#39;].apply(pd.Series) # rename each variable is tags tags = tags.</description>
    </item>
    
    <item>
      <title>Filter pandas Dataframes</title>
      <link>/python/data_wrangling/filter_dataframes/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/filter_dataframes/</guid>
      <description>Import modules import pandas as pd Create Dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;coverage&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    coverage name reports year     Cochice 25 Jason 4 2012   Pima 94 Molly 24 2012   Santa Cruz 57 Tina 31 2013   Maricopa 62 Jake 2 2014   Yuma 70 Amy 3 2014     View Column df[&amp;#39;name&amp;#39;] Cochice Jason Pima Molly Santa Cruz Tina Maricopa Jake Yuma Amy Name: name, dtype: object  View Two Columns df[[&amp;#39;name&amp;#39;, &amp;#39;reports&amp;#39;]]   .</description>
    </item>
    
    <item>
      <title>Find Largest Value In A Dataframe Column</title>
      <link>/python/data_wrangling/pandas_find_largest_value_in_column/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_find_largest_value_in_column/</guid>
      <description># import modules %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np# Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Molly Jacobson 52 24 94   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     # Index of the row with the highest value in the preTestScore column df[&amp;#39;preTestScore&amp;#39;].</description>
    </item>
    
    <item>
      <title>Find The Max Value In A Dictionary</title>
      <link>/python/basics/find_the_max_value_in_a_dictionary/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/find_the_max_value_in_a_dictionary/</guid>
      <description> Create A Dictionary ages = {&amp;#39;John&amp;#39;: 21, &amp;#39;Mike&amp;#39;: 52, &amp;#39;Sarah&amp;#39;: 12, &amp;#39;Bob&amp;#39;: 43 } Find The Maximum Value Of The Values max(zip(ages.values(), ages.keys())) (52, &#39;Mike&#39;)  </description>
    </item>
    
    <item>
      <title>Find Unique Values In Pandas Dataframes</title>
      <link>/python/data_wrangling/pandas_find_unique_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_find_unique_values/</guid>
      <description>import pandas as pd import numpy as npraw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;51st&amp;#39;, &amp;#39;29th&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;19th&amp;#39;, &amp;#39;12th&amp;#39;, &amp;#39;101st&amp;#39;, &amp;#39;90th&amp;#39;, &amp;#39;30th&amp;#39;, &amp;#39;193th&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;94th&amp;#39;, &amp;#39;91th&amp;#39;], &amp;#39;trucks&amp;#39;: [&amp;#39;MAZ-7310&amp;#39;, np.nan, &amp;#39;MAZ-7310&amp;#39;, &amp;#39;MAZ-7310&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;ZIS-150&amp;#39;, &amp;#39;Tatra 810&amp;#39;, &amp;#39;ZIS-150&amp;#39;, &amp;#39;ZIS-150&amp;#39;], &amp;#39;tanks&amp;#39;: [&amp;#39;Merkava Mark 4&amp;#39;, &amp;#39;Merkava Mark 4&amp;#39;, &amp;#39;Merkava Mark 4&amp;#39;, &amp;#39;Leopard 2A6M&amp;#39;, &amp;#39;Leopard 2A6M&amp;#39;, &amp;#39;Leopard 2A6M&amp;#39;, &amp;#39;Arjun MBT&amp;#39;, &amp;#39;Leopard 2A6M&amp;#39;, &amp;#39;Arjun MBT&amp;#39;, &amp;#39;Arjun MBT&amp;#39;, &amp;#39;Arjun MBT&amp;#39;, &amp;#39;Arjun MBT&amp;#39;], &amp;#39;aircraft&amp;#39;: [&amp;#39;none&amp;#39;, &amp;#39;none&amp;#39;, &amp;#39;none&amp;#39;, &amp;#39;Harbin Z-9&amp;#39;, &amp;#39;Harbin Z-9&amp;#39;, &amp;#39;none&amp;#39;, &amp;#39;Harbin Z-9&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;, &amp;#39;SH-60B Seahawk&amp;#39;]} df = pd.</description>
    </item>
    
    <item>
      <title>Flatten Lists Of Lists</title>
      <link>/python/basics/flatten_list_of_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/flatten_list_of_lists/</guid>
      <description># Create a list containing three lists of names list_of_lists = [[&amp;#39;Amy&amp;#39;,&amp;#39;Betty&amp;#39;,&amp;#39;Cathryn&amp;#39;,&amp;#39;Dana&amp;#39;], [&amp;#39;Elizabeth&amp;#39;,&amp;#39;Fay&amp;#39;,&amp;#39;Gora&amp;#39;], [&amp;#39;Heidi&amp;#39;,&amp;#39;Jane&amp;#39;,&amp;#39;Kayley&amp;#39;]]# For each element in list_of_lists, take each element in the list flattened_list = [i for row in list_of_lists for i in row]# View the flattened list flattened_list [&#39;Amy&#39;, &#39;Betty&#39;, &#39;Cathryn&#39;, &#39;Dana&#39;, &#39;Elizabeth&#39;, &#39;Fay&#39;, &#39;Gora&#39;, &#39;Heidi&#39;, &#39;Jane&#39;, &#39;Kayley&#39;]  </description>
    </item>
    
    <item>
      <title>For Loop</title>
      <link>/python/basics/for_loops/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/for_loops/</guid>
      <description># One at a time, assign each value of the sequence to i and, for i in [432, 342, 928, 920]: # multiply i by 10 and store the product in a new variable, x create a new variable, x, x = i * 10 # print the value of x print(x) # after the entire sequence processes, else: # print this print(&amp;#39;All done!&amp;#39;) 4320 3420 9280 9200 All done!  </description>
    </item>
    
    <item>
      <title>Formatting Numbers</title>
      <link>/python/basics/formatting_numbers/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/formatting_numbers/</guid>
      <description> Create A Long Number annual_revenue = 9282904.9282872782 Format Number # Format rounded to two decimal places format(annual_revenue, &amp;#39;0.2f&amp;#39;) &#39;9282904.93&#39;  # Format with commas and rounded to one decimal place format(annual_revenue, &amp;#39;0,.1f&amp;#39;) &#39;9,282,904.9&#39;  # Format as scientific notation format(annual_revenue, &amp;#39;e&amp;#39;) &#39;9.282905e+06&#39;  # Format as scientific notation rounded to two deciminals format(annual_revenue, &amp;#39;0.2E&amp;#39;) &#39;9.28E+06&#39;  </description>
    </item>
    
    <item>
      <title>Function Annotation Examples</title>
      <link>/python/basics/function_annotation_examples/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/function_annotation_examples/</guid>
      <description> Create A Function With Annotations &amp;#39;&amp;#39;&amp;#39; Create a function. The argument &amp;#39;text&amp;#39; is the string to print with the default value &amp;#39;default string&amp;#39; and the argument The argument &amp;#39;n&amp;#39; is an integer of times to print with the default value of 1. The function should return a string. &amp;#39;&amp;#39;&amp;#39; def print_text(text:&amp;#39;string to print&amp;#39;=&amp;#39;default string&amp;#39;, n:&amp;#39;integer, times to print&amp;#39;=1) -&amp;gt; str: return text * n Run The Function # Run the function with arguments print_text(&amp;#39;string&amp;#39;, 4) &#39;stringstringstringstring&#39;  # Run the function with default arguments print_text() &#39;default string&#39;  </description>
    </item>
    
    <item>
      <title>Function Basics</title>
      <link>/python/basics/function_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/function_basics/</guid>
      <description>Create Function Called print_max def print_max(x, y): # if a is larger than b if x &amp;gt; y: # then print this print(x, &amp;#39;is maximum&amp;#39;) # if a is equal to b elif x == y: # print this print(x, &amp;#39;is equal to&amp;#39;, y) # otherwise else: # print this print(y, &amp;#39;is maximum&amp;#39;) Run Function With Two Arguments print_max(3,4) 4 is maximum  Note: By default, variables created within functions are local to the function.</description>
    </item>
    
    <item>
      <title>Functions Vs. Generators</title>
      <link>/python/basics/functions_vs_generators/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/functions_vs_generators/</guid>
      <description>Create A Function # Create a function that def function(names): # For each name in a list of names for name in names: # Returns the name return name# Create a variable of that function students = function([&amp;#39;Abe&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Christina&amp;#39;, &amp;#39;Derek&amp;#39;, &amp;#39;Eleanor&amp;#39;])# Run the function students &#39;Abe&#39;  Now we have a problem, we were only returned the name of the first student. Why? Because the function only ran the for name in names iteration once!</description>
    </item>
    
    <item>
      <title>Generate Tweets Using Markov Chains</title>
      <link>/python/other/generate_tweets_using_markov_chain/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/other/generate_tweets_using_markov_chain/</guid>
      <description>Preliminaries import markovify Load Corpus The corpus I am using is just one I found online. The corpus you choose is central to generating realistic text.
# Get raw text as string with open(&amp;#34;brown.txt&amp;#34;) as f: text = f.read() Build Markov Chain # Build the model. text_model = markovify.Text(text) Generate One Tweet # Print three randomly-generated sentences of no more than 140 characters for i in range(3): print(text_model.make_short_sentence(140)) Within a month, calls were still productive and most devotees of baseball attended the dozens of them.</description>
    </item>
    
    <item>
      <title>Generating Random Numbers With NumPy</title>
      <link>/python/basics/generating_random_numbers_with_numpy/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/generating_random_numbers_with_numpy/</guid>
      <description> Import Numpy import numpy as np Generate A Random Number From The Normal Distribution np.random.normal() 0.5661104974399703  Generate Four Random Numbers From The Normal Distribution np.random.normal(size=4) array([-1.03175853, 1.2867365 , -0.23560103, -1.05225393])  Generate Four Random Numbers From The Uniform Distribution np.random.uniform(size=4) array([ 0.00193123, 0.51932356, 0.87656884, 0.33684494])  Generate Four Random Integers Between 1 and 100 np.random.randint(low=1, high=100, size=4) array([96, 25, 94, 77])  </description>
    </item>
    
    <item>
      <title>Generator Expressions</title>
      <link>/python/basics/generator_expressions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/generator_expressions/</guid>
      <description># Create a list of students students = [&amp;#39;Abe&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Christina&amp;#39;, &amp;#39;Derek&amp;#39;, &amp;#39;Eleanor&amp;#39;]# Create a generator expression that yields lower-case versions of the student&amp;#39;s names lowercase_names = (student.lower() for student in students)# View the generator object lowercase_names &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x104837518&amp;gt;  # Get the next name lower-cased next(lowercase_names) &#39;abe&#39;  # Get the next name lower-cased next(lowercase_names) &#39;bob&#39;  # Get the remaining names lower-cased list(lowercase_names) [&#39;christina&#39;, &#39;derek&#39;, &#39;eleanor&#39;]  </description>
    </item>
    
    <item>
      <title>Geocoding And Reverse Geocoding</title>
      <link>/python/data_wrangling/geocoding_and_reverse_geocoding/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/geocoding_and_reverse_geocoding/</guid>
      <description>Geocoding (converting a physical address or location into latitude/longitude) and reverse geocoding (converting a lat/long to a physical address or location) are common tasks when working with geo-data.
Python offers a number of packages to make the task incredibly easy. In the tutorial below, I use pygeocoder, a wrapper for Google&amp;rsquo;s geo-API, to both geocode and reverse geocode.
Preliminaries First we want to load the packages we will want to use in the script.</description>
    </item>
    
    <item>
      <title>Geolocate A City And Country</title>
      <link>/python/data_wrangling/geolocate_a_city_and_country/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/geolocate_a_city_and_country/</guid>
      <description>This tutorial creates a function that attempts to take a city and country and return its latitude and longitude. But when the city is unavailable (which is often be the case), the returns the latitude and longitude of the center of the country.
Preliminaries from geopy.geocoders import Nominatim geolocator = Nominatim() import numpy as np Create Geolocation Function def geolocate(city=None, country=None): &amp;#39;&amp;#39;&amp;#39; Inputs city and country, or just country. Returns the lat/long coordinates of either the city if possible, if not, then returns lat/long of the center of the country.</description>
    </item>
    
    <item>
      <title>Geolocate A City Or Country</title>
      <link>/python/data_wrangling/geolocate_a_city_or_country/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/geolocate_a_city_or_country/</guid>
      <description>This tutorial creates a function that attempts to take a city and country and return its latitude and longitude. But when the city is unavailable (which is often be the case), the returns the latitude and longitude of the center of the country.
Preliminaries from geopy.geocoders import Nominatim geolocator = Nominatim() import numpy as np Create Geolocation Function def geolocate(city=None, country=None): &amp;#39;&amp;#39;&amp;#39; Inputs city and country, or just country. Returns the lat/long coordinates of either the city if possible, if not, then returns lat/long of the center of the country.</description>
    </item>
    
    <item>
      <title>Group A Time Series With pandas</title>
      <link>/python/data_wrangling/pandas_group_by_time/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_group_by_time/</guid>
      <description>Import required modules import pandas as pd import numpy as np Create a dataframe df = pd.DataFrame() df[&amp;#39;german_army&amp;#39;] = np.random.randint(low=20000, high=30000, size=100) df[&amp;#39;allied_army&amp;#39;] = np.random.randint(low=20000, high=40000, size=100) df.index = pd.date_range(&amp;#39;1/1/2014&amp;#39;, periods=100, freq=&amp;#39;H&amp;#39;) df.head()    german_army allied_army     2014-01-01 00:00:00 28755 33938   2014-01-01 01:00:00 25176 28631   2014-01-01 02:00:00 23261 39685   2014-01-01 03:00:00 28686 27756   2014-01-01 04:00:00 24588 25681     Truncate the dataframe df.</description>
    </item>
    
    <item>
      <title>Group Bar Plot In MatPlotLib</title>
      <link>/python/data_visualization/matplotlib_grouped_bar_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_grouped_bar_plot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;pre_score&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;mid_score&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;post_score&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;pre_score&amp;#39;, &amp;#39;mid_score&amp;#39;, &amp;#39;post_score&amp;#39;]) df   first_name pre_score mid_score post_score     0  Jason  4  25  5   1  Molly  24  94  43   2  Tina  31  57  23   3  Jake  2  62  23   4  Amy  3  70  51     Make plot # Setting the positions and width for the bars pos = list(range(len(df[&amp;#39;pre_score&amp;#39;]))) width = 0.</description>
    </item>
    
    <item>
      <title>Group Data By Time</title>
      <link>/python/data_wrangling/pandas_group_data_by_time/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_group_data_by_time/</guid>
      <description>On March 13, 2016, version 0.18.0 of Pandas was released, with significant changes in how the resampling function operates. This tutorial follows v0.18.0 and will not work for previous versions of pandas.
First let&amp;rsquo;s load the modules we care about
Preliminaries # Import required packages import pandas as pd import datetime import numpy as np Next, let&amp;rsquo;s create some sample data that we can group by time as an sample.</description>
    </item>
    
    <item>
      <title>Group Pandas Data By Hour Of The Day</title>
      <link>/python/data_wrangling/group_pandas_data_by_hour_of_the_day/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/group_pandas_data_by_hour_of_the_day/</guid>
      <description>Preliminaries # Import libraries import pandas as pd import numpy as np Create Data # Create a time series of 2000 elements, one very five minutes starting on 1/1/2000 time = pd.date_range(&amp;#39;1/1/2000&amp;#39;, periods=2000, freq=&amp;#39;5min&amp;#39;) # Create a pandas series with a random values between 0 and 100, using &amp;#39;time&amp;#39; as the index series = pd.Series(np.random.randint(100, size=2000), index=time) View Data # View the first few rows of the data series[0:10] 2000-01-01 00:00:00 40 2000-01-01 00:05:00 13 2000-01-01 00:10:00 99 2000-01-01 00:15:00 72 2000-01-01 00:20:00 4 2000-01-01 00:25:00 36 2000-01-01 00:30:00 24 2000-01-01 00:35:00 20 2000-01-01 00:40:00 83 2000-01-01 00:45:00 44 Freq: 5T, dtype: int64  Group Data By Time Of The Day # Group the data by the index&amp;#39;s hour value, then aggregate by the average series.</description>
    </item>
    
    <item>
      <title>Grouping Rows In pandas</title>
      <link>/python/data_wrangling/pandas_group_rows_by/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_group_rows_by/</guid>
      <description># Import modules import pandas as pd# Example dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Hard Wrapping Text</title>
      <link>/python/basics/hard_wrapping_text/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/hard_wrapping_text/</guid>
      <description>Preliminaries import textwrap Create Text # Create some text excerpt = &amp;#39;Then there was the bad weather. It would come in one day when the fall was over. We would have to shut the windows in the night against the rain and the cold wind would strip the leaves from the trees in the Place Contrescarpe. The leaves lay sodden in the rain and the wind drove the rain against the big green autobus at the terminal and the Café des Amateurs was crowded and the windows misted over from the heat and the smoke inside.</description>
    </item>
    
    <item>
      <title>Hierarchical Data In pandas</title>
      <link>/python/data_wrangling/pandas_hierarchical_data/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_hierarchical_data/</guid>
      <description># import modules import pandas as pd# Create dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Histograms In MatPlotLib</title>
      <link>/python/data_visualization/matplotlib_histogram/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_histogram/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np import math # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create dataframe df = pd.read_csv(&amp;#39;https://www.dropbox.com/s/52cb7kcflr8qm2u/5kings_battles_v1.csv?dl=1&amp;#39;) df.head()   name year battle_number attacker_king defender_king attacker_1 attacker_2 attacker_3 attacker_4 defender_1 defender_2 defender_3 defender_4 attacker_outcome battle_type major_death major_capture attacker_size defender_size attacker_commander defender_commander summer location region note     0  Battle of the Golden Tooth  298  1  Joffrey/Tommen Baratheon  Robb Stark  Lannister  NaN  NaN  NaN  Tully  NaN NaN NaN  win  pitched battle  1  0  15000  4000  Jaime Lannister  Clement Piper, Vance  1  Golden Tooth  The Westerlands  NaN   1  Battle at the Mummer&#39;s Ford  298  2  Joffrey/Tommen Baratheon  Robb Stark  Lannister  NaN  NaN  NaN  Baratheon  NaN NaN NaN  win  ambush  1  0  NaN  120  Gregor Clegane  Beric Dondarrion  1  Mummer&#39;s Ford  The Riverlands  NaN   2  Battle of Riverrun  298  3  Joffrey/Tommen Baratheon  Robb Stark  Lannister  NaN  NaN  NaN  Tully  NaN NaN NaN  win  pitched battle  0  1  15000  10000  Jaime Lannister, Andros Brax  Edmure Tully, Tytos Blackwood  1  Riverrun  The Riverlands  NaN   3  Battle of the Green Fork  298  4  Robb Stark  Joffrey/Tommen Baratheon  Stark  NaN  NaN  NaN  Lannister  NaN NaN NaN  loss  pitched battle  1  1  18000  20000  Roose Bolton, Wylis Manderly, Medger Cerwyn, H.</description>
    </item>
    
    <item>
      <title>How To Use Default Dicts</title>
      <link>/python/basics/how_to_use_default_dicts/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/how_to_use_default_dicts/</guid>
      <description> Preliminaries import collections Create A DefaultDict Default Dicts work just like regular dictionaries, except a key is called that doesn&amp;rsquo;t have a value, a default value (note: value, not key) is supplied.
# Create a defaultdict with the default value of 0 (int&amp;#39;s default value is 0) arrests = collections.defaultdict(int)  Add A New Key With A Value # Add an entry of a person with 10 arrests arrests[&amp;#39;Sarah Miller&amp;#39;] = 10# View dictionary arrests defaultdict(int, {&#39;Sarah Miller&#39;: 10})  Add A New Key Without A Value # Add an entry of a person with no value for arrests, # thus the default value is used arrests[&amp;#39;Bill James&amp;#39;] 0  # View dictionary arrests defaultdict(int, {&#39;Bill James&#39;: 0, &#39;Sarah Miller&#39;: 10})  </description>
    </item>
    
    <item>
      <title>If Else On Any Or All Elements</title>
      <link>/python/basics/ifelse_on_any_or_all_elements/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/ifelse_on_any_or_all_elements/</guid>
      <description>Preliminaries # import pandas as pd import pandas as pd Create a simulated dataset # Create an example dataframe data = {&amp;#39;score&amp;#39;: [1,2,3,4,5]} df = pd.DataFrame(data) df   score     0 1   1 2   2 3   3 4   4 5     Does any cell equal 3? # If any element in df.score equals three, if (df.</description>
    </item>
    
    <item>
      <title>Indexing And Slicing NumPy Arrays</title>
      <link>/python/basics/indexing_and_slicing_numpy_arrays/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/indexing_and_slicing_numpy_arrays/</guid>
      <description>Slicing Arrays Explanation Of Broadcasting Unlike many other data types, slicing an array into a new variable means that any chances to that new variable are broadcasted to the original variable. Put other way, a slice is a hotlink to the original array variable, not a seperate and independent copy of it.
# Import Modules import numpy as np# Create an array of battle casualties from the first to the last battle battleDeaths = np.</description>
    </item>
    
    <item>
      <title>Indexing And Slicing NumPy Arrays</title>
      <link>/python/basics/numpy_indexing_and_slicing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/numpy_indexing_and_slicing/</guid>
      <description># Import modules import numpy as np# Create a 2x2 array battle_deaths = [[344, 2345], [253, 4345]] deaths = np.array(battle_deaths) deaths array([[ 344, 2345], [ 253, 4345]])  # Select the top row, second item deaths[0, 1] 2345  # Select the second column deaths[:, 1] array([2345, 4345])  # Select the second row deaths[1, :] array([ 253, 4345])  # Create an array of civilian deaths civilian_deaths = np.array([4352, 233, 3245, 256, 2394]) civilian_deaths array([4352, 233, 3245, 256, 2394])  # Find the index of battles with less than 500 deaths few_civ_deaths = np.</description>
    </item>
    
    <item>
      <title>Iterate An Ifelse Over A List</title>
      <link>/python/basics/iterate_ifelse_over_list/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/iterate_ifelse_over_list/</guid>
      <description> Create some data word_list = [&amp;#39;Egypt&amp;#39;, &amp;#39;Watching&amp;#39;, &amp;#39;Eleanor&amp;#39;] vowels = [&amp;#39;A&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;I&amp;#39;, &amp;#39;O&amp;#39;, &amp;#39;U&amp;#39;] Create a for loop # for each item in the word_list, for word in word_list: # if any word starts with e, where e is vowels, if any([word.startswith(e) for e in vowels]): # then print is valid, print(&amp;#39;Is valid&amp;#39;) # if not,  else: # print invalid print(&amp;#39;Invalid&amp;#39;) Is valid Invalid Is valid  </description>
    </item>
    
    <item>
      <title>Iterate Over Multiple Lists Simultaneously</title>
      <link>/python/basics/iterate_over_multiple_lists_simultaneously/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/iterate_over_multiple_lists_simultaneously/</guid>
      <description> Create Two Lists names = [&amp;#39;James&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Sarah&amp;#39;, &amp;#39;Marco&amp;#39;, &amp;#39;Nancy&amp;#39;, &amp;#39;Sally&amp;#39;] ages = [42, 13, 14, 25, 63, 23] Iterate Over Both Lists At Once for name, age in zip(names, ages): print(name, age) James 42 Bob 13 Sarah 14 Marco 25 Nancy 63 Sally 23  </description>
    </item>
    
    <item>
      <title>Iterating Over Dictionary Keys</title>
      <link>/python/basics/iterating_over_dictionary_keys/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/iterating_over_dictionary_keys/</guid>
      <description>Create A Dictionary Officers = {&amp;#39;Michael Mulligan&amp;#39;: &amp;#39;Red Army&amp;#39;, &amp;#39;Steven Johnson&amp;#39;: &amp;#39;Blue Army&amp;#39;, &amp;#39;Jessica Billars&amp;#39;: &amp;#39;Green Army&amp;#39;, &amp;#39;Sodoni Dogla&amp;#39;: &amp;#39;Purple Army&amp;#39;, &amp;#39;Chris Jefferson&amp;#39;: &amp;#39;Orange Army&amp;#39;}Officers {&#39;Chris Jefferson&#39;: &#39;Orange Army&#39;, &#39;Jessica Billars&#39;: &#39;Green Army&#39;, &#39;Michael Mulligan&#39;: &#39;Red Army&#39;, &#39;Sodoni Dogla&#39;: &#39;Purple Army&#39;, &#39;Steven Johnson&#39;: &#39;Blue Army&#39;}  Use Dictionary Comprehension # Display all dictionary entries where the key doesn&amp;#39;t start with &amp;#39;Chris&amp;#39; {keys : Officers[keys] for keys in Officers if not keys.</description>
    </item>
    
    <item>
      <title>Join And Merge Pandas Dataframe</title>
      <link>/python/data_wrangling/pandas_join_merge_dataframe/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_join_merge_dataframe/</guid>
      <description>import modules import pandas as pd from IPython.display import display from IPython.display import Image Create a dataframe raw_data = { &amp;#39;subject_id&amp;#39;: [&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;], &amp;#39;first_name&amp;#39;: [&amp;#39;Alex&amp;#39;, &amp;#39;Amy&amp;#39;, &amp;#39;Allen&amp;#39;, &amp;#39;Alice&amp;#39;, &amp;#39;Ayoung&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Anderson&amp;#39;, &amp;#39;Ackerman&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Aoni&amp;#39;, &amp;#39;Atiches&amp;#39;]} df_a = pd.DataFrame(raw_data, columns = [&amp;#39;subject_id&amp;#39;, &amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;]) df_a    subject_id first_name last_name     0 1 Alex Anderson   1 2 Amy Ackerman   2 3 Allen Ali   3 4 Alice Aoni   4 5 Ayoung Atiches     Create a second dataframe raw_data = { &amp;#39;subject_id&amp;#39;: [&amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;], &amp;#39;first_name&amp;#39;: [&amp;#39;Billy&amp;#39;, &amp;#39;Brian&amp;#39;, &amp;#39;Bran&amp;#39;, &amp;#39;Bryce&amp;#39;, &amp;#39;Betty&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Bonder&amp;#39;, &amp;#39;Black&amp;#39;, &amp;#39;Balwner&amp;#39;, &amp;#39;Brice&amp;#39;, &amp;#39;Btisan&amp;#39;]} df_b = pd.</description>
    </item>
    
    <item>
      <title>Lambda Functions</title>
      <link>/python/basics/lambda_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/lambda_functions/</guid>
      <description> In Python, it is possible to string lambda functions together.
Create a series, called pipeline, that contains three mini functions pipeline = [lambda x: x **2 - 1 + 5, lambda x: x **20 - 2 + 3, lambda x: x **200 - 1 + 4] For each item in pipeline, run the lambda function with x = 3 for f in pipeline: print(f(3)) 13 3486784402 265613988875874769338781322035779626829233452653394495974574961739092490901302182994384699044004  </description>
    </item>
    
    <item>
      <title>List Unique Values In A pandas Column</title>
      <link>/python/data_wrangling/pandas_list_unique_values_in_column/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_list_unique_values_in_column/</guid>
      <description>Special thanks to Bob Haffner for pointing out a better way of doing it.
Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe # Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3]} df = pd.</description>
    </item>
    
    <item>
      <title>Load A JSON File Into Pandas</title>
      <link>/python/data_wrangling/load_json_file_into_pandas/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/load_json_file_into_pandas/</guid>
      <description> Preliminaries # Load library import pandas as pd Load JSON File # Create URL to JSON file (alternatively this can be a filepath) url = &amp;#39;https://raw.githubusercontent.com/chrisalbon/simulated_datasets/master/data.json&amp;#39; # Load the first sheet of the JSON file into a data frame df = pd.read_json(url, orient=&amp;#39;columns&amp;#39;) # View the first ten rows df.head(10)   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    category datetime integer     0 0 2015-01-01 00:00:00 5   1 0 2015-01-01 00:00:01 5   10 0 2015-01-01 00:00:10 5   11 0 2015-01-01 00:00:11 5   12 0 2015-01-01 00:00:12 8   13 0 2015-01-01 00:00:13 9   14 0 2015-01-01 00:00:14 8   15 0 2015-01-01 00:00:15 8   16 0 2015-01-01 00:00:16 2   17 0 2015-01-01 00:00:17 1     </description>
    </item>
    
    <item>
      <title>Load An Excel File Into Pandas</title>
      <link>/python/data_wrangling/load_excel_file_into_pandas/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/load_excel_file_into_pandas/</guid>
      <description> Preliminaries # Load library import pandas as pd Load Excel File # Create URL to Excel file (alternatively this can be a filepath) url = &amp;#39;https://raw.githubusercontent.com/chrisalbon/simulated_datasets/master/data.xlsx&amp;#39; # Load the first sheet of the Excel file into a data frame df = pd.read_excel(url, sheetname=0, header=1) # View the first ten rows df.head(10)   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    5 2015-01-01 00:00:00 0     0 5 2015-01-01 00:00:01 0   1 9 2015-01-01 00:00:02 0   2 6 2015-01-01 00:00:03 0   3 6 2015-01-01 00:00:04 0   4 9 2015-01-01 00:00:05 0   5 7 2015-01-01 00:00:06 0   6 1 2015-01-01 00:00:07 0   7 6 2015-01-01 00:00:08 0   8 9 2015-01-01 00:00:09 0   9 5 2015-01-01 00:00:10 0     </description>
    </item>
    
    <item>
      <title>Load Excel Spreadsheet As pandas Dataframe</title>
      <link>/python/data_wrangling/pandas_dataframe_load_xls/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_dataframe_load_xls/</guid>
      <description># import modules import pandas as pd# Import the excel file and call it xls_file xls_file = pd.ExcelFile(&amp;#39;../data/example.xls&amp;#39;) xls_file &amp;lt;pandas.io.excel.ExcelFile at 0x111912be0&amp;gt;  # View the excel file&amp;#39;s sheet names xls_file.sheet_names [&#39;Sheet1&#39;]  # Load the xls file&amp;#39;s Sheet1 as a dataframe df = xls_file.parse(&amp;#39;Sheet1&amp;#39;) df    year deaths_attacker deaths_defender soldiers_attacker soldiers_defender wounded_attacker wounded_defender     0 1945 425 423 2532 37235 41 14   1 1956 242 264 6346 2523 214 1424   2 1964 323 1231 3341 2133 131 131   3 1969 223 23 6732 1245 12 12   4 1971 783 23 12563 2671 123 34   5 1981 436 42 2356 7832 124 124   6 1982 324 124 253 2622 264 1124   7 1992 3321 631 5277 3331 311 1431   8 1999 262 232 2732 2522 132 122   9 2004 843 213 6278 26773 623 2563     </description>
    </item>
    
    <item>
      <title>Loading A CSV Into pandas</title>
      <link>/python/data_wrangling/pandas_dataframe_importing_csv/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_dataframe_importing_csv/</guid>
      <description>import modules import pandas as pd import numpy as np Create dataframe (that we will be importing) raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#34;.&amp;#34;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, &amp;#34;.&amp;#34;, &amp;#34;.&amp;#34;], &amp;#39;postTestScore&amp;#39;: [&amp;#34;25,000&amp;#34;, &amp;#34;94,000&amp;#34;, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .</description>
    </item>
    
    <item>
      <title>Logical Operations</title>
      <link>/python/basics/logical_operations/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/logical_operations/</guid>
      <description>Create some simulated variables x = 6y = 9z = 12 x or y x or y 6  x and y x and y 9  not x not x False  x is equal to y x == y False  x is not equal to y x != y True  One is less than two 1 &amp;lt; 2 True  Two is less than or equal to four 2 &amp;lt;= 4 True  Three is equal to five 3 == 5 False  Three is not equal to four 3 !</description>
    </item>
    
    <item>
      <title>Long To Wide Format</title>
      <link>/python/data_wrangling/pandas_long_to_wide/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_long_to_wide/</guid>
      <description>import modules import pandas as pd Create &amp;ldquo;long&amp;rdquo; dataframe raw_data = {&amp;#39;patient&amp;#39;: [1, 1, 1, 2, 2], &amp;#39;obs&amp;#39;: [1, 2, 3, 1, 2], &amp;#39;treatment&amp;#39;: [0, 1, 0, 1, 0], &amp;#39;score&amp;#39;: [6252, 24243, 2345, 2342, 23525]} df = pd.DataFrame(raw_data, columns = [&amp;#39;patient&amp;#39;, &amp;#39;obs&amp;#39;, &amp;#39;treatment&amp;#39;, &amp;#39;score&amp;#39;]) df    patient obs treatment score     0 1 1 0 6252   1 1 2 1 24243   2 1 3 0 2345   3 2 1 1 2342   4 2 2 0 23525     Make a &amp;ldquo;wide&amp;rdquo; data Now we will create a &amp;ldquo;wide&amp;rdquo; dataframe with the rows by patient number, the columns being by observation number, and the cell values being the score values.</description>
    </item>
    
    <item>
      <title>Looping Over Two Lists</title>
      <link>/python/basics/looping_over_two_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/looping_over_two_lists/</guid>
      <description># Create a list of length 3: armies = [&amp;#39;Red Army&amp;#39;, &amp;#39;Blue Army&amp;#39;, &amp;#39;Green Army&amp;#39;] # Create a list of length 4: units = [&amp;#39;Red Infantry&amp;#39;, &amp;#39;Blue Armor&amp;#39;,&amp;#39;Green Artillery&amp;#39;,&amp;#39;Orange Aircraft&amp;#39;]# For each element in the first list, for army, unit in zip(armies, units): # Display the corresponding index element of the second list: print(army, &amp;#39;has the following options:&amp;#39;, unit) Red Army has the following options: Red Infantry Blue Army has the following options: Blue Armor Green Army has the following options: Green Artillery  Notice that the fourth item of the second list, orange aircraft, did not display.</description>
    </item>
    
    <item>
      <title>Lower Case Column Names In Pandas Dataframe</title>
      <link>/python/data_wrangling/pandas_lowercase_column_names/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_lowercase_column_names/</guid>
      <description>Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe # Create an example dataframe data = {&amp;#39;NAME&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;YEAR&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;REPORTS&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df    NAME REPORTS YEAR     Cochice Jason 4 2012   Pima Molly 24 2012   Santa Cruz Tina 31 2013   Maricopa Jake 2 2014   Yuma Amy 3 2014     Lowercase column values # Map the lowering function to all column names df.</description>
    </item>
    
    <item>
      <title>Make New Columns Using Functions</title>
      <link>/python/data_wrangling/pandas_make_new_columns_using_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_make_new_columns_using_functions/</guid>
      <description># Import modules import pandas as pd# Example dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;, &amp;#39;Jacon&amp;#39;, &amp;#39;Ryaner&amp;#39;, &amp;#39;Sone&amp;#39;, &amp;#39;Sloan&amp;#39;, &amp;#39;Piger&amp;#39;, &amp;#39;Riani&amp;#39;, &amp;#39;Ali&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70, 25, 94, 57, 62, 70, 62, 70]} df = pd.</description>
    </item>
    
    <item>
      <title>Making A Matplotlib Scatterplot From A Pandas Dataframe</title>
      <link>/python/data_visualization/matplotlib_scatterplot_from_pandas/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_scatterplot_from_pandas/</guid>
      <description>import modules %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;female&amp;#39;: [0, 1, 1, 0, 1], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;female&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df   .</description>
    </item>
    
    <item>
      <title>Map External Values To Dataframe Values in pandas</title>
      <link>/python/data_wrangling/pandas_map_values_to_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_map_values_to_values/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;city&amp;#39;: [&amp;#39;San Francisco&amp;#39;, &amp;#39;Baltimore&amp;#39;, &amp;#39;Miami&amp;#39;, &amp;#39;Douglas&amp;#39;, &amp;#39;Boston&amp;#39;]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;city&amp;#39;]) df    first_name last_name age city     0 Jason Miller 42 San Francisco   1 Molly Jacobson 52 Baltimore   2 Tina Ali 36 Miami   3 Jake Milner 24 Douglas   4 Amy Cooze 73 Boston     Create a dictionary of values city_to_state = { &amp;#39;San Francisco&amp;#39; : &amp;#39;California&amp;#39;, &amp;#39;Baltimore&amp;#39; : &amp;#39;Maryland&amp;#39;, &amp;#39;Miami&amp;#39; : &amp;#39;Florida&amp;#39;, &amp;#39;Douglas&amp;#39; : &amp;#39;Arizona&amp;#39;, &amp;#39;Boston&amp;#39; : &amp;#39;Massachusetts&amp;#39;} Map the values of the city_to_state dictionary to the values in the city variable df[&amp;#39;state&amp;#39;] = df[&amp;#39;city&amp;#39;].</description>
    </item>
    
    <item>
      <title>Mathematical Operations</title>
      <link>/python/basics/math_operations/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/math_operations/</guid>
      <description>Import the math module import math Display the value of pi. math.pi 3.141592653589793  Display the value of e. math.e 2.718281828459045  Sine, cosine, and tangent math.sin(2 * math.pi / 180) 0.03489949670250097  Exponent 2 ** 4, pow(2, 4) (16, 16)  Absolute value abs(-20) 20  Summation sum((1, 2, 3, 4)) 10  Minimum min(3, 9, 10, 12) 3  Maximum max(3, 5, 10, 15) 15  Floor math.</description>
    </item>
    
    <item>
      <title>Matplotlib, A Simple Example</title>
      <link>/python/data_visualization/matplotlib_simple_example/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_simple_example/</guid>
      <description> Tell Jupyter to load matplotlib and display all visuals created inline (that is, on this page) %matplotlib inline Import matplotlib&amp;rsquo;s pyplot module import matplotlib.pyplot as pyplot Create a simple plot pyplot.plot([1.6, 2.7]) [&amp;lt;matplotlib.lines.Line2D at 0x10c4e7978&amp;gt;]  </description>
    </item>
    
    <item>
      <title>Mine Twitter&#39;s Stream For Hashtags Or Words</title>
      <link>/python/other/mine_a_twitter_hashtags_and_words/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/other/mine_a_twitter_hashtags_and_words/</guid>
      <description>This is a script which monitor&amp;rsquo;s Twitter for tweets containing certain hashtags, words, or phrases. When one of those appears, it saves that tweet, and the user&amp;rsquo;s information to a csv file. A similar version of this script is available on GitHub here. The main difference between the code presented here and the repo is that here I am added extensive comments in the code explaining what is happening. Also, the code below runs as a Jupyter notebook.</description>
    </item>
    
    <item>
      <title>Missing Data In pandas Dataframes</title>
      <link>/python/data_wrangling/pandas_missing_data/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_missing_data/</guid>
      <description>import modules import pandas as pd import numpy as np Create dataframe with missing values raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, np.nan, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, np.nan, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, np.nan, 36, 24, 73], &amp;#39;sex&amp;#39;: [&amp;#39;m&amp;#39;, np.nan, &amp;#39;f&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;f&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, np.nan, np.nan, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, np.nan, np.nan, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;sex&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age sex preTestScore postTestScore     0 Jason Miller 42.</description>
    </item>
    
    <item>
      <title>Mocking Functions</title>
      <link>/python/basics/mocking_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/mocking_functions/</guid>
      <description>Preliminaries import unittest import mock from math import exp The Scenario Imagine we have a function that takes in some external API or database and we want to test that function, but with fake (or mocked) inputs. The Python mock library lets us do that.
For this tutorial pretend that math.exp is some expensive operation (e.g. database query, API call, etc) that costs \$10,000 every time we use it. To test it without paying \$10,000, we can create mock_function which imitates the behavior of math.</description>
    </item>
    
    <item>
      <title>Monitor A Website For Changes With Python</title>
      <link>/python/web_scraping/monitor_a_website/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/web_scraping/monitor_a_website/</guid>
      <description>In this snippet, we create a continous loop that, at set times, scrapes a website, checks to see if it contains some text and if so, emails me. Specifically I used this script to find when Venture Beat had published an article about my company.
It should be noted that there are more efficient ways of setting scripts to run at certain times, notable cron. However, this is a quick and dirty solution.</description>
    </item>
    
    <item>
      <title>Moving Averages In pandas</title>
      <link>/python/data_wrangling/pandas_moving_average/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_moving_average/</guid>
      <description>Import Modules # Import pandas import pandas as pd Create Dataframe # Create data data = {&amp;#39;score&amp;#39;: [1,1,1,2,2,2,3,3,3]} # Create dataframe df = pd.DataFrame(data) # View dataframe df   .dataframe thead tr:only-child th { text-align: right; } .dataframe thead th { text-align: left; } .dataframe tbody tr th { vertical-align: top; }    score     0 1   1 1   2 1   3 2   4 2   5 2   6 3   7 3   8 3     Calculate Rolling Mean # Calculate the moving average.</description>
    </item>
    
    <item>
      <title>Nested For Loops Using List Comprehension</title>
      <link>/python/basics/nested_for_loops_using_list_comprehension/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/nested_for_loops_using_list_comprehension/</guid>
      <description># Create two lists squads = [&amp;#34;1st Squad&amp;#34;, &amp;#39;2nd Squad&amp;#39;, &amp;#39;3rd Squad&amp;#39;] regiments = [&amp;#34;51st Regiment&amp;#34;, &amp;#39;15th Regiment&amp;#39;, &amp;#39;12th Regiment&amp;#39;]# Create a tuple for each regiment in regiments, for each squad in sqauds [(regiment, squad) for regiment in regiments for squad in squads ] [(&#39;51st Regiment&#39;, &#39;1st Squad&#39;), (&#39;51st Regiment&#39;, &#39;2nd Squad&#39;), (&#39;51st Regiment&#39;, &#39;3rd Squad&#39;), (&#39;15th Regiment&#39;, &#39;1st Squad&#39;), (&#39;15th Regiment&#39;, &#39;2nd Squad&#39;), (&#39;15th Regiment&#39;, &#39;3rd Squad&#39;), (&#39;12th Regiment&#39;, &#39;1st Squad&#39;), (&#39;12th Regiment&#39;, &#39;2nd Squad&#39;), (&#39;12th Regiment&#39;, &#39;3rd Squad&#39;)]  </description>
    </item>
    
    <item>
      <title>Nesting Lists</title>
      <link>/python/basics/nesting_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/nesting_lists/</guid>
      <description># Create a list of three nested lists, each with three items state_regions = [[&amp;#39;California&amp;#39;, &amp;#39;Oregon&amp;#39;, &amp;#39;Washington&amp;#39;], [&amp;#39;Texas&amp;#39;,&amp;#39;Georgia&amp;#39;,&amp;#39;Alabama&amp;#39;], [&amp;#39;Maine&amp;#39;,&amp;#39;Vermont&amp;#39;,&amp;#39;New York&amp;#39;]]# View the list state_regions [[&#39;California&#39;, &#39;Oregon&#39;, &#39;Washington&#39;], [&#39;Texas&#39;, &#39;Georgia&#39;, &#39;Alabama&#39;], [&#39;Maine&#39;, &#39;Vermont&#39;, &#39;New York&#39;]]  # Print the second list&amp;#39;s third item state_regions[1][2] &#39;Alabama&#39;  </description>
    </item>
    
    <item>
      <title>Normalize A Column In pandas</title>
      <link>/python/data_wrangling/pandas_normalize_column/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_normalize_column/</guid>
      <description>Preliminaries # Import required modules import pandas as pd from sklearn import preprocessing # Set charts to view inline %matplotlib inline Create Unnormalized Data # Create an example dataframe with a column of unnormalized data data = {&amp;#39;score&amp;#39;: [234,24,14,27,-74,46,73,-18,59,160]} df = pd.DataFrame(data) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    score     0 234   1 24   2 14   3 27   4 -74   5 46   6 73   7 -18   8 59   9 160     # View the unnormalized data df[&amp;#39;score&amp;#39;].</description>
    </item>
    
    <item>
      <title>Numpy Array Basics</title>
      <link>/python/basics/numpy_array_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/numpy_array_basics/</guid>
      <description># Import modules import numpy as np# Create a list battle_deaths = [3246, 326, 2754, 2547, 2457, 3456] battle_deaths [3246, 326, 2754, 2547, 2457, 3456]  # Create an array from numpy deaths = np.array(battle_deaths) deaths array([3246, 326, 2754, 2547, 2457, 3456])  # Create an array of zeros defectors = np.zeros(6) defectors array([ 0., 0., 0., 0., 0., 0.])  # Create a range from 0 to 100 zero_to_99 = np.</description>
    </item>
    
    <item>
      <title>Parallel Processing</title>
      <link>/python/basics/parallel_processing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/parallel_processing/</guid>
      <description>This tutorial is inspired by Chris Kiehl&amp;rsquo;s great post on multiprocessing.
Preliminaries from multiprocessing import Pool from multiprocessing.dummy import Pool as ThreadPool  Create Some Data # Create a list of some data data = range(29999) Create An Operation To Execute On The Data # Create a function that takes a data point def some_function(datum): # and returns the datum raised to the power of itself return datum**datum Traditional Approach %%time # Create an empty for the results results = [] # For each value in the data for datum in data: # Append the output of the function when applied to that datum results.</description>
    </item>
    
    <item>
      <title>Partial Function Applications</title>
      <link>/python/basics/partial_function_applications/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/partial_function_applications/</guid>
      <description> Partial function application allows us to create &amp;ldquo;functions&amp;rdquo; from other functions with pre-filled arguments. This can be very useful when we want to pipe the output of one function into a function requiring two functions.
Preliminaries from functools import partial Create A Function def multiply(x, y): return x * y Create A Function With Y Pre-Filled double = partial(multiply, y=2) Run The Partial Function double(3) 6  </description>
    </item>
    
    <item>
      <title>Pie Chart In MatPlotLib</title>
      <link>/python/data_visualization/matplotlib_pie_chart/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_pie_chart/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt Create dataframe raw_data = {&amp;#39;officer_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;jan_arrests&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;feb_arrests&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;march_arrests&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;officer_name&amp;#39;, &amp;#39;jan_arrests&amp;#39;, &amp;#39;feb_arrests&amp;#39;, &amp;#39;march_arrests&amp;#39;]) df    officer_name jan_arrests feb_arrests march_arrests     0 Jason 4 25 5   1 Molly 24 94 43   2 Tina 31 57 23   3 Jake 2 62 23   4 Amy 3 70 51     # Create a column with the total arrests for each officer df[&amp;#39;total_arrests&amp;#39;] = df[&amp;#39;jan_arrests&amp;#39;] + df[&amp;#39;feb_arrests&amp;#39;] + df[&amp;#39;march_arrests&amp;#39;] df    officer_name jan_arrests feb_arrests march_arrests total_arrests     0 Jason 4 25 5 34   1 Molly 24 94 43 161   2 Tina 31 57 23 111   3 Jake 2 62 23 87   4 Amy 3 70 51 124     Make plot # Create a list of colors (from iWantHue) colors = [&amp;#34;#E13F29&amp;#34;, &amp;#34;#D69A80&amp;#34;, &amp;#34;#D63B59&amp;#34;, &amp;#34;#AE5552&amp;#34;, &amp;#34;#CB5C3B&amp;#34;, &amp;#34;#EB8076&amp;#34;, &amp;#34;#96624E&amp;#34;] # Create a pie chart plt.</description>
    </item>
    
    <item>
      <title>Pivot Tables In pandas</title>
      <link>/python/data_wrangling/pandas_pivot_tables/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_pivot_tables/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;regiment&amp;#39;: [&amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Nighthawks&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Dragoons&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;, &amp;#39;Scouts&amp;#39;], &amp;#39;company&amp;#39;: [&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;,&amp;#39;1st&amp;#39;, &amp;#39;1st&amp;#39;, &amp;#39;2nd&amp;#39;, &amp;#39;2nd&amp;#39;], &amp;#39;TestScore&amp;#39;: [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3]} df = pd.DataFrame(raw_data, columns = [&amp;#39;regiment&amp;#39;, &amp;#39;company&amp;#39;, &amp;#39;TestScore&amp;#39;]) df    regiment company TestScore     0 Nighthawks 1st 4   1 Nighthawks 1st 24   2 Nighthawks 2nd 31   3 Nighthawks 2nd 2   4 Dragoons 1st 3   5 Dragoons 1st 4   6 Dragoons 2nd 24   7 Dragoons 2nd 31   8 Scouts 1st 2   9 Scouts 1st 3   10 Scouts 2nd 2   11 Scouts 2nd 3     Create a pivot table of group means, by company and regiment pd.</description>
    </item>
    
    <item>
      <title>Priority Queues</title>
      <link>/python/basics/priority_queues/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/priority_queues/</guid>
      <description>Preliminaries import heapq Create A Priority Queue Object # Create a priority queue abstract base class class priority_queue: # Initialize the instance def __init__(self): # Create a list to use as the queue self._queue = [] # Create an index to use as ordering self._index = 0 # Create a function to add a task to the queue def add_task(self, item, priority): # Push the arguments to the _queue using a heap heapq.</description>
    </item>
    
    <item>
      <title>Queues And Stacks</title>
      <link>/python/basics/queues_and_stacks/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/queues_and_stacks/</guid>
      <description>Preliminaries from collections import deque Make A Queue # Option 1: Make a queue queue = deque(range(10)) # Option 2: Make a queue that, if full, discards any item at the  # opposite end to where you added an item. queue = deque(range(10), maxlen=10) Manipulate Queue # Append an item to the right queue.append(&amp;#39;A&amp;#39;) # View queue queue deque([1, 2, 3, 4, 5, 6, 7, 8, 9, &#39;A&#39;])  # Append an item to the left queue.</description>
    </item>
    
    <item>
      <title>Quickly Change A Column Of Strings In Pandas</title>
      <link>/python/data_wrangling/pandas_change_column_of_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_change_column_of_strings/</guid>
      <description>Often I need or want to change the case of all items in a column of strings (e.g. BRAZIL to Brazil, etc.). There are many ways to accomplish this but I have settled on this one as the easiest and quickest.
# Import pandas import pandas as pd # Create a list of first names first_names = pd.Series([&amp;#39;Steve Murrey&amp;#39;, &amp;#39;Jane Fonda&amp;#39;, &amp;#39;Sara McGully&amp;#39;, &amp;#39;Mary Jane&amp;#39;])# print the column first_names 0 Steve Murrey 1 Jane Fonda 2 Sara McGully 3 Mary Jane dtype: object  # print the column with lower case first_names.</description>
    </item>
    
    <item>
      <title>Random Sampling Dataframe</title>
      <link>/python/data_wrangling/pandas_sampling_dataframe/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_sampling_dataframe/</guid>
      <description>import modules import pandas as pd import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Molly Jacobson 52 24 94   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     Select a random subset of 2 without replacement df.</description>
    </item>
    
    <item>
      <title>Ranking Rows Of Pandas Dataframes</title>
      <link>/python/data_wrangling/pandas_dataframe_ranking_rows/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_dataframe_ranking_rows/</guid>
      <description># import modules import pandas as pd# Create dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;coverage&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df   coverage name reports year     Cochice  25  Jason  4  2012   Pima  94  Molly  24  2012   Santa Cruz  57  Tina  31  2013   Maricopa  62  Jake  2  2014   Yuma  70  Amy  3  2014    5 rows × 4 columns</description>
    </item>
    
    <item>
      <title>Recursive Functions</title>
      <link>/python/basics/recursive_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/recursive_functions/</guid>
      <description> Simple factorial print(5*4*3*2*1) 120  Recursive function The tell-tale sign of a recursive function is a function that calls itself
# Create a function inputing n, that, def factorial(n): # if n is less than or equal to 1, if n &amp;lt;= 1: # return n, return n # if not, return n multiplied by the output # of the factorial function of one less than n return n*factorial(n-1) # run the function factorial(5) 120  </description>
    </item>
    
    <item>
      <title>Regular Expression Basics</title>
      <link>/python/data_wrangling/regular_expressions_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/regular_expressions_basics/</guid>
      <description>Import the regex (re) package import re Import sys import sys Create a simple text string. text = &amp;#39;The quick brown fox jumped over the lazy black bear.&amp;#39; Create a pattern to match three_letter_word = &amp;#39;\w{3}&amp;#39; Convert the string into a regex object pattern_re = re.compile(three_letter_word); pattern_re re.compile(r&#39;\w{3}&#39;, re.UNICODE)  Does a three letter word appear in text? re_search = re.search(&amp;#39;..own&amp;#39;, text) If the search query is at all true, if re_search: # Print the search results print(re_search.</description>
    </item>
    
    <item>
      <title>Regular Expression By Example</title>
      <link>/python/data_wrangling/regex_by_example/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/regex_by_example/</guid>
      <description># Import regex import re# Create some data text = &amp;#39;A flock of 120 quick brown foxes jumped over 30 lazy brown, bears.&amp;#39; ^ Matches beginning of line. re.findall(&amp;#39;^A&amp;#39;, text) [&#39;A&#39;]  $ Matches end of line. re.findall(&amp;#39;bears.$&amp;#39;, text) [&#39;bears.&#39;]  . Matches any single character except newline. re.findall(&amp;#39;f..es&amp;#39;, text) [&#39;foxes&#39;]  [...] Matches any single character in brackets. # Find all vowels re.findall(&amp;#39;[aeiou]&amp;#39;, text) [&#39;o&#39;, &#39;o&#39;, &#39;u&#39;, &#39;i&#39;, &#39;o&#39;, &#39;o&#39;, &#39;e&#39;, &#39;u&#39;, &#39;e&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;, &#39;o&#39;, &#39;e&#39;, &#39;a&#39;]  [# ^.</description>
    </item>
    
    <item>
      <title>Reindexing pandas Series And Dataframes</title>
      <link>/python/data_wrangling/pandas_dataframe_reindexing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_dataframe_reindexing/</guid>
      <description>Series # Import Modules import pandas as pd import numpy as np# Create a pandas series of the risk of fire in Southern Arizona brushFireRisk = pd.Series([34, 23, 12, 23], index = [&amp;#39;Bisbee&amp;#39;, &amp;#39;Douglas&amp;#39;, &amp;#39;Sierra Vista&amp;#39;, &amp;#39;Tombstone&amp;#39;]) brushFireRisk Bisbee 34 Douglas 23 Sierra Vista 12 Tombstone 23 dtype: int64  # Reindex the series and create a new series variable brushFireRiskReindexed = brushFireRisk.reindex([&amp;#39;Tombstone&amp;#39;, &amp;#39;Douglas&amp;#39;, &amp;#39;Bisbee&amp;#39;, &amp;#39;Sierra Vista&amp;#39;, &amp;#39;Barley&amp;#39;, &amp;#39;Tucson&amp;#39;]) brushFireRiskReindexed Tombstone 23.</description>
    </item>
    
    <item>
      <title>Rename Column Headers In pandas</title>
      <link>/python/data_wrangling/pandas_rename_column_headers/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_rename_column_headers/</guid>
      <description>Originally from rgalbo on StackOverflow.
Preliminaries # Import required modules import pandas as pd Create example data # Create a values as dictionary of lists raw_data = {&amp;#39;0&amp;#39;: [&amp;#39;first_name&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;1&amp;#39;: [&amp;#39;last_name&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;2&amp;#39;: [&amp;#39;age&amp;#39;, 52, 36, 24, 73], &amp;#39;3&amp;#39;: [&amp;#39;preTestScore&amp;#39;, 24, 31, 2, 3]} # Create a dataframe df = pd.DataFrame(raw_data) # View a dataframe df    0 1 2 3     0 first_name last_name age preTestScore   1 Molly Jacobson 52 24   2 Tina Ali 36 31   3 Jake Milner 24 2   4 Amy Cooze 73 3     Replace the header value with the first row&amp;rsquo;s values # Create a new variable called &amp;#39;header&amp;#39; from the first row of the dataset header = df.</description>
    </item>
    
    <item>
      <title>Rename Multiple pandas Dataframe Column Names</title>
      <link>/python/data_wrangling/pandas_rename_multiple_columns/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_rename_multiple_columns/</guid>
      <description>Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe # Create an example dataframe data = {&amp;#39;Commander&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;Date&amp;#39;: [&amp;#39;2012, 02, 08&amp;#39;, &amp;#39;2012, 02, 08&amp;#39;, &amp;#39;2012, 02, 08&amp;#39;, &amp;#39;2012, 02, 08&amp;#39;, &amp;#39;2012, 02, 08&amp;#39;], &amp;#39;Score&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df    Commander Date Score     Cochice Jason 2012, 02, 08 4   Pima Molly 2012, 02, 08 24   Santa Cruz Tina 2012, 02, 08 31   Maricopa Jake 2012, 02, 08 2   Yuma Amy 2012, 02, 08 3     Rename Column Names df.</description>
    </item>
    
    <item>
      <title>Replacing Values In pandas</title>
      <link>/python/data_wrangling/pandas_replace_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_replace_values/</guid>
      <description>import modules import pandas as pd import numpy as np Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [-999, -999, -999, 2, 1], &amp;#39;postTestScore&amp;#39;: [2, 2, -999, 2, -999]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 -999 2   1 Molly Jacobson 52 -999 2   2 Tina Ali 36 -999 -999   3 Jake Milner 24 2 2   4 Amy Cooze 73 1 -999     Replace all values of -999 with NAN df.</description>
    </item>
    
    <item>
      <title>Saving A pandas Dataframe As A CSV</title>
      <link>/python/data_wrangling/pandas_saving_dataframe_as_csv/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_saving_dataframe_as_csv/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Molly Jacobson 52 24 94   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     Save the dataframe called &amp;ldquo;df&amp;rdquo; as csv Note: I&amp;rsquo;ve commented out this line of code so it does not run.</description>
    </item>
    
    <item>
      <title>Scatterplot In MatPlotLib</title>
      <link>/python/data_visualization/matplotlib_simple_scatterplot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_simple_scatterplot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt import numpy as np # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create dataframe df = pd.read_csv(&amp;#39;https://raw.githubusercontent.com/chrisalbon/war_of_the_five_kings_dataset/master/5kings_battles_v1.csv&amp;#39;) df.head()    name year battle_number attacker_king defender_king attacker_1 attacker_2 attacker_3 attacker_4 defender_1 defender_2 defender_3 defender_4 attacker_outcome battle_type major_death major_capture attacker_size defender_size attacker_commander defender_commander summer location region note     0 Battle of the Golden Tooth 298 1 Joffrey/Tommen Baratheon Robb Stark Lannister NaN NaN NaN Tully NaN NaN NaN win pitched battle 1.</description>
    </item>
    
    <item>
      <title>Scheduling Jobs In The Future</title>
      <link>/python/basics/schedule_run_in_the_future/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/schedule_run_in_the_future/</guid>
      <description># Import required modules import sched import time # setup the scheduler with our time settings s = sched.scheduler(time.time, time.sleep)# Create a function we want to run in the future. def print_time(): print(&amp;#34;Executive Order 66&amp;#34;)# Create a function for the delay def print_some_times(): # Create a scheduled job that will run # the function called &amp;#39;print_time&amp;#39; # after 10 seconds, and with priority 1. s.enter(10, 1, print_time) # Run the scheduler s.</description>
    </item>
    
    <item>
      <title>Search A pandas Column For A Value</title>
      <link>/python/data_wrangling/pandas_search_column_for_value/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_search_column_for_value/</guid>
      <description># Import modules import pandas as pdraw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Jason&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Miller&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 42, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 4, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 25, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Jason Miller 42 4 25   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     Find where a value exists in a column # View preTestscore where postTestscore is greater than 50 df[&amp;#39;preTestScore&amp;#39;].</description>
    </item>
    
    <item>
      <title>Select Random Element From A List</title>
      <link>/python/basics/select_random_element_from_list/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/select_random_element_from_list/</guid>
      <description> Preliminaries from random import choice Create List # Make a list of crew members crew_members = [&amp;#39;Steve&amp;#39;, &amp;#39;Stacy&amp;#39;, &amp;#39;Miller&amp;#39;, &amp;#39;Chris&amp;#39;, &amp;#39;Bill&amp;#39;, &amp;#39;Jack&amp;#39;] Select Random Item From List # Choose a random crew member choice(crew_members) &#39;Stacy&#39;  </description>
    </item>
    
    <item>
      <title>Select Rows When Columns Contain Certain Values</title>
      <link>/python/data_wrangling/pandas_select_rows_when_column_has_certain_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_select_rows_when_column_has_certain_values/</guid>
      <description>Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe # Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df    name reports year     Cochice Jason 4 2012   Pima Molly 24 2012   Santa Cruz Tina 31 2013   Maricopa Jake 2 2014   Yuma Amy 3 2014     Grab rows based on column values value_list = [&amp;#39;Tina&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Jason&amp;#39;]#Grab DataFrame rows where column has certain values df[df.</description>
    </item>
    
    <item>
      <title>Select Rows With A Certain Value</title>
      <link>/python/data_wrangling/pandas_select_rows_containing_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_select_rows_containing_values/</guid>
      <description>import pandas as pd# Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;], &amp;#39;country&amp;#39;: [[&amp;#39;Syria&amp;#39;, &amp;#39;Lebanon&amp;#39;],[&amp;#39;Spain&amp;#39;, &amp;#39;Morocco&amp;#39;]]} df = pd.DataFrame(data) df    country name     0 [Syria, Lebanon] Jason   1 [Spain, Morocco] Molly     df[df[&amp;#39;country&amp;#39;].map(lambda country: &amp;#39;Syria&amp;#39; in country)]    country name     0 [Syria, Lebanon] Jason     </description>
    </item>
    
    <item>
      <title>Select Rows With Multiple Filters</title>
      <link>/python/data_wrangling/pandas_select_rows_multiple_filters/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_select_rows_multiple_filters/</guid>
      <description># import pandas as pd import pandas as pd# Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;], &amp;#39;score&amp;#39;: [1,2,3,4,5]} df = pd.DataFrame(data) df    name score     0 A 1   1 B 2   2 C 3   3 D 4   4 E 5     # Select rows of the dataframe where df.</description>
    </item>
    
    <item>
      <title>Selecting Items In A List With Filters</title>
      <link>/python/basics/filter_items_in_list_with_filter/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/filter_items_in_list_with_filter/</guid>
      <description># Create an list of items denoting the number of soldiers in each regiment, view the list regimentSize = (5345, 6436, 3453, 2352, 5212, 6232, 2124, 3425, 1200, 1000, 1211); regimentSize (5345, 6436, 3453, 2352, 5212, 6232, 2124, 3425, 1200, 1000, 1211)  One-line Method This line of code does the same thing as the multiline method below, it is just more compact (but also more complicated to understand.</description>
    </item>
    
    <item>
      <title>Selecting pandas DataFrame Rows Based On Conditions</title>
      <link>/python/data_wrangling/pandas_selecting_rows_on_conditions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_selecting_rows_on_conditions/</guid>
      <description>Preliminaries # Import modules import pandas as pd import numpy as np# Create a dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, np.nan, np.nan, np.nan], &amp;#39;nationality&amp;#39;: [&amp;#39;USA&amp;#39;, &amp;#39;USA&amp;#39;, &amp;#39;France&amp;#39;, &amp;#39;UK&amp;#39;, &amp;#39;UK&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;nationality&amp;#39;, &amp;#39;age&amp;#39;]) df    first_name nationality age     0 Jason USA 42   1 Molly USA 52   2 NaN France 36   3 NaN UK 24   4 NaN UK 70     Method 1: Using Boolean Variables # Create variable with TRUE if nationality is USA american = df[&amp;#39;nationality&amp;#39;] == &amp;#34;USA&amp;#34; # Create variable with TRUE if age is greater than 50 elderly = df[&amp;#39;age&amp;#39;] &amp;gt; 50 # Select all cases where nationality is USA and age is greater than 50 df[american &amp;amp; elderly]    first_name nationality age     1 Molly USA 52     Method 2: Using variable attributes # Select all cases where the first name is not missing and nationality is USA  df[df[&amp;#39;first_name&amp;#39;].</description>
    </item>
    
    <item>
      <title>Set The Color Of A Matplotlib Plot</title>
      <link>/python/basics/set_the_color_of_a_matplotlib/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/set_the_color_of_a_matplotlib/</guid>
      <description>Import numpy and matplotlib.pyplot %matplotlib inline import numpy as np import matplotlib.pyplot as plt Create some simulated data. n = 100 r = 2 * np.random.rand(n) theta = 2 * np.pi * np.random.rand(n) area = 200 * r**2 * np.random.rand(n) colors = theta Create a scatterplot using the a colormap. Full list of colormaps: http://wiki.scipy.org/Cookbook/Matplotlib/Show_colormaps
c = plt.scatter(theta, r, c=colors, s=area, cmap=plt.cm.RdYlGn) c1 = plt.scatter(theta, r, c=colors, s=area, cmap=plt.cm.Blues) c2 = plt.</description>
    </item>
    
    <item>
      <title>Simple Clustering With SciPy</title>
      <link>/python/other/scipy_simple_clustering/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/other/scipy_simple_clustering/</guid>
      <description>Import modules import numpy as np %matplotlib inline import matplotlib.pyplot as plt from scipy.cluster import vq Create coordinates for battles for each year of the war # create 100 coordinate pairs (i.e. two values), then add 5 to all of them year_1 = np.random.randn(100, 2) + 5 # create 30 coordinatee pairs (i.e. two values), then subtract 5 to all of them year_2 = np.random.randn(30, 2) - 5 # create 50 coordinatee pairs (i.</description>
    </item>
    
    <item>
      <title>Simple Example Dataframes In pandas</title>
      <link>/python/data_wrangling/pandas_dataframe_examples/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_dataframe_examples/</guid>
      <description>import modules import pandas as pd Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;age&amp;#39;: [42, 52, 36, 24, 73], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;age&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name age preTestScore postTestScore     0 Jason Miller 42 4 25   1 Molly Jacobson 52 24 94   2 Tina Ali 36 31 57   3 Jake Milner 24 2 62   4 Amy Cooze 73 3 70     Create 2nd dataframe raw_data_2 = {&amp;#39;first_name&amp;#39;: [&amp;#39;Sarah&amp;#39;, &amp;#39;Gueniva&amp;#39;, &amp;#39;Know&amp;#39;, &amp;#39;Sara&amp;#39;, &amp;#39;Cat&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Mornig&amp;#39;, &amp;#39;Jaker&amp;#39;, &amp;#39;Alom&amp;#39;, &amp;#39;Ormon&amp;#39;, &amp;#39;Koozer&amp;#39;], &amp;#39;age&amp;#39;: [53, 26, 72, 73, 24], &amp;#39;preTestScore&amp;#39;: [13, 52, 72, 26, 26], &amp;#39;postTestScore&amp;#39;: [82, 52, 56, 234, 254]} df_2 = pd.</description>
    </item>
    
    <item>
      <title>Simple Unit Test</title>
      <link>/python/testing/simple_unit_test/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/testing/simple_unit_test/</guid>
      <description>Preliminaries import unittest import sys Create Function To Be Tested def multiply(x, y): return x * y Create Test Note: It is standard practice to name a unit test test_ + &amp;lt;function being tested&amp;gt;. This naming standard allows for automated test using some libraries.
# Create a test case class TestMultiply(unittest.TestCase): # Create the unit test def test_multiply_two_integers_together(self): # Test if 4 equals the output of multiply(2,2) self.assertEqual(4, multiply(2,2)) Run Test # Run the unit test (and don&amp;#39;t shut down the Jupyter Notebook) unittest.</description>
    </item>
    
    <item>
      <title>Sort A List Of Names By Last Name</title>
      <link>/python/basics/sort_a_list_by_last_name/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/sort_a_list_by_last_name/</guid>
      <description>Create a list of names commander_names = [&amp;#34;Alan Brooke&amp;#34;, &amp;#34;George Marshall&amp;#34;, &amp;#34;Frank Jack Fletcher&amp;#34;, &amp;#34;Conrad Helfrich&amp;#34;, &amp;#34;Albert Kesselring&amp;#34;]  Sort Alphabetically By Last Name To complete the sort, we will combine three operations:
 lambda x: x.split(&amp;quot; &amp;quot;), which is a function that takes a string x and breaks it up along each blank space. This outputs a list. [-1], which takes the last element of a list. sorted(), which sorts a list.</description>
    </item>
    
    <item>
      <title>Sort A List Of Strings By Length</title>
      <link>/python/basics/sort_a_list_of_strings_by_length/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/sort_a_list_of_strings_by_length/</guid>
      <description>Create a list of names commander_names = [&amp;#34;Alan Brooke&amp;#34;, &amp;#34;George Marshall&amp;#34;, &amp;#34;Frank Jack Fletcher&amp;#34;, &amp;#34;Conrad Helfrich&amp;#34;, &amp;#34;Albert Kesselring&amp;#34;]  Sort Alphabetically By Length To complete the sort, we will combine two operations:
 lambda x: len(x), which returns the length of each string. sorted(), which sorts a list.
# Sort a variable called &amp;#39;commander_names&amp;#39; by the length of each string sorted(commander_names, key=lambda x: len(x)) [&amp;lsquo;Alan Brooke&amp;rsquo;, &amp;lsquo;George Marshall&amp;rsquo;, &amp;lsquo;Conrad Helfrich&amp;rsquo;, &amp;lsquo;Albert Kesselring&amp;rsquo;, &amp;lsquo;Frank Jack Fletcher&amp;rsquo;]</description>
    </item>
    
    <item>
      <title>Sorting Rows In pandas Dataframes</title>
      <link>/python/data_wrangling/pandas_sorting_rows_dataframe/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_sorting_rows_dataframe/</guid>
      <description>import modules import pandas as pd Create dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [1, 2, 1, 2, 3], &amp;#39;coverage&amp;#39;: [2, 2, 3, 3, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df    coverage name reports year     Cochice 2 Jason 1 2012   Pima 2 Molly 2 2012   Santa Cruz 3 Tina 1 2013   Maricopa 3 Jake 2 2014   Yuma 3 Amy 3 2014     Sort the dataframe&amp;rsquo;s rows by reports, in descending order df.</description>
    </item>
    
    <item>
      <title>Split Lat/Long Coordinate Variables Into Seperate Variables</title>
      <link>/python/data_wrangling/pandas_split_lat_and_long_into_variables/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_split_lat_and_long_into_variables/</guid>
      <description>Preliminaries import pandas as pd import numpy as np Create an example dataframe raw_data = {&amp;#39;geo&amp;#39;: [&amp;#39;40.0024, -105.4102&amp;#39;, &amp;#39;40.0068, -105.266&amp;#39;, &amp;#39;39.9318, -105.2813&amp;#39;, np.nan]} df = pd.DataFrame(raw_data, columns = [&amp;#39;geo&amp;#39;]) df    geo     0 40.0024, -105.4102   1 40.0068, -105.266   2 39.9318, -105.2813   3 NaN     Split the geo variable into seperate lat and lon variables # Create two lists for the loop results to be placed lat = [] lon = [] # For each row in a varible, for row in df[&amp;#39;geo&amp;#39;]: # Try to, try: # Split the row by comma and append # everything before the comma to lat lat.</description>
    </item>
    
    <item>
      <title>Stacked Percentage Bar Plot In MatPlotLib</title>
      <link>/python/data_visualization/matplotlib_percentage_stacked_bar_plot/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_visualization/matplotlib_percentage_stacked_bar_plot/</guid>
      <description>Preliminaries %matplotlib inline import pandas as pd import matplotlib.pyplot as plt Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;pre_score&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;mid_score&amp;#39;: [25, 94, 57, 62, 70], &amp;#39;post_score&amp;#39;: [5, 43, 23, 23, 51]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;pre_score&amp;#39;, &amp;#39;mid_score&amp;#39;, &amp;#39;post_score&amp;#39;]) df    first_name pre_score mid_score post_score     0 Jason 4 25 5   1 Molly 24 94 43   2 Tina 31 57 23   3 Jake 2 62 23   4 Amy 3 70 51     Make plot # Create a figure with a single subplot f, ax = plt.</description>
    </item>
    
    <item>
      <title>Store API Credentials For Open Source Projects</title>
      <link>/python/basics/store_api_credentials_for_open_source_projects/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/store_api_credentials_for_open_source_projects/</guid>
      <description>One issue which repeated comes up is how to manage private API credentials when the project is available on GitHub. This is the method I use for my own projects. I store all credentials in a JSON file and tell gitignore to not upload that file. Then when I am running that code locally, load the API credentials from the JSON file.
Preliminaries import json Step 1: Create a JSON with the API credentials credentials = {&amp;#39;access_secret&amp;#39;: &amp;#39;392n39d93&amp;#39;, &amp;#39;access_token&amp;#39;: &amp;#39;sdf424f&amp;#39;, &amp;#39;consumer_key&amp;#39;: &amp;#39;sdf3223&amp;#39;, &amp;#39;consumer_secret&amp;#39;: &amp;#39;dsf2344&amp;#39;}with open(&amp;#39;credentials.</description>
    </item>
    
    <item>
      <title>Streaming Data Pipeline</title>
      <link>/python/data_wrangling/streaming_data_pipeline/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/streaming_data_pipeline/</guid>
      <description> Create Some Raw Data raw_data = [1,2,3,4,5,6,7,8,9,10] Create Data Processing Functions # Define a generator that yields input+6 def add_6(numbers): for x in numbers: output = x+6 yield output # Define a generator that yields input-2 def subtract_2(numbers): for x in numbers: output = x-2 yield output # Define a generator that yields input*100  def multiply_by_100(numbers): for x in numbers: output = x*100 yield output Create Data Pipeline # Step 1 of the pipeline step1 = add_6(raw_data) # Step 2 of the pipeline step2 = subtract_2(step1) # Step 3 of the pipeline pipeline = multiply_by_100(step2) Send First Two Pieces Of Raw Data Through Pipeline # First element of the raw data next(pipeline) 500  # Second element of the raw data next(pipeline) 600  Send All Raw Data Through Pipeline # Process all data for raw_data in pipeline: print(raw_data) 700 800 900 1000 1100 1200 1300 1400  </description>
    </item>
    
    <item>
      <title>String Formatting</title>
      <link>/python/basics/string_formatting/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/string_formatting/</guid>
      <description> Import the sys module import sys Print a string with 1 digit and one string. &amp;#39;This is %d%sbird!&amp;#39; % (1, &amp;#39;dead&amp;#39;) &#39;This is 1 dead bird!&#39;  Print a dictionary based string &amp;#39;%(number)dmore %(food)s&amp;#39; % {&amp;#39;number&amp;#39; : 1, &amp;#39;food&amp;#39; : &amp;#39;burger&amp;#39;} &#39;1 more burger&#39;  Print a string about my laptop. &amp;#39;My {1[kind]} runs {0.platform}&amp;#39;.format(sys, {&amp;#39;kind&amp;#39;: &amp;#39;laptop&amp;#39;}) &#39;My laptop runs darwin&#39;  String Formatting Codes  %s string %r repr string %c character (integer or string) %d decimal %i integer %x hex integer %X same as X but with uppercase %e floating point lowercase %E floating point uppercase %f floating point decimal lowercase %F floating point decimal uppercase %g floating point e or f %G floating point E or F %% literal %  </description>
    </item>
    
    <item>
      <title>String Indexing</title>
      <link>/python/basics/string_indexing/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/string_indexing/</guid>
      <description>Create a string string = &amp;#39;Strings are defined as ordered collections of characters.&amp;#39; Print the entire string string[:] &#39;Strings are defined as ordered collections of characters.&#39;  Print the first three characters string[0:3] &#39;Str&#39;  Print the first three characters string[:3] &#39;Str&#39;  Print the last three characters string[-3:] &#39;rs.&#39;  Print the third to fifth character string[2:5] &#39;rin&#39;  Print the first to the tenth character, skipping every other character string[0:10:2] &#39;Srnsa&#39;  Print the string in reverse string[::-1] &#39;.</description>
    </item>
    
    <item>
      <title>String Munging In Dataframe</title>
      <link>/python/data_wrangling/pandas_string_munging/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_string_munging/</guid>
      <description>import modules import pandas as pd import numpy as np import re as re Create dataframe raw_data = {&amp;#39;first_name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;last_name&amp;#39;: [&amp;#39;Miller&amp;#39;, &amp;#39;Jacobson&amp;#39;, &amp;#39;Ali&amp;#39;, &amp;#39;Milner&amp;#39;, &amp;#39;Cooze&amp;#39;], &amp;#39;email&amp;#39;: [&amp;#39;jas203@gmail.com&amp;#39;, &amp;#39;momomolly@gmail.com&amp;#39;, np.NAN, &amp;#39;battler@milner.com&amp;#39;, &amp;#39;Ames1234@yahoo.com&amp;#39;], &amp;#39;preTestScore&amp;#39;: [4, 24, 31, 2, 3], &amp;#39;postTestScore&amp;#39;: [25, 94, 57, 62, 70]} df = pd.DataFrame(raw_data, columns = [&amp;#39;first_name&amp;#39;, &amp;#39;last_name&amp;#39;, &amp;#39;email&amp;#39;, &amp;#39;preTestScore&amp;#39;, &amp;#39;postTestScore&amp;#39;]) df    first_name last_name email preTestScore postTestScore     0 Jason Miller jas203@gmail.</description>
    </item>
    
    <item>
      <title>String Operations</title>
      <link>/python/basics/string_operations/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/string_operations/</guid>
      <description>Python 3 has three string types
 str() is for unicode bytes() is for binary data bytesarray() mutable variable of bytes  Create some simulated text. string = &amp;#39;The quick brown fox jumped over the lazy brown bear.&amp;#39; Capitalize the first letter. string_capitalized = string.capitalize() string_capitalized &#39;The quick brown fox jumped over the lazy brown bear.&#39;  Center the string with periods on either side, for a total of 79 characters string_centered = string.</description>
    </item>
    
    <item>
      <title>Swapping Variable Values</title>
      <link>/python/basics/swapping_variable_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/swapping_variable_values/</guid>
      <description> Setup the originally variables and their values one = 1 two = 2 View the original variables &amp;#39;one =&amp;#39;, one, &amp;#39;two =&amp;#39;, two (&#39;one =&#39;, 1, &#39;two =&#39;, 2)  Swap the values one, two = two, one View the swapped values, notice how the values for each variable have changed &amp;#39;one =&amp;#39;, one, &amp;#39;two =&amp;#39;, two (&#39;one =&#39;, 2, &#39;two =&#39;, 1)  </description>
    </item>
    
    <item>
      <title>Test Code Speed</title>
      <link>/python/testing/test_code_speed/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/testing/test_code_speed/</guid>
      <description>Preliminaries import cProfile Create A Slow Function def slow_function(): total = 0.0 for i, _ in enumerate(range(10000)): for j, _ in enumerate(range(1, 10000)): total += (i * j) return total Test The Speed Of The Function cProfile.run(&amp;#39;slow_function()&amp;#39;, sort=&amp;#39;time&amp;#39;)  4 function calls in 13.291 seconds Ordered by: internal time ncalls tottime percall cumtime percall filename:lineno(function) 1 13.291 13.291 13.291 13.291 &amp;lt;ipython-input-2-64fc1cd43878&amp;gt;:1(slow_function) 1 0.000 0.000 13.291 13.291 {built-in method builtins.exec} 1 0.</description>
    </item>
    
    <item>
      <title>Test For A Specific Exception</title>
      <link>/python/testing/test_for_a_specific_exception/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/testing/test_for_a_specific_exception/</guid>
      <description>Preliminaries import unittest Create A Function To Test def add(x, y): return x + y Create Test Case # Create a test case class TestAdd(unittest.TestCase): # Create the unit test def test_input_string(self): # Test To make sure a TypeError exception is raised self.assertRaises(TypeError, add(&amp;#39;Banana&amp;#39;, &amp;#39;Boat&amp;#39;)) Run Test # Run the unit test (and don&amp;#39;t shut down the Jupyter Notebook) unittest.main(argv=[&amp;#39;ignored&amp;#39;, &amp;#39;-v&amp;#39;], exit=False) test_input_string (__main__.TestAdd) ... ok ---------------------------------------------------------------------- Ran 1 test in 0.</description>
    </item>
    
    <item>
      <title>Test If Output Is Close To A Value</title>
      <link>/python/testing/test_if_an_output_is_close_to_a_value/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/testing/test_if_an_output_is_close_to_a_value/</guid>
      <description>Preliminaries import unittest import sys Create Function To Be Tested def add(x, y): return x + y Create Test # Create a test case class TestAdd(unittest.TestCase): # Create the unit test def test_add_two_floats_roughly_equals_11(self): # Test if add(4.48293848, 6.5023845) return roughly (to 1 place) 11 (actual product: 10.98532298) self.assertAlmostEqual(11, add(4.48293848, 6.5023845), places=1) Run Test # Run the unit test (and don&amp;#39;t shut down the Jupyter Notebook) unittest.main(argv=[&amp;#39;ignored&amp;#39;, &amp;#39;-v&amp;#39;], exit=False) test_add_two_floats_roughly_equals_11 (__main__.</description>
    </item>
    
    <item>
      <title>Testable Documentation</title>
      <link>/python/testing/testable_documentation/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/testing/testable_documentation/</guid>
      <description>Preliminaries import doctest Create A Function To Test Note that our test cases are inside the function&amp;rsquo;s documentation. Each test case is marked by a &amp;gt;&amp;gt;&amp;gt; and the expect output is the line below.
def summation(a, b): &amp;#34;&amp;#34;&amp;#34; Takes two inputs and outputs their sum. Tests: &amp;gt;&amp;gt;&amp;gt; summation(5, 4) 9 &amp;gt;&amp;gt;&amp;gt; summation(4, 3) 7 &amp;gt;&amp;gt;&amp;gt; summation(&amp;#39;foo&amp;#39;,&amp;#39;bar&amp;#39;) &amp;#39;foobar&amp;#39; &amp;gt;&amp;gt;&amp;gt; summation(3,&amp;#39;d&amp;#39;) Traceback (most recent call last): ... TypeError: unsupported operand type(s) for +: &amp;#39;int&amp;#39; and &amp;#39;str&amp;#39; &amp;#34;&amp;#34;&amp;#34; return a + b Notice that in the last test, we are making sure the function outputs the correct error.</description>
    </item>
    
    <item>
      <title>Try, Except, and Finally</title>
      <link>/python/basics/try_except_finally/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/try_except_finally/</guid>
      <description>Create data # Create some data scores = [23,453,54,235,74,234] Try something that doesn&amp;rsquo;t work # Try to: try: # Add a list of integers and a string scores + &amp;#39;A string of characters.&amp;#39; # If you get an error, set the error as &amp;#39;e&amp;#39;, except Exception as e: # print the error, e print(&amp;#39;Error:&amp;#39;, e) # Then, finally: # print end program print(&amp;#39;End Program&amp;#39;) Error: can only concatenate list (not &amp;quot;str&amp;quot;) to list End Program  Try something that works # Try to: try: # Print scores print(&amp;#39;Worked!</description>
    </item>
    
    <item>
      <title>Unpacking A Tuple</title>
      <link>/python/basics/unpacking_a_tuple/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/unpacking_a_tuple/</guid>
      <description> Create List Of Tuples # Create a list of tuples where the first and second element of each  # super is the first last names, respectively soldiers = [(&amp;#39;Steve&amp;#39;, &amp;#39;Miller&amp;#39;), (&amp;#39;Stacy&amp;#39;, &amp;#39;Markov&amp;#39;), (&amp;#39;Sonya&amp;#39;, &amp;#39;Matthews&amp;#39;), (&amp;#39;Sally&amp;#39;, &amp;#39;Mako&amp;#39;)] Unpack Tuples # For the second element for each tuple in soldiers, for _, last_name in soldiers: # print the second element print(last_name) Miller Markov Matthews Mako  </description>
    </item>
    
    <item>
      <title>Unpacking Function Arguments</title>
      <link>/python/basics/unpacking_function_arguments/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/unpacking_function_arguments/</guid>
      <description> Create Argument Objects # Create a dictionary of arguments argument_dict = {&amp;#39;a&amp;#39;:&amp;#39;Alpha&amp;#39;, &amp;#39;b&amp;#39;:&amp;#39;Bravo&amp;#39;} # Create a list of arguments argument_list = [&amp;#39;Alpha&amp;#39;, &amp;#39;Bravo&amp;#39;] Create A Simple Function # Create a function that takes two inputs def simple_function(a, b): # and prints them combined return a + b Run the Function With Unpacked Arguments # Run the function with the unpacked argument dictionary simple_function(**argument_dict) &#39;AlphaBravo&#39;  # Run the function with the unpacked argument list simple_function(*argument_list) &#39;AlphaBravo&#39;  </description>
    </item>
    
    <item>
      <title>Use Command Line Arguments In A Function</title>
      <link>/python/basics/use_command_line_arguments_in_a_function/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/use_command_line_arguments_in_a_function/</guid>
      <description>Preliminary # Load library import argparse Create Python Code #!/usr/bin/env python3 # Create a function with two inputs def sum_two_values(value_one, value_two): # Add together two values _sum = value_one + value_two # Return sum return _sum # If the script is run if __name__ == &amp;#39;__main__&amp;#39;: # Create argument parser parser = argparse.ArgumentParser() # Create an argument called v1 or value_1 that is an integer parser.add_argument(&amp;#39;-v1&amp;#39;, &amp;#39;--value_1&amp;#39;, type=int, help=&amp;#39;The first value.</description>
    </item>
    
    <item>
      <title>Using List Comprehensions With pandas</title>
      <link>/python/data_wrangling/pandas_list_comprehension/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_list_comprehension/</guid>
      <description>Preliminaries # Import modules import pandas as pd # Set ipython&amp;#39;s max row display pd.set_option(&amp;#39;display.max_row&amp;#39;, 1000) # Set iPython&amp;#39;s max column width to 50 pd.set_option(&amp;#39;display.max_columns&amp;#39;, 50) Create an example dataframe data = {&amp;#39;name&amp;#39;: [&amp;#39;Jason&amp;#39;, &amp;#39;Molly&amp;#39;, &amp;#39;Tina&amp;#39;, &amp;#39;Jake&amp;#39;, &amp;#39;Amy&amp;#39;], &amp;#39;year&amp;#39;: [2012, 2012, 2013, 2014, 2014], &amp;#39;reports&amp;#39;: [4, 24, 31, 2, 3]} df = pd.DataFrame(data, index = [&amp;#39;Cochice&amp;#39;, &amp;#39;Pima&amp;#39;, &amp;#39;Santa Cruz&amp;#39;, &amp;#39;Maricopa&amp;#39;, &amp;#39;Yuma&amp;#39;]) df   .dataframe thead tr:only-child th { text-align: right; } .</description>
    </item>
    
    <item>
      <title>Using Named Tuples To Store Data</title>
      <link>/python/basics/using_named_tuples_to_store_data/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/using_named_tuples_to_store_data/</guid>
      <description> Preliminaries from collections import namedtuple Create A Named Tuple Vehicle = namedtuple(&amp;#39;Vehicle&amp;#39;, &amp;#39;make model wheels manual&amp;#39;) Create An Entry forrester = Vehicle(&amp;#39;Forrester&amp;#39;, &amp;#39;Subaru&amp;#39;, 4, True) View The Data In Entry forrester.model &#39;Subaru&#39;  forrester.wheels 4  </description>
    </item>
    
    <item>
      <title>Using Seaborn To Visualize A pandas Dataframe</title>
      <link>/python/data_wrangling/pandas_with_seaborn/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_with_seaborn/</guid>
      <description>Preliminaries import pandas as pd %matplotlib inline import random import matplotlib.pyplot as plt import seaborn as snsdf = pd.DataFrame() df[&amp;#39;x&amp;#39;] = random.sample(range(1, 100), 25) df[&amp;#39;y&amp;#39;] = random.sample(range(1, 100), 25)df.head()    x y     0 18 25   1 42 67   2 52 77   3 4 34   4 14 69     Scatterplot sns.lmplot(&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;, data=df, fit_reg=False) &amp;lt;seaborn.</description>
    </item>
    
    <item>
      <title>What Is The Probability An Economy Class Seat Is An Aisle Seat?</title>
      <link>/python/other/aisle_seat_probabilities/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/other/aisle_seat_probabilities/</guid>
      <description>There are two types of people in the world, aisle seaters and window seaters. I am an aisle seater, nothing is worse than limited bathroom access on a long flight. The first thing I do when I get my ticket is check to see if I have a window seat. If not, I immediately head over to the airline counter and try to get one.
Last flight, on Turkish Airlines, I ran into a curious situation.</description>
    </item>
    
    <item>
      <title>any(), all(), max(), min(), sum()</title>
      <link>/python/basics/any_all_max_min_sum/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/any_all_max_min_sum/</guid>
      <description> Create Data data = [34, 54, 50, 20, 20] any() # Return true if any element is True any(data) True  all() # Return true if all elements are True all(data) True  max() # Return max value max(data) 54  min() # Return the min value min(data) 20  sum() # Return the total value sum(data) 178  </description>
    </item>
    
    <item>
      <title>if and if else</title>
      <link>/python/basics/if_and_if_else_statements/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/if_and_if_else_statements/</guid>
      <description>Create a variable with the status of the conflict.  1 if the conflict is active 0 if the conflict is not active unknown if the status of the conflict is unknwon
conflict_active = 1  If the conflict is active print a statement if conflict_active == 1: print(&amp;#39;The conflict is active.&amp;#39;) The conflict is active.  If the conflict is active print a statement, if not, print a different statement if conflict_active == 1: print(&amp;#39;The conflict is active.</description>
    </item>
    
    <item>
      <title>pandas Data Structures</title>
      <link>/python/data_wrangling/pandas_data_structures/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_data_structures/</guid>
      <description>Import modules import pandas as pd Series 101 Series are one-dimensional arrays (like R&amp;rsquo;s vectors)
Create a series of the number of floodingReports floodingReports = pd.Series([5, 6, 2, 9, 12]) floodingReports 0 5 1 6 2 2 3 9 4 12 dtype: int64  Note that the first column of numbers (0 to 4) are the index.
Set county names to be the index of the floodingReports series floodingReports = pd.</description>
    </item>
    
    <item>
      <title>pandas Time Series Basics</title>
      <link>/python/data_wrangling/pandas_time_series_basics/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/data_wrangling/pandas_time_series_basics/</guid>
      <description>Import modules from datetime import datetime import pandas as pd %matplotlib inline import matplotlib.pyplot as pyplot Create a dataframe data = {&amp;#39;date&amp;#39;: [&amp;#39;2014-05-01 18:47:05.069722&amp;#39;, &amp;#39;2014-05-01 18:47:05.119994&amp;#39;, &amp;#39;2014-05-02 18:47:05.178768&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.230071&amp;#39;, &amp;#39;2014-05-02 18:47:05.280592&amp;#39;, &amp;#39;2014-05-03 18:47:05.332662&amp;#39;, &amp;#39;2014-05-03 18:47:05.385109&amp;#39;, &amp;#39;2014-05-04 18:47:05.436523&amp;#39;, &amp;#39;2014-05-04 18:47:05.486877&amp;#39;], &amp;#39;battle_deaths&amp;#39;: [34, 25, 26, 15, 15, 14, 26, 25, 62, 41]} df = pd.DataFrame(data, columns = [&amp;#39;date&amp;#39;, &amp;#39;battle_deaths&amp;#39;]) print(df)  date battle_deaths 0 2014-05-01 18:47:05.069722 34 1 2014-05-01 18:47:05.</description>
    </item>
    
    <item>
      <title>repr vs. str</title>
      <link>/python/basics/repr_vs_str/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/repr_vs_str/</guid>
      <description>Preliminaries import datetime Create A Simple Object class Regiment(object): def __init__(self, date=datetime.datetime.now()): self.date = date def __repr__(self): return date def __str__(self): return str(date) __repr__ is for the developer. It is string representation of the object and the code needed to reproduce the object.
__str__ is the output for the end user. It prints what the user wants to see.</description>
    </item>
    
    <item>
      <title>while Statement</title>
      <link>/python/basics/while_statements/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/python/basics/while_statements/</guid>
      <description>Import the random module import random Create a variable of the true number of deaths of an event deaths = 6 Create a variable that is denotes if the while loop should keep running running = True while running is True while running: # Create a variable that randomly create a integer between 0 and 10. guess = random.randint(0,10) # if guess equals deaths, if guess == deaths: # then print this print(&amp;#39;Correct!</description>
    </item>
    
  </channel>
</rss>