<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scalas on Chris Albon</title>
    <link>/scala/index.xml</link>
    <description>Recent content in Scalas on Chris Albon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Dec 2017 11:53:49 -0700</lastBuildDate>
    
	<atom:link href="/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Break A Sequence Into Groups</title>
      <link>/scala/basics/break_a_sequence_into_groups/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/break_a_sequence_into_groups/</guid>
      <description> Create An Array Sequence // Create an array that contains arrays with first and last names val ages = List(42,25,28,38,58,63,23,458,2569,584,25,25,878) Group Array By Anonymous Function // If an element is even, return True, if not, return False val isEven = ages.groupBy(_ % 2 == 0) View Groups // View group that is evens evensOdds(true) List(42, 28, 38, 58, 458, 584, 878)  // View group that is odds evensOdds(false) List(25, 63, 23, 2569, 25, 25)  </description>
    </item>
    
    <item>
      <title>Change Data Type</title>
      <link>/scala/basics/change_data_type/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/change_data_type/</guid>
      <description>Change To Integer // Convert a float to an integer 32.34.toInt 32  // Convert a string to an integer &amp;#34;23394&amp;#34;.toInt 23394  Change To Double // Convert a string to a double &amp;#34;23394&amp;#34;.toDouble 23394.0  Change To Float // Convert a string to float &amp;#34;23394&amp;#34;.toFloat 23394.0  // Convert an integer to float 3923.toFloat 3923.0  Change To Long // Convert a string to long &amp;#34;23394&amp;#34;.toLong 23394  Change To Short // Convert a string to short &amp;#34;23394&amp;#34;.</description>
    </item>
    
    <item>
      <title>Chunk Sequence In Equal Sized Groups</title>
      <link>/scala/basics/chuck_sequence_into_equal_sized_groups/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/chuck_sequence_into_equal_sized_groups/</guid>
      <description>Create An Array Sequence // Create an array that contains arrays with first and last names val ages = List(42,25,28,38,58,63,23,458,2569,584,25,25,878) Chunk Array Into Groups Of Two Elements // Slide over sequence, create a list of two elements, then take two steps ages.sliding(2,2).toArray Array(List(42, 25), List(28, 38), List(58, 63), List(23, 458), List(2569, 584), List(25, 25), List(878))  Chunk Array Into Groups Of Two Elements, With Overlap // Slide over sequence, create a list of two elements, then take one step ages.</description>
    </item>
    
    <item>
      <title>Compare Two Floats</title>
      <link>/scala/basics/compare_two_floats/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/compare_two_floats/</guid>
      <description>Create Two Float Values // Create a value val price_old = 2.343232 // Create a value that is very slight different val price_new = 2.343231 Create A Function That Compares Two Floats // Define a function called ~= that contains three arguments: two numbers and a precision level, def ~=(x: Double, y: Double, precision: Double) = { // If the absolute difference is less than the precision level, return true, otherwise return false  if ((x - y).</description>
    </item>
    
    <item>
      <title>Create A Range</title>
      <link>/scala/basics/create_a_range/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/create_a_range/</guid>
      <description> Create A Range 1 to 10 // Create a range between 1 and 10 1 to 10 Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  Create A Range In An Array // Create an array between 1 and 10 and put in an array (1 to 10).toArray Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  Use A Range In A For Loop // For each 1 in 1,2,3,4,5 for (i &amp;lt;- 1 to 10) // Print i  println(&amp;#34;index: &amp;#34;+ i) index: 1 index: 2 index: 3 index: 4 index: 5 index: 6 index: 7 index: 8 index: 9 index: 10  </description>
    </item>
    
    <item>
      <title>Extract Substrings Using Regex</title>
      <link>/scala/basics/extract_substring_using_regex/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/extract_substring_using_regex/</guid>
      <description> Create String // Create a string value val text: String = &amp;#34;27 aircraft&amp;#34; Create Regex Pattern // Create a regex with two pattern matches (one number and one word) val pattern = &amp;#34;([0-9]+) ([A-Za-z]+)&amp;#34;.r Extract Substrings That Match Regex // Apply the regex pattern such that each of the two pattern matches is assigned to a seperate value val pattern(vehicle_number, vehicle_type) = text View Output // View the value vehicle_number 27  // View the value vehicle_type aircraft  </description>
    </item>
    
    <item>
      <title>Filter A Sequence</title>
      <link>/scala/basics/filter_a_sequence/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/filter_a_sequence/</guid>
      <description> Create An Array Sequence // Create an array that contains arrays with first and last names val ages = Array(42,25,28,38,58,63,23,458,2569,584,25,25,878) Elements Less Than 100 ages.filter(_ &amp;lt; 100) Array(42, 25, 28, 38, 58, 63, 23, 25, 25)  Elements Greater Than 100 ages.filter(_ &amp;gt;= 100) Array(458, 2569, 584, 878)  Elements That Are Even ages.filter(_ % 2 == 0) Array(42, 28, 38, 58, 458, 584, 878)  </description>
    </item>
    
    <item>
      <title>Find Largest Key Or Value In A Map</title>
      <link>/scala/basics/find_largest_key_or_value_in_a_map/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/find_largest_key_or_value_in_a_map/</guid>
      <description> Create A Map // Create an immutable map with three key value pairs val numbers = Map(1 -&amp;gt; 100, 2 -&amp;gt; 200, 3 -&amp;gt; 300) Find Largest Key // Find largest key numbers.max (3,300)  Find Largest Value // Find the largest value numbers.valuesIterator.max 300  </description>
    </item>
    
    <item>
      <title>Flatten Sequence Of Sequences</title>
      <link>/scala/basics/flatten_sequence_of_sequences/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/flatten_sequence_of_sequences/</guid>
      <description> Create An Array Sequence // Create an array that contains arrays with first and last names val fullNames = Array( Array(&amp;#34;Jason&amp;#34;, &amp;#34;Miller&amp;#34;), Array(&amp;#34;Jason&amp;#34;, &amp;#34;Miller&amp;#34;), // Duplicate  Array(&amp;#34;Sally&amp;#34;, &amp;#34;Fields&amp;#34;), Array(&amp;#34;Betty&amp;#34;, &amp;#34;Johnson&amp;#34;) ) Flatten The Sequence // Flatten the sequence fullNames.flatten Array(Jason, Miller, Jason, Miller, Sally, Fields, Betty, Johnson)  Flatten The Sequence And Only Keep Unique Values // Flatten the sequence and remove any duplicates fullNames.flatten.distinct Array(Jason, Miller, Sally, Fields, Betty, Johnson)  </description>
    </item>
    
    <item>
      <title>For Loop A Map</title>
      <link>/scala/basics/for_loop_a_map/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/for_loop_a_map/</guid>
      <description> Create A Map val vehicles = Map(&amp;#34;vehicle_type&amp;#34; -&amp;gt; &amp;#34;Tank&amp;#34;, &amp;#34;number&amp;#34; -&amp;gt; 21) Loop With Value And Index // Create a value for the returned values, for each key and value in the map, val numberOfVehicles = for ((key, value) &amp;lt;- vehicles) yield { // Return the values  value }// View the returned values numberOfVehicles List(Tank, 21)  </description>
    </item>
    
    <item>
      <title>For Looping</title>
      <link>/scala/basics/for_looping/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/for_looping/</guid>
      <description>Create An Array val staffMembers = Array(&amp;#34;Jason Miller&amp;#34;, &amp;#34;Steve Miller&amp;#34;, &amp;#34;Sally Fields&amp;#34;) Loop Over Every Item In The Array // Create a value that is the output, then for each person in staff val staffFirstNames = for (person &amp;lt;- staffMembers) yield { // Upper case the name  val upperCaseFullNames = person.toUpperCase // Get the first name by splitting the full name by space and taking the first element  val firstName = upperCaseFullNames.</description>
    </item>
    
    <item>
      <title>Format Numbers As Currency</title>
      <link>/scala/basics/format_numbers_as_currency/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/format_numbers_as_currency/</guid>
      <description>Load The NumberFormat Currency Package // Create a value with the numberformat currency package val format_as_dollars = java.text.NumberFormat.getCurrencyInstance Format A Number As Dollars format_as_dollars.format(123.456789) $123.46  Change To A Local Currency Java&amp;rsquo;s locale uses ISO 3166-1 country codes.
// Load the java libraries import java.util.{Currency, Locale} // Create a value with the numberformat currency package val format_as_afghan = java.text.NumberFormat.getCurrencyInstance // Set the locale of Currency to Afganistan val af = Currency.</description>
    </item>
    
    <item>
      <title>If Else</title>
      <link>/scala/basics/if_else/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/if_else/</guid>
      <description> Create A Value // Create a value called x that is a short integer of 3 val x: Short = 3 Create A Conditional Expression // Create a value that is 1 if x is greater than 0, otherwise -1 val binary = if (x &amp;gt; 0) 1 else -1 // View that value binary 1  </description>
    </item>
    
    <item>
      <title>Increment And Decrement Numbers</title>
      <link>/scala/basics/increment_and_decrement_numbers/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/increment_and_decrement_numbers/</guid>
      <description> Create Integer Variable // Create an integer variable of 10 var i:Int = 10 Increment And Decrement // Increment up 1 i += 1 // View variable i 11  // Decrement up 1 i -= 1 // View variable i 10  // Increment up x2 i *= 2 // View variable i 20  // Decrement down by half i /= 2 // View variable i 10  </description>
    </item>
    
    <item>
      <title>Insert Variables Into Strings</title>
      <link>/scala/basics/insert_variables_into_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/insert_variables_into_strings/</guid>
      <description> The proper term from this is string interpolation.
Create A Value // Create some values val number_of_soldiers: Short = 542 val casualties: Short = 32 Add The Value To A String print(f&amp;#34;Before the battle we had $number_of_soldierssoldiers. However, now we have ${number_of_soldiers - casualties}.&amp;#34;) Before the battle we had 542 soldiers. However, now we have 510.  </description>
    </item>
    
    <item>
      <title>Iterate Over A Map</title>
      <link>/scala/basics/iterate_over_a_map/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/iterate_over_a_map/</guid>
      <description>Create A Map // Create a map with three key value pairs val prices = Map(&amp;#34;Video Card&amp;#34; -&amp;gt; 200.00, &amp;#34;Motherboard&amp;#34; -&amp;gt; 400.00, &amp;#34;CPU&amp;#34; -&amp;gt; 100.00) Loop Over A Map // for each key and value in prices for ((k,v) &amp;lt;- prices) yield { // Return the value plus 100  v+100 } List(300.0, 500.0, 200.0)  Apply Function To Each Map Value // Increase each value in the map by 1000 prices.</description>
    </item>
    
    <item>
      <title>Loop A Collection</title>
      <link>/scala/basics/loop_a_collection/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/loop_a_collection/</guid>
      <description> Create A Vector Collection val vector = Vector(&amp;#34;Male&amp;#34;, 2, true) Loop Over The Collection // For each item in the collection, print the class type of the element vector.foreach((i: Any) =&amp;gt; println(i, i.getClass.getSimpleName)) (Male,String) (2,Integer) (true,Boolean)  // For each item in the collection vector.foreach { // If one of these, print &amp;#34;Man&amp;#34;  case &amp;#34;Male&amp;#34; | &amp;#34;M&amp;#34; | &amp;#34;Man&amp;#34; | &amp;#34;Gentleman&amp;#34; | &amp;#34;Boy&amp;#34; =&amp;gt; println(&amp;#34;Man&amp;#34;) // For everything else, print &amp;#34;Something Else&amp;#34;  case _ =&amp;gt; println(&amp;#34;Something Else&amp;#34;) } Man Something Else Something Else  </description>
    </item>
    
    <item>
      <title>Make Numbers Pretty</title>
      <link>/scala/basics/make_numbers_pretty/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/make_numbers_pretty/</guid>
      <description>Load The NumberFormat Library // Make value that is assigned to an instance of numberformat val make_pretty = java.text.NumberFormat.getInstance Make An Integer Pretty // Format 10000 to 10,000 make_pretty.format(10000) Make A Float Pretty // Format to 10000.1928 to 10,000.193 make_pretty.format(10000.1928) 10,000.193  Load The NumberFortmat Library Set For European Numbers // Set the locale to germany val germany = new java.util.Locale(&amp;#34;de&amp;#34;, &amp;#34;DE&amp;#34;) // Make value that is assigned to an instance of numberformat set to germany val make_pretty_de = java.</description>
    </item>
    
    <item>
      <title>Mapping A Function To A Collection</title>
      <link>/scala/basics/mapping_a_function_to_a_collection/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/mapping_a_function_to_a_collection/</guid>
      <description>Preliminaries import scala.collection.mutable.ArrayBuffer Create Collection // Create an array of strings var birds = ArrayBuffer(&amp;#34;Hawk&amp;#34;, &amp;#34;Condor&amp;#34;, &amp;#34;Eagle&amp;#34;, &amp;#34;Pigeon&amp;#34;) Create Function // Create a function that returns the length of a string val getLength = (i: String) =&amp;gt; i.length Map The Function To The Collection // Map the function to the array birds.map(getLength) ArrayBuffer(4, 6, 5, 6)  Map An Anonymous Function To The Collection // Map the anonymous function to the collection birds.</description>
    </item>
    
    <item>
      <title>Matching Conditions</title>
      <link>/scala/basics/matching_conditions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/matching_conditions/</guid>
      <description> Create A String // Create some strings val text1 = &amp;#34;Man&amp;#34; val text2 = &amp;#34;F&amp;#34; val text3 = &amp;#34;Dog&amp;#34; Create A Function That Uses A Match Expression // Define a function that takes in a string, and matches it def findGender(word: String) = word match { // If any of these words, return &amp;#34;Woman&amp;#34;  case &amp;#34;Female&amp;#34; | &amp;#34;F&amp;#34; | &amp;#34;Woman&amp;#34; | &amp;#34;Lady&amp;#34; | &amp;#34;Girl&amp;#34; =&amp;gt; &amp;#34;Woman&amp;#34; // If any of these words, return &amp;#34;Man&amp;#34;  case &amp;#34;Male&amp;#34; | &amp;#34;M&amp;#34; | &amp;#34;Man&amp;#34; | &amp;#34;Gentleman&amp;#34; | &amp;#34;Boy&amp;#34; =&amp;gt; &amp;#34;Man&amp;#34; // If anything else, return &amp;#34;Unknown&amp;#34;  case _ =&amp;gt; &amp;#34;Unknown&amp;#34; } Apply The Function To The Strings findGender(text1) Man  findGender(text2) Woman  findGender(text3) Unknown  </description>
    </item>
    
    <item>
      <title>Mutable Maps</title>
      <link>/scala/basics/mutable_maps/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/mutable_maps/</guid>
      <description>Create A Mutable Map val army = collection.mutable.Map( &amp;#34;Tank&amp;#34; -&amp;gt; &amp;#34;A-1 Abrams&amp;#34;, &amp;#34;Aircraft&amp;#34; -&amp;gt; &amp;#34;F35&amp;#34;, &amp;#34;Ship&amp;#34; -&amp;gt; &amp;#34;Nimitz Class&amp;#34; ) Add An Element // Add an element army += (&amp;#34;APC&amp;#34; -&amp;gt; &amp;#34;Bradley IFC&amp;#34;) // Add an element (alternative) army.put(&amp;#34;Weapon&amp;#34;, &amp;#34;M60&amp;#34;) None  Add Multiple Elements // Add two elements army += (&amp;#34;Helicopter&amp;#34; -&amp;gt; &amp;#34;Apache&amp;#34;, &amp;#34;Missile&amp;#34; -&amp;gt; &amp;#34;Sidewinder&amp;#34;) Map(Weapon -&amp;gt; M60, APC -&amp;gt; Bradley IFC, Missile -&amp;gt; Sidewinder, Tank -&amp;gt; A-1 Abrams, Aircraft -&amp;gt; F35, Helicopter -&amp;gt; Apache, Ship -&amp;gt; Nimitz Class)  Remove An Element // Remove an element army -= &amp;#34;Ship&amp;#34; // Remove an element (alternative) army.</description>
    </item>
    
    <item>
      <title>N Dimension Arrays</title>
      <link>/scala/basics/n_dimension_arrays/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/n_dimension_arrays/</guid>
      <description> Create 2 x 2 Array // Set the number of rows and columns val rows = 2 val columns = 2 // Create an array of integers that is 2x2 val matrix = Array.ofDim[Int](rows, columns)// View array matrix Array(Array(0, 0), Array(0, 0))  Add Values To Array // First row, first column matrix(0)(0) = 1 // First row, second column matrix(0)(1) = 0 // Second row, first column matrix(1)(0) = 0 // Second row, second column matrix(1)(1) = 1// View array matrix Array(Array(1, 0), Array(0, 1))  </description>
    </item>
    
    <item>
      <title>Partial Functions</title>
      <link>/scala/basics/partial_functions/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/partial_functions/</guid>
      <description> isDefinedAt determines which inputs are accepted. apply is the actual operation.
Create A Partial Function // Create a new partial function that inputs a integer and outputs a string val dayOfTheWeek = new PartialFunction[Int, String] { // Create an array with the days of the week  val days = Array(&amp;#34;Monday&amp;#34;, &amp;#34;Tuesday&amp;#34;, &amp;#34;Wednesday&amp;#34;, &amp;#34;Thursday&amp;#34;, &amp;#34;Friday&amp;#34;, &amp;#34;Saturday&amp;#34;, &amp;#34;Sunday&amp;#34;) // Only accept input integers that are between 0 and 6  def isDefinedAt(i: Int) = i &amp;gt; 0 &amp;amp;&amp;amp; i &amp;lt; 6 // If accepted, return the correct day of the week string  def apply(i: Int) = days(i-1) } Run The Partial Function dayOfTheWeek(2) Tuesday  </description>
    </item>
    
    <item>
      <title>Random Integer Between Two Values</title>
      <link>/scala/basics/random_integer_between_two_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/random_integer_between_two_values/</guid>
      <description>Load Random // Create a value that is the random package val random = new scala.util.Random Create A Start And End // Create a start and end value pair val start = -10 val end = 10 Generate Random Integer Between The Start And End Values // Then generate a random integer between 0 and the different between end and start + 1 //(to make it inclusive), then shift the value into the desired range by added the start value start + random.</description>
    </item>
    
    <item>
      <title>Replacing Parts Of Strings</title>
      <link>/scala/basics/replacing_parts_of_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/replacing_parts_of_strings/</guid>
      <description>Create A String // Create a string value val text: String = &amp;#34;Lt. Steve Miller will be leading the attack.&amp;#34; Create A Regex Pattern // Create a regex pattern for a name val find_steve = &amp;#34;Steve Miller&amp;#34;.r Replace Anything That Matches That Pattern With Something Else // Replace all instances of the pattern with a different name find_steve.replaceAllIn(text, &amp;#34;Peter Jackson&amp;#34;) Lt. Peter Jackson will be leading the attack.  Replace First Match // Replace first instance of the pattern with a different name find_steve.</description>
    </item>
    
    <item>
      <title>Search A Map</title>
      <link>/scala/basics/search_a_map/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/search_a_map/</guid>
      <description> Create A Map // Create an immutable map with three key value pairs val staff = Map(&amp;#34;CEO&amp;#34; -&amp;gt; &amp;#34;Judith Jackson&amp;#34;, &amp;#34;CFO&amp;#34; -&amp;gt; &amp;#34;Sally Shields&amp;#34;, &amp;#34;CTO&amp;#34; -&amp;gt; &amp;#34;Steven Miller&amp;#34;) Test If Key Exists // Test if key exists staff.contains(&amp;#34;CTO&amp;#34;) true  Test If Value Exists // Test is any value exists which contains part of a string staff.valuesIterator.exists(_.contains(&amp;#34;Miller&amp;#34;)) true  </description>
    </item>
    
    <item>
      <title>Search Strings</title>
      <link>/scala/basics/search_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/search_strings/</guid>
      <description>Create A String // Create a value called text that is a string val text: String = &amp;#34;This is a sentence that we want to split along every space&amp;#34; Array(This, is, a, sentence, that, we, want, to, split, along, every, space)  Split Up A String By Commas // Create a value called csv_row that is a string and contains one row of data val csv_row: String = &amp;#34;Billy, Miller, 22, Baker, High School&amp;#34; // Split up that row by commas csv_row.</description>
    </item>
    
    <item>
      <title>Search Strings Using Regex</title>
      <link>/scala/basics/search_strings_with_regex/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/search_strings_with_regex/</guid>
      <description>Create A String // Create a string value val attack_order : String = &amp;#34;Our 382 troops will attack their east flank at dawn. They have 28 troops there.&amp;#34; Create A Regex Pattern // Create a value that is a regex pattern val find_numbers = &amp;#34;[0-9]+&amp;#34;.r Find First Match // Apply the regex to find the first match, output the result, otherwise output &amp;#34;None&amp;#34; find_numbers.findFirstIn(attack_order).getOrElse(&amp;#34;None&amp;#34;) 382  Find All Matches // Apply the regex to find all matches and output to an array find_numbers.</description>
    </item>
    
    <item>
      <title>Set Operations On Sequences</title>
      <link>/scala/basics/set_operations_on_sequences/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/set_operations_on_sequences/</guid>
      <description>Preliminaries import scala.collection.mutable.ArrayBuffer Create Two Array Sequences // Create two arrays of ages val student_ages = ArrayBuffer(42,25,28,38,58,63,23,458,2569,584,25,25) val teacher_ages = ArrayBuffer(23,25,25,38,58,32,23,23,125,23,23,21,26) Concatenate Two Sequences // Join two sequences end to end student_ages ++ teacher_ages ArrayBuffer(42, 25, 28, 38, 58, 63, 23, 458, 2569, 584, 25, 25, 23, 25, 25, 38, 58, 32, 23, 23, 125, 23, 23, 21, 26)  Intersection (Shared Elements) Of Two Sequences // Create the interaction of two sequences teacher_ages.</description>
    </item>
    
    <item>
      <title>Sorting Sequences</title>
      <link>/scala/basics/sorting_sequences/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/sorting_sequences/</guid>
      <description>Create Two Vectors // Create two vectors val ages = Vector(23,42,12,34) val lastName = Vector(&amp;#34;Jackson&amp;#34;, &amp;#34;Dillan&amp;#34;, &amp;#34;Bower&amp;#34;, &amp;#34;Stein&amp;#34;) Sort Alphabetically // View the sequence alphabetically lastName.sorted Vector(Bower, Dillan, Jackson, Stein)  Sort Ascending // View the sequence in ascending order ages.sorted Vector(12, 23, 34, 42)  Sort Descending // View the sequence sorted using i &amp;gt; j ages.sortWith(_ &amp;gt; _) Vector(42, 34, 23, 12)  Sort By Length // Voew the sequence sorted by descending length lastName.</description>
    </item>
    
    <item>
      <title>Split Strings</title>
      <link>/scala/basics/split_strings/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/split_strings/</guid>
      <description>Split Up A String By Spaces // Create a value called text that is a string val text: String = &amp;#34;This is a sentence that we want to split along every space&amp;#34; // Split up the value along every space text.split(&amp;#34; &amp;#34;) Array(This, is, a, sentence, that, we, want, to, split, along, every, space)  Split Up A String By Commas // Create a value called csv_row that is a string and contains one row of data val csv_row: String = &amp;#34;Billy, Miller, 22, Baker, High School&amp;#34; // Split up that row by commas csv_row.</description>
    </item>
    
    <item>
      <title>Try, Catch, Finally</title>
      <link>/scala/basics/try_catch_finally/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/try_catch_finally/</guid>
      <description>Create Some Operation That Will Cause An Exception &amp;#34;Sixteen&amp;#34;.toFloat Name: java.lang.NumberFormatException Message: For input string: &amp;quot;Sixteen&amp;quot; StackTrace: at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043) at sun.misc.FloatingDecimal.parseFloat(FloatingDecimal.java:122) at java.lang.Float.parseFloat(Float.java:451) at scala.collection.immutable.StringLike$class.toFloat(StringLike.scala:280) at scala.collection.immutable.StringOps.toFloat(StringOps.scala:29)  Try, Catch, Finally // Try try { // The bad operation  &amp;#34;Sixteen&amp;#34;.toFloat // Catch any problems } catch { // If it is an exception, print something  case e: Exception =&amp;gt; println(&amp;#34;Something went wrong&amp;#34;) } finally { // Regardless of if there is an error or not, print this  println(&amp;#34;We are finally done.</description>
    </item>
    
    <item>
      <title>Variables And Values</title>
      <link>/scala/basics/variables_and_values/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/variables_and_values/</guid>
      <description> Values Are Immutable // Create a value called greeting that is a string with the word &amp;#34;Hello&amp;#34; val greeting: String = &amp;#34;Hello&amp;#34; // View the value greeting Hello  Variables Are Mutable // Create a variable called age that is a &amp;#34;short&amp;#34; number (between -32768 to 32767) with the number 12 var age: Short = 12 // View the variable age 12  </description>
    </item>
    
    <item>
      <title>Zip Together Two Lists</title>
      <link>/scala/basics/zip_together_two_lists/</link>
      <pubDate>Wed, 20 Dec 2017 11:53:49 -0700</pubDate>
      
      <guid>/scala/basics/zip_together_two_lists/</guid>
      <description> Create Two Vectors // Create two vectors val firstName = Vector(&amp;#34;Steve&amp;#34;, &amp;#34;Bob&amp;#34;, &amp;#34;Jack&amp;#34;, &amp;#34;Jill&amp;#34;) val lastName = Vector(&amp;#34;Jackson&amp;#34;, &amp;#34;Dillan&amp;#34;, &amp;#34;Bower&amp;#34;, &amp;#34;Stein&amp;#34;) Zip Together Vectors // Create a new variable that zips the sequences val fullNames = firstName zip lastName// View the zipped sequences and convert to a map fullNames Vector((Steve,Jackson), (Bob,Dillan), (Jack,Bower), (Jill,Stein))  </description>
    </item>
    
  </channel>
</rss>